{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/floatingbutton.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { Button, ButtonGroup, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Tooltip } from \"@nextui-org/react\";\nimport { Clipboard, Archive, FileDown, CircleEllipsis } from 'lucide-react';\nimport jsPDF from 'jspdf';\nimport toast, { Toaster } from 'react-hot-toast';\n\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\ninterface Task {\n    id: number;\n    text: string;\n    completed: boolean;\n    subtasks: SubTask[];\n}\n\ninterface SubTask {\n    id: number;\n    text: string;\n    completed: boolean;\n}\n\nconst quadrantDetails: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\ninterface FloatingButtonProps {\n    tasks: Record<QuadrantType, Task[]>;\n    showArchivedTasks: () => void;\n    isArchiveMode: boolean;\n}\n\nconst FloatingButton: React.FC<FloatingButtonProps> = ({ tasks, showArchivedTasks, isArchiveMode }) => {\n    const formatTasksToMarkdown = () => {\n        let markdown = '';\n        (Object.keys(quadrantDetails) as QuadrantType[]).forEach((quadrantKey) => {\n            const quadrantLabel = quadrantDetails[quadrantKey];\n            markdown += `## ${quadrantLabel}\\n\\n`;\n            if (tasks[quadrantKey].length > 0) {\n                tasks[quadrantKey].forEach((task: Task) => {\n                    markdown += `- [${task.completed ? 'x' : ' '}] ${task.text}\\n`;\n                    task.subtasks.forEach((subtask: SubTask) => {\n                        markdown += `   - [${subtask.completed ? 'x' : ' '}] ${subtask.text}\\n`;\n                    });\n                });\n            } else {\n                markdown += 'No tasks added yet.\\n';\n            }\n            markdown += '\\n';\n        });\n        return markdown;\n    };\n\n    const copyToClipboard = () => {\n        const markdownContent = formatTasksToMarkdown();\n        navigator.clipboard.writeText(markdownContent)\n            .then(() => toast.success('Tasks copied to clipboard'))\n            .catch(err => {\n                console.error('Failed to copy to clipboard: ', err);\n                toast.error('Failed to copy tasks');\n            });\n    };\n\n    const saveAsPDF = () => {\n        const pdf = new jsPDF();\n        const pageWidth = pdf.internal.pageSize.getWidth();\n        const tableWidth = pageWidth - 20; // Leave some padding on both sides\n        const lineHeight = 10;\n        let startX = 10;\n        let startY = 20; // Start slightly lower on the page for spacing\n\n        // Loop through quadrants and render tasks in a table layout\n        (Object.keys(quadrantDetails) as QuadrantType[]).forEach((quadrantKey, idx) => {\n            const quadrantLabel = quadrantDetails[quadrantKey];\n\n            // Add space between quadrants (tables)\n            if (idx !== 0) {\n                startY += 20;\n            }\n\n            // Draw the quadrant title\n            pdf.setFontSize(14);\n            pdf.text(quadrantLabel, startX, startY);\n            startY += lineHeight;\n\n            // Draw table for each quadrant\n            pdf.setFontSize(12);\n\n            // Add table header\n            pdf.text('Tasks', startX, startY);\n            pdf.text('Subtasks', startX + 80, startY); // Adjust the X position for subtasks\n            startY += lineHeight;\n\n            // Draw tasks and subtasks inside the table\n            tasks[quadrantKey].forEach((task) => {\n                // Task text with checkbox\n                const checkbox = task.completed ? '[x]' : '[ ]';\n                pdf.text(`${checkbox} ${task.text}`, startX, startY);\n                startY += lineHeight;\n\n                // Subtasks indented with checkbox\n                task.subtasks.forEach((subtask) => {\n                    const subCheckbox = subtask.completed ? '[x]' : '[ ]';\n                    pdf.text(`${subCheckbox} ${subtask.text}`, startX + 80, startY); // Indent subtasks\n                    startY += lineHeight;\n                });\n            });\n\n            // If there are no tasks in the quadrant\n            if (tasks[quadrantKey].length === 0) {\n                pdf.text('No tasks added yet.', startX, startY);\n                startY += lineHeight;\n            }\n\n            // Check if the current Y position exceeds the page length, and add a new page if necessary\n            if (startY > pdf.internal.pageSize.getHeight() - 30) {\n                pdf.addPage();\n                startY = 20; // Reset the Y position for the new page\n            }\n        });\n\n        // Save the generated PDF\n        pdf.save('tasks.pdf');\n        toast.success('PDF exported');\n    };\n\n\n\n    const handleArchiveTasks = () => {\n        showArchivedTasks();\n        toast.success(isArchiveMode ? 'Hiding archived tasks' : 'Showing archived tasks');\n    };\n\n    return (\n        <>\n            <div><Toaster /></div>\n            <ButtonGroup className='z-10 fixed bottom-10 right-10' variant=\"flat\">\n                <Tooltip content=\"Choose an action\">\n                    <Dropdown placement=\"top-end\">\n                        <DropdownTrigger>\n                            <Button isIconOnly>\n                                <CircleEllipsis />\n                            </Button>\n                        </DropdownTrigger>\n                        <DropdownMenu aria-label=\"Task options\" disabledKeys={[\"copy\", \"archive\", \"save\"]}>                           \n                             <DropdownItem\n                            key=\"copy\"\n                            description=\"Premium feature\"\n                            startContent={<Clipboard size={16} />}\n                            onClick={copyToClipboard}\n                        >\n                            Copy Tasks to Clipboard\n                        </DropdownItem>\n                            <DropdownItem\n                                key=\"archive\"\n                                description={\"Premium feature\"}                                startContent={<Archive size={16} />}\n                                onClick={handleArchiveTasks}\n                            >\n                                {isArchiveMode ? \"Hide Archived\" : \"Show Archived\"}\n                            </DropdownItem>\n                            <DropdownItem\n                                key=\"save\"\n                                description=\"Premium feature\"\n                                startContent={<FileDown size={16} />}\n                                onClick={saveAsPDF}\n                            >\n                                Save as PDF\n                            </DropdownItem>\n                        </DropdownMenu>\n                    </Dropdown>\n                </Tooltip>            </ButtonGroup>\n        </>\n    );\n};\n\nexport default FloatingButton;"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;AAuBA,MAAM,kBAAgD;IAClD,IAAI;IACJ,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,UAAU;AACd;AAQA,MAAM,iBAAgD,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,aAAa,EAAE;IAC9F,MAAM,wBAAwB;QAC1B,IAAI,WAAW;QACd,OAAO,IAAI,CAAC,iBAAoC,OAAO,CAAC,CAAC;YACtD,MAAM,gBAAgB,eAAe,CAAC,YAAY;YAClD,YAAY,CAAC,GAAG,EAAE,cAAc,IAAI,CAAC;YACrC,IAAI,KAAK,CAAC,YAAY,CAAC,MAAM,GAAG,GAAG;gBAC/B,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBACxB,YAAY,CAAC,GAAG,EAAE,KAAK,SAAS,GAAG,MAAM,IAAI,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC;oBAC9D,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC;wBACnB,YAAY,CAAC,MAAM,EAAE,QAAQ,SAAS,GAAG,MAAM,IAAI,EAAE,EAAE,QAAQ,IAAI,CAAC,EAAE,CAAC;oBAC3E;gBACJ;YACJ,OAAO;gBACH,YAAY;YAChB;YACA,YAAY;QAChB;QACA,OAAO;IACX;IAEA,MAAM,kBAAkB;QACpB,MAAM,kBAAkB;QACxB,UAAU,SAAS,CAAC,SAAS,CAAC,iBACzB,IAAI,CAAC,IAAM,uJAAA,CAAA,UAAK,CAAC,OAAO,CAAC,8BACzB,KAAK,CAAC,CAAA;YACH,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,uJAAA,CAAA,UAAK,CAAC,KAAK,CAAC;QAChB;IACR;IAEA,MAAM,YAAY;QACd,MAAM,MAAM,IAAI,mJAAA,CAAA,UAAK;QACrB,MAAM,YAAY,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ;QAChD,MAAM,aAAa,YAAY,IAAI,mCAAmC;QACtE,MAAM,aAAa;QACnB,IAAI,SAAS;QACb,IAAI,SAAS,IAAI,+CAA+C;QAEhE,4DAA4D;QAC3D,OAAO,IAAI,CAAC,iBAAoC,OAAO,CAAC,CAAC,aAAa;YACnE,MAAM,gBAAgB,eAAe,CAAC,YAAY;YAElD,uCAAuC;YACvC,IAAI,QAAQ,GAAG;gBACX,UAAU;YACd;YAEA,0BAA0B;YAC1B,IAAI,WAAW,CAAC;YAChB,IAAI,IAAI,CAAC,eAAe,QAAQ;YAChC,UAAU;YAEV,+BAA+B;YAC/B,IAAI,WAAW,CAAC;YAEhB,mBAAmB;YACnB,IAAI,IAAI,CAAC,SAAS,QAAQ;YAC1B,IAAI,IAAI,CAAC,YAAY,SAAS,IAAI,SAAS,qCAAqC;YAChF,UAAU;YAEV,2CAA2C;YAC3C,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACxB,0BAA0B;gBAC1B,MAAM,WAAW,KAAK,SAAS,GAAG,QAAQ;gBAC1C,IAAI,IAAI,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,EAAE,QAAQ;gBAC7C,UAAU;gBAEV,kCAAkC;gBAClC,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACnB,MAAM,cAAc,QAAQ,SAAS,GAAG,QAAQ;oBAChD,IAAI,IAAI,CAAC,CAAC,EAAE,YAAY,CAAC,EAAE,QAAQ,IAAI,CAAC,CAAC,EAAE,SAAS,IAAI,SAAS,kBAAkB;oBACnF,UAAU;gBACd;YACJ;YAEA,wCAAwC;YACxC,IAAI,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,GAAG;gBACjC,IAAI,IAAI,CAAC,uBAAuB,QAAQ;gBACxC,UAAU;YACd;YAEA,2FAA2F;YAC3F,IAAI,SAAS,IAAI,QAAQ,CAAC,QAAQ,CAAC,SAAS,KAAK,IAAI;gBACjD,IAAI,OAAO;gBACX,SAAS,IAAI,wCAAwC;YACzD;QACJ;QAEA,yBAAyB;QACzB,IAAI,IAAI,CAAC;QACT,uJAAA,CAAA,UAAK,CAAC,OAAO,CAAC;IAClB;IAIA,MAAM,qBAAqB;QACvB;QACA,uJAAA,CAAA,UAAK,CAAC,OAAO,CAAC,gBAAgB,0BAA0B;IAC5D;IAEA,qBACI;;0BACI,wPAAC;0BAAI,cAAA,wPAAC,uJAAA,CAAA,UAAO;;;;;;;;;;0BACb,wPAAC,8NAAA,CAAA,cAAW;gBAAC,WAAU;gBAAgC,SAAQ;;kCAC3D,wPAAC,sNAAA,CAAA,UAAO;wBAAC,SAAQ;kCACb,cAAA,wPAAC,yNAAA,CAAA,WAAQ;4BAAC,WAAU;;8CAChB,wPAAC,wOAAA,CAAA,kBAAe;8CACZ,cAAA,wPAAC,mNAAA,CAAA,SAAM;wCAAC,UAAU;kDACd,cAAA,wPAAC,0NAAA,CAAA,iBAAc;;;;;;;;;;;;;;;8CAGvB,wPAAC,kOAAA,CAAA,eAAY;oCAAC,cAAW;oCAAe,cAAc;wCAAC;wCAAQ;wCAAW;qCAAO;;sDAC5E,wPAAC,+NAAA,CAAA,eAAY;4CAEd,aAAY;4CACZ,4BAAc,wPAAC,4MAAA,CAAA,YAAS;gDAAC,MAAM;;;;;;4CAC/B,SAAS;sDACZ;2CAJO;;;;;sDAOJ,wPAAC,+NAAA,CAAA,eAAY;4CAET,aAAa;4CAAkD,4BAAc,wPAAC,wMAAA,CAAA,UAAO;gDAAC,MAAM;;;;;;4CAC5F,SAAS;sDAER,gBAAgB,kBAAkB;2CAJ/B;;;;;sDAMR,wPAAC,+NAAA,CAAA,eAAY;4CAET,aAAY;4CACZ,4BAAc,wPAAC,8MAAA,CAAA,WAAQ;gDAAC,MAAM;;;;;;4CAC9B,SAAS;sDACZ;2CAJO;;;;;;;;;;;;;;;;;;;;;;oBASV;;;;;;;;;AAG1B;uCAEe"}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/subtaskitem.tsx"],"sourcesContent":["// SubtaskItem.tsx\n\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Checkbox, Button } from '@nextui-org/react';\nimport { SubTask, QuadrantType } from '../customtypes';\nimport { Trash2 } from 'lucide-react';\n\ninterface SubtaskItemProps {\n    subtask: SubTask;\n    taskId: number;\n    index: number;\n    quadrant: QuadrantType;\n    toggleSubtaskCompletion: () => void;\n    deleteSubtask: () => void;\n    setSubtaskToEdit: () => void;\n}\n\nconst SubtaskItem: React.FC<SubtaskItemProps> = ({\n    subtask,\n    taskId,\n    index,\n    quadrant,\n    toggleSubtaskCompletion,\n    deleteSubtask,\n    setSubtaskToEdit\n}) => {\n    return (\n        <Draggable key={subtask.id} draggableId={`${taskId}-${subtask.id}`} index={index}>\n            {(provided, snapshot) => (\n                <li\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    className={`flex items-center justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-600' : 'hover:bg-gray-100'}`}\n                >\n                    <div className=\"flex items-center\">\n                        <Checkbox\n                            isSelected={subtask.completed}\n                            onChange={toggleSubtaskCompletion}\n                            aria-label={`Mark subtask ${subtask.text} as completed`}\n                        />\n                        <span className={`ml-2 ${subtask.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>\n                            {subtask.text}\n                        </span>\n                    </div>\n                    <div className=\"flex items-center\">\n                        <Button\n                            size=\"sm\"\n                            variant=\"light\"\n                            onClick={setSubtaskToEdit}\n                            aria-label={`Edit subtask ${subtask.text}`}\n                            className=\"mr-2\"\n                        >\n                            Edit\n                        </Button>\n                        <Button\n                            size=\"sm\"\n                            variant=\"light\"\n                            onClick={deleteSubtask}\n                            aria-label={`Delete subtask ${subtask.text}`}\n                        >\n                            <Trash2 size={16} />\n                        </Button>\n                    </div>\n                </li>\n            )}\n        </Draggable>\n    );\n};\n\nexport default SubtaskItem;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;;;;;;;;;AAkBlB,MAAM,cAA0C,CAAC,EAC7C,OAAO,EACP,MAAM,EACN,KAAK,EACL,QAAQ,EACR,uBAAuB,EACvB,aAAa,EACb,gBAAgB,EACnB;IACG,qBACI,wPAAC,qLAAA,CAAA,YAAS;QAAkB,aAAa,CAAC,EAAE,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QAAE,OAAO;kBACtE,CAAC,UAAU,yBACR,wPAAC;gBACG,KAAK,SAAS,QAAQ;gBACrB,GAAG,SAAS,cAAc;gBAC1B,GAAG,SAAS,eAAe;gBAC5B,WAAW,CAAC,mDAAmD,EAAE,SAAS,UAAU,GAAG,gBAAgB,oBAAoB,CAAC;;kCAE5H,wPAAC;wBAAI,WAAU;;0CACX,wPAAC,yNAAA,CAAA,WAAQ;gCACL,YAAY,QAAQ,SAAS;gCAC7B,UAAU;gCACV,cAAY,CAAC,aAAa,EAAE,QAAQ,IAAI,CAAC,aAAa,CAAC;;;;;;0CAE3D,wPAAC;gCAAK,WAAW,CAAC,KAAK,EAAE,QAAQ,SAAS,GAAG,+BAA+B,gBAAgB,CAAC;0CACxF,QAAQ,IAAI;;;;;;;;;;;;kCAGrB,wPAAC;wBAAI,WAAU;;0CACX,wPAAC,mNAAA,CAAA,SAAM;gCACH,MAAK;gCACL,SAAQ;gCACR,SAAS;gCACT,cAAY,CAAC,aAAa,EAAE,QAAQ,IAAI,CAAC,CAAC;gCAC1C,WAAU;0CACb;;;;;;0CAGD,wPAAC,mNAAA,CAAA,SAAM;gCACH,MAAK;gCACL,SAAQ;gCACR,SAAS;gCACT,cAAY,CAAC,eAAe,EAAE,QAAQ,IAAI,CAAC,CAAC;0CAE5C,cAAA,wPAAC,0MAAA,CAAA,SAAM;oCAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;OAlClB,QAAQ,EAAE;;;;;AAyClC;uCAEe"}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/taskitem.tsx"],"sourcesContent":["// TaskItem.tsx\n\nimport React, { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { ChevronDown, ChevronUp, GripVertical, MoreVertical } from 'lucide-react';\nimport { Button, ButtonGroup, Dropdown, DropdownItem, DropdownMenu, DropdownSection, DropdownTrigger, Spinner } from '@nextui-org/react';\nimport { Task, QuadrantType } from '../customtypes';\nimport SubtaskItem from './subtaskitem';\n\ninterface TaskItemProps {\n    task: Task;\n    quadrant: QuadrantType;\n    index: number;\n    expandedTaskIds: number[];\n    toggleTaskCompletion: (quadrant: QuadrantType, taskId: number) => void;\n    toggleTaskExpansion: (taskId: number) => void;\n    setTaskToEdit: (task: Task, quadrant: QuadrantType) => void;\n    deleteTask: (quadrant: QuadrantType, taskId: number) => void;\n    renderSubtasks: (task: Task) => JSX.Element;\n    archiveTask: () => void;\n    moveTaskToQuadrant: (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => void;\n    onTaskModalOpen: () => void;\n    onTaskModalClose: () => void;\n}\n\nconst TaskItem: React.FC<TaskItemProps> = ({\n    task,\n    quadrant,\n    index,\n    expandedTaskIds,\n    toggleTaskCompletion,\n    toggleTaskExpansion,\n    setTaskToEdit,\n    deleteTask,\n    archiveTask,\n    moveTaskToQuadrant,\n    renderSubtasks,\n    onTaskModalOpen,\n    onTaskModalClose\n}) => {\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n    const [loadingAI, setLoadingAI] = useState(false); // Track AI loading state\n\n    const quadrants: Record<QuadrantType, string> = {\n        do: 'Do (Urgent & Important)',\n        decide: 'Decide (Not Urgent & Important)',\n        delegate: 'Delegate (Urgent & Not Important)',\n        delete: 'Delete (Not Urgent & Not Important)',\n        unsorted: 'Unsorted Tasks',\n    };\n\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);\n    };\n\n    const handleBreakdownTaskWithAI = async (quadrant: QuadrantType, taskId: number, taskText: string) => {\n        setLoadingAI(true);\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/mistralai/Mistral-Small-Instruct-2409\", {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${process.env.NEXT_PUBLIC_HUGGINGFACE_API_KEY}`, // Securely handle your API key\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    inputs: `Break down this task into smaller tasks: ${taskText}`\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`AI request failed with status ${response.status}`);\n            }\n\n            const data = await response.json();\n            if (data && data[0] && data[0].generated_text) {\n                const newSubtasks = data[0].generated_text\n                    .split(\"\\n\")\n                    .filter((line: string) => line.trim() !== \"\")\n                    .map((text: string, idx: number) => ({\n                        id: Date.now() + idx, // Ensure unique IDs\n                        text: text.trim(),\n                        completed: false\n                    }));\n\n                // Assuming you have access to setTasks or a similar state updater here\n                // You might need to pass down a prop or use context/state management\n                // For example:\n                // setTasks((prevTasks) => ({\n                //     ...prevTasks,\n                //     [quadrant]: prevTasks[quadrant].map((t) =>\n                //         t.id === taskId ? { ...t, subtasks: t.subtasks.concat(newSubtasks) } : t\n                //     )\n                // }));\n                // setExpandedTaskIds((prev) => [...prev, taskId]);\n\n                // Since setTasks and setExpandedTaskIds are managed in the parent, you can trigger them via props\n            }\n        } catch (error) {\n            console.error(\"AI breakdown error:\", error);\n        } finally {\n            setLoadingAI(false);\n        }\n    };\n\n    return (\n        <Draggable key={task.id} draggableId={task.id.toString()} index={index}>\n            {(provided, snapshot) => (\n                <li\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    data-task-id={task.id}\n                    data-quadrant={quadrant}\n                    className={`flex flex-col items-start justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-700' : 'hover:bg-default-100'}`}\n                >\n                    <div className=\"flex items-start justify-between w-full\">\n                        <div className=\"flex items-start flex-grow\">\n                            <div className=\"flex items-center m-auto flex-grow\">\n                                <span {...provided.dragHandleProps} className=\"mr-2 cursor-move\">\n                                    <GripVertical size={16} />\n                                </span>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={task.completed}\n                                    onChange={() => toggleTaskCompletion(quadrant, task.id)}\n                                    className=\"mr-2\"\n                                    title=\"Toggle task completion\"\n                                />\n                            </div>\n                            <span\n                                id={`task-text-${task.id}`}\n                                style={{ overflowWrap: 'anywhere' }}\n                                className={`w-full text-lg ${task.completed ? 'line-through' : ''} ${task.archived ? 'opacity-50 italic' : 'opacity-100'}`}\n                            >\n                                {task.text}\n                            </span>\n                        </div>\n\n                        <div className=\"flex items-center\">\n                            {task.subtasks.length > 0 && (\n                                <span className=\"text-xs text-default-500 ml-2\">\n                                    {task.subtasks.filter(sub => sub.completed).length}/{task.subtasks.length}\n                                </span>\n                            )}\n                            <ButtonGroup>\n                                <Button\n                                    style={{ minWidth: 'auto' }}\n                                    size=\"sm\"\n                                    variant=\"light\"\n                                    onClick={() => toggleTaskExpansion(task.id)}\n                                >\n                                    {expandedTaskIds.includes(task.id) ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\n                                </Button>\n                                <Dropdown\n                                    shouldBlockScroll={false}\n                                    isOpen={openDropdownId === task.id}\n                                    onOpenChange={(open) => handleOpenChange(task.id, open)}\n                                >\n                                    <DropdownTrigger>\n                                        <Button style={{ minWidth: 'auto' }} size=\"sm\" variant=\"light\">\n                                            <MoreVertical size={16} className=\"h-4 w-4\" />\n                                        </Button>\n                                    </DropdownTrigger>\n                                    <DropdownMenu closeOnSelect={true} disabledKeys={[\"archivepremium\"]}>\n                                        <DropdownItem onClick={() => {\n                                            setTaskToEdit(task, quadrant);\n                                            onTaskModalOpen();\n                                        }}>\n                                            Edit Task\n                                        </DropdownItem>\n                                        <DropdownSection title=\"AI Tools\">\n                                            <DropdownItem\n                                                onClick={() => {\n                                                    if (loadingAI) return;\n                                                    handleBreakdownTaskWithAI(quadrant, task.id, task.text);\n                                                }}\n                                            >\n                                                {loadingAI ? (\n                                                    <Spinner size=\"sm\" style={{ marginRight: '8px' }} />\n                                                ) : (\n                                                    <>Breakdown with AI</>\n                                                )}\n                                            </DropdownItem>\n                                        </DropdownSection>\n                                        <DropdownSection title=\"Move\">\n                                            {Object.keys(quadrants)\n                                                .filter((q) => q !== quadrant)\n                                                .map((targetQuadrant) => (\n                                                    <DropdownItem\n                                                        key={targetQuadrant}\n                                                        onClick={() => moveTaskToQuadrant(quadrant, task.id, targetQuadrant as QuadrantType)}\n                                                    >\n                                                        Move to {quadrants[targetQuadrant as QuadrantType]}\n                                                    </DropdownItem>\n                                                ))}\n                                        </DropdownSection>\n                                        <DropdownSection title=\"Archive\">\n                                            <DropdownItem onClick={() => archiveTask()}>Archive Task</DropdownItem>\n                                        </DropdownSection>\n                                        <DropdownSection title=\"Danger zone\">\n                                            <DropdownItem onClick={() => deleteTask(quadrant, task.id)} className=\"text-red-500\">\n                                                Delete Task\n                                            </DropdownItem>\n                                        </DropdownSection>\n                                    </DropdownMenu>\n                                </Dropdown>\n                            </ButtonGroup>\n                        </div>\n                    </div>\n                    {expandedTaskIds.includes(task.id) && renderSubtasks(task)}\n                </li>\n            )}\n        </Draggable>\n    )\n};\n\nexport default TaskItem;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 718, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/customtypes.tsx"],"sourcesContent":["// customtypes.ts\n\nexport type QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\nexport interface SubTask {\n    id: number;\n    text: string;\n    completed: boolean;\n}\n\nexport interface Task {\n    user_id: any;\n    id: number;\n    text: string;\n    completed: boolean;\n    archived: boolean;\n    subtasks: SubTask[];\n    quadrant: QuadrantType;\n}\n\nexport interface TaskEditInfo {\n    task: Task;\n    quadrant: QuadrantType;\n}\n\nexport interface SubtaskEditInfo {\n    subtask: SubTask;\n    taskId: number;\n    quadrant: QuadrantType;\n}\n\n/// Define the structure of a task as stored in Supabase\nexport interface SupabaseTask {\n    id: string; // Assuming UUIDs are used, which are strings in Supabase\n    text: string;\n    completed: boolean;\n    archived: boolean;\n    quadrant: QuadrantType;\n    user_id: string; // This should be string if you're storing a reference to the user's ID (likely a UUID or similar)\n}\n\n// Define the structure for inserting a new task (without the ID)\nexport type InsertTask = Omit<SupabaseTask, 'id'>;\n"],"names":[],"mappings":"AAAA,iBAAiB"}},
    {"offset": {"line": 721, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 726, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/EisenhowerMatrix.tsx"],"sourcesContent":["// EisenhowerMatrix.tsx\n\n\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup } from '@nextui-org/button';\nimport { Input } from '@nextui-org/input';\nimport { Card, CardHeader } from '@nextui-org/card';\nimport { GripVertical, Plus, MoreVertical, ChevronDown, ChevronUp } from 'lucide-react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { Dropdown, DropdownTrigger, DropdownSection, DropdownMenu, DropdownItem, Link, Spinner, Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, useDisclosure } from \"@nextui-org/react\";\nimport { useTheme } from \"next-themes\";\nimport FloatingButton from './floatingbutton';\n\nimport { useUser } from '@auth0/nextjs-auth0/client'\n\nimport { createClient, SupabaseClient, PostgrestError } from '@supabase/supabase-js'\nimport SubtaskItem from './subtaskitem';\nimport TaskItem from './taskitem';\nimport { SupabaseTask, Task, QuadrantType, TaskEditInfo, SubtaskEditInfo, InsertTask } from '../customtypes';\n\n\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);\n\n// Define Quadrants\nconst quadrants: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\nconst EisenhowerMatrix: React.FC = () => {\n    const { user } = useUser();\n    const { isOpen: isTaskModalOpen, onOpen: onTaskModalOpen, onClose: onTaskModalClose } = useDisclosure();\n    const { isOpen: isSubtaskModalOpen, onOpen: onSubtaskModalOpen, onClose: onSubtaskModalClose } = useDisclosure();\n    const { isOpen: isAddTaskModalOpen, onOpen: onAddTaskModalOpen, onClose: onAddTaskModalClose } = useDisclosure();\n\n    const { theme } = useTheme();\n\n    const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [archivedTasks, setArchivedTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [isArchiveMode, setIsArchiveMode] = useState(false);\n    const [newTask, setNewTask] = useState('');\n    const [newSubtask, setNewSubtask] = useState('');\n    const [selectedQuadrantForAdd, setSelectedQuadrantForAdd] = useState<QuadrantType | null>(null);\n    const [taskToEdit, setTaskToEditState] = useState<TaskEditInfo | null>(null);\n    const [subtaskToEdit, setSubtaskToEdit] = useState<SubtaskEditInfo | null>(null);\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n    const [expandedTaskIds, setExpandedTaskIds] = useState<number[]>([]);\n    const [loadingAI, setLoadingAI] = useState(false); // Track AI loading state\n\n    // Wrapper function to set task to edit\n    const setTaskToEdit = (task: Task, quadrant: QuadrantType) => {\n        setTaskToEditState({ task, quadrant });\n    };\n\n    // Handle Key Down Events for Accessibility\n    const handleKeyDown = (e: React.KeyboardEvent, task: Task, quadrant: QuadrantType) => {\n        switch (e.key) {\n            case 'e':\n                setTaskToEdit(task, quadrant);\n                onTaskModalOpen();\n                break;\n            case 'Delete':\n            case 'Backspace':\n                deleteTask(quadrant, task.id);\n                break;\n            default:\n                break;\n        }\n        setOpenDropdownId(null);  // Close dropdown manually after any action\n    };\n\n    // Handle Subtask Input Change\n    const handleSubtaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (subtaskToEdit) {\n            setSubtaskToEdit({\n                ...subtaskToEdit,\n                subtask: { ...subtaskToEdit.subtask, text: e.target.value }\n            });\n        }\n    };\n\n    // Handle Task Input Change\n    const handleTaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (taskToEdit) {\n            setTaskToEditState(prev => ({\n                ...prev!,\n                task: { ...prev!.task, text: e.target.value },\n            }));\n        }\n    };\n\n   // Fetch and Merge Tasks from Supabase and LocalStorage\nuseEffect(() => {\n    const fetchAndMergeTasks = async () => {\n        if (user) {\n            try {\n                // Fetch tasks from Supabase\n                const { data: supabaseTasks, error } = await supabase\n                    .from<SupabaseTask>('tasks')  // 'tasks' is the string (table name), and <SupabaseTask> is the type.\n                    .select('*')\n                    .eq('user_id', user.sub);\n\n                if (error) {\n                    console.error('Error fetching tasks from Supabase:', error);\n                    return;  // Early return if there's an error\n                }\n\n                // Parse tasks from localStorage\n                const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n                const localTasks: Record<QuadrantType, Task[]> = storedTasks\n                    ? JSON.parse(storedTasks)\n                    : {\n                          do: [],\n                          decide: [],\n                          delegate: [],\n                          delete: [],\n                          unsorted: [],\n                      };\n\n                // Initialize convertedSupabaseTasks\n                const convertedSupabaseTasks: Record<QuadrantType, Task[]> = {\n                    do: [],\n                    decide: [],\n                    delegate: [],\n                    delete: [],\n                    unsorted: [],\n                };\n\n                // Convert SupabaseTask to Task\n                if (supabaseTasks) {\n                    supabaseTasks.forEach((supTask) => {\n                        const task: Task = {\n                            id: supTask.id,\n                            text: supTask.text,\n                            completed: supTask.completed,\n                            archived: supTask.archived,\n                            quadrant: supTask.quadrant as QuadrantType,  // Cast to QuadrantType\n                            subtasks: [],\n                            user_id: undefined,\n                        };\n                        convertedSupabaseTasks[supTask.quadrant as QuadrantType].push(task);\n                    });\n                }\n\n                // Merge Supabase tasks and local tasks, avoiding duplicates\n                const mergedTasks: Record<QuadrantType, Task[]> = { ...convertedSupabaseTasks };\n\n                for (const [quadrantKey, localTasksList] of Object.entries(localTasks)) {\n                    const quadrant = quadrantKey as QuadrantType;\n\n                    localTasksList.forEach(async (localTask) => {\n                        const exists = mergedTasks[quadrant].some(\n                            (supTask) => supTask.id === localTask.id && supTask.text === localTask.text\n                        );\n\n                        if (!exists) {\n                            mergedTasks[quadrant].push(localTask);\n\n                            // Sync local task to Supabase\n                            try {\n                                const { error: syncError } = await supabase\n                                    .from('tasks')\n                                    .insert({\n                                        text: localTask.text,\n                                        completed: localTask.completed,\n                                        archived: localTask.archived,\n                                        quadrant: localTask.quadrant,\n                                        user_id: user.sub,\n                                    });\n\n                                if (syncError) {\n                                    console.error('Error syncing local task to Supabase:', syncError);\n                                } else {\n                                    console.log('Local task synced to Supabase');\n                                }\n                            } catch (syncErr) {\n                                console.error('Error during Supabase sync:', syncErr);\n                            }\n                        }\n                    });\n                }\n\n                setTasks(mergedTasks);\n\n                // Optionally, clear localStorage after syncing\n                window.localStorage.removeItem('eisenhowerMatrixTasks');\n            } catch (err) {\n                console.error('Error fetching and merging tasks:', err);\n            }\n        } else {\n            // Load tasks from localStorage if user is not logged in\n            const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n            if (storedTasks) {\n                setTasks(JSON.parse(storedTasks));\n            }\n        }\n    };\n\n    fetchAndMergeTasks();\n}, [user, supabase]);\n\n\n    // Update localStorage whenever tasks change (only when not logged in)\n    useEffect(() => {\n        if (!user) {\n            window.localStorage.setItem('eisenhowerMatrixTasks', JSON.stringify(tasks));\n        }\n    }, [tasks, user]);\n\n    // Function to toggle dropdown based on task ID\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);\n    };\n\n    // Add Subtask\n    const addSubtask = (quadrant: QuadrantType, taskId: number) => {\n        if (newSubtask.trim()) {\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((task) =>\n                    task.id === taskId\n                        ? {\n                            ...task,\n                            subtasks: [\n                                ...task.subtasks,\n                                { id: Date.now(), text: newSubtask.trim(), completed: false },\n                            ],\n                        }\n                        : task\n                ),\n            }));\n            setNewSubtask('');\n        }\n    };\n\n    // Toggle Subtask Completion\n    const toggleSubtaskCompletion = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId\n                    ? {\n                        ...task,\n                        subtasks: task.subtasks.map((subtask) =>\n                            subtask.id === subtaskId\n                                ? { ...subtask, completed: !subtask.completed }\n                                : subtask\n                        ),\n                    }\n                    : task\n            ),\n        }));\n    };\n\n    // Toggle Task Completion\n    const toggleTaskCompletion = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId ? { ...task, completed: !task.completed } : task\n            ),\n        }));\n    };\n\n    // Delete Task\n    const deleteTask = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n        }));\n    };\n\n    // Archive Task\n    const archiveTask = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prevTasks) => ({\n            ...prevTasks,\n            [quadrant]: prevTasks[quadrant].map((task) =>\n                task.id === taskId ? { ...task, archived: true } : task\n            ),\n        }));\n    };\n\n    // Delete Subtask\n    const deleteSubtask = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId\n                    ? {\n                        ...task,\n                        subtasks: task.subtasks.filter((subtask) => subtask.id !== subtaskId),\n                    }\n                    : task\n            ),\n        }));\n    };\n\n    // Save Edited Task\n    const saveEditedTask = () => {\n        if (taskToEdit) {\n            const { quadrant, task } = taskToEdit;\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((t) =>\n                    t.id === task.id ? { ...t, text: task.text } : t\n                ),\n            }));\n            setTaskToEditState(null);\n            onTaskModalClose();\n        }\n    };\n\n    // Save Edited Subtask\n    const saveEditedSubtask: () => void = () => {\n        if (subtaskToEdit) {\n            const { quadrant, taskId, subtask } = subtaskToEdit;\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((task) =>\n                    task.id === taskId\n                        ? {\n                            ...task,\n                            subtasks: task.subtasks.map((st) =>\n                                st.id === subtask.id ? { ...st, text: subtask.text } : st\n                            ),\n                        }\n                        : task\n                ),\n            }));\n            setSubtaskToEdit(null);\n            onSubtaskModalClose();  // Close the modal after saving\n        }\n    };\n\n    // Toggle Task Expansion\n    const toggleTaskExpansion = (taskId: number) => {\n        setExpandedTaskIds((currentIds) => {\n            if (currentIds.includes(taskId)) {\n                return currentIds.filter(id => id !== taskId);\n            } else {\n                return [...currentIds, taskId];\n            }\n        });\n    };\n\n    // Drag and Drop Handler\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // If there's no destination (i.e., task was dropped outside a valid area), do nothing\n        if (!destination) return;\n\n        const sourceQuadrant = source.droppableId as QuadrantType;\n        const destinationQuadrant = destination.droppableId as QuadrantType;\n\n        // Get source task\n        const sourceTask = tasks[sourceQuadrant][source.index];\n\n        // If dragging within the same quadrant\n        if (sourceQuadrant === destinationQuadrant) {\n            const reorderedTasks = Array.from(tasks[sourceQuadrant]);\n            const [movedTask] = reorderedTasks.splice(source.index, 1);\n            reorderedTasks.splice(destination.index, 0, movedTask);\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: reorderedTasks,\n            }));\n        } else {\n            // Moving to a different quadrant\n            const sourceTasks = Array.from(tasks[sourceQuadrant]);\n            const [movedTask] = sourceTasks.splice(source.index, 1);\n            const destinationTasks = Array.from(tasks[destinationQuadrant]);\n            destinationTasks.splice(destination.index, 0, movedTask);\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: sourceTasks,\n                [destinationQuadrant]: destinationTasks,\n            }));\n        }\n    };\n\n    // Render Archived Tasks\n    const renderArchivedTasks = (quadrant: QuadrantType) => (\n        <ul className=\"mt-4\">\n            {archivedTasks[quadrant].length > 0 ? (\n                archivedTasks[quadrant].map((task) => (\n                    <li key={task.id} className=\"flex items-center justify-between mb-2\">\n                        <span className=\"line-through\">{task.text}</span>\n                        <Button\n                            size=\"sm\"\n                            variant=\"light\"\n                            onClick={() => unarchiveTask(quadrant, task.id)}\n                        >\n                            Unarchive\n                        </Button>\n                    </li>\n                ))\n            ) : (\n                <p>No archived tasks</p>\n            )}\n        </ul>\n    );\n\n    // Unarchive Task\n    const unarchiveTask = (quadrant: QuadrantType, taskId: number) => {\n        setArchivedTasks((prevArchived) => {\n            const updatedArchived = { ...prevArchived };\n            const taskToUnarchive = updatedArchived[quadrant].find((task) => task.id === taskId);\n            if (taskToUnarchive) {\n                setTasks((prevTasks) => ({\n                    ...prevTasks,\n                    [quadrant]: [...prevTasks[quadrant], taskToUnarchive],\n                }));\n                updatedArchived[quadrant] = updatedArchived[quadrant].filter((task) => task.id !== taskId);\n            }\n            return updatedArchived;\n        });\n    };\n\n    // Toggle Archive Mode\n    const showArchivedTasks = () => {\n        setIsArchiveMode(!isArchiveMode);\n    };\n\n    // Render Subtasks\n    const renderSubtasks = (quadrant: QuadrantType, task: Task) => (\n        <Droppable droppableId={`subtasks-${task.id}`} type=\"subtask\">\n            {(provided) => (\n                <ul className=\"pl-6 mt-2 w-full\" ref={provided.innerRef} {...provided.droppableProps}>\n                    {task.subtasks.map((subtask, index) => (\n                        <SubtaskItem\n                            key={subtask.id}\n                            subtask={subtask}\n                            taskId={task.id}\n                            index={index}\n                            quadrant={quadrant}\n                            toggleSubtaskCompletion={() => toggleSubtaskCompletion(quadrant, task.id, subtask.id)}\n                            deleteSubtask={() => deleteSubtask(quadrant, task.id, subtask.id)}\n                            setSubtaskToEdit={() => {\n                                setSubtaskToEdit({ subtask, taskId: task.id, quadrant });\n                                onSubtaskModalOpen();\n                            }}\n                        />\n                    ))}\n                    {provided.placeholder}\n                    <div className=\"mt-2 flex items-center\">\n                        <Input\n                            value={newSubtask}\n                            onChange={(e) => setNewSubtask(e.target.value.slice(0, 100))}\n                            placeholder=\"New subtask\"\n                            onKeyDown={(e) => e.key === 'Enter' && addSubtask(quadrant, task.id)}\n                            maxLength={100}\n                        />\n                        <Button onClick={() => addSubtask(quadrant, task.id)} className=\"ml-2\" style={{ minWidth: 'auto' }}>\n                            <Plus size={16} />\n                        </Button>\n                    </div>\n                </ul>\n            )}\n        </Droppable>\n    );\n\n    // Render Individual Task\n    const renderTask = (quadrant: QuadrantType, task: Task, index: number) => {\n        if (task.archived && !isArchiveMode) {\n            return null; // Skip rendering archived tasks unless archive mode is active\n        }\n\n        return (\n            <TaskItem\n                key={task.id}\n                task={task}\n                quadrant={quadrant}\n                index={index}\n                expandedTaskIds={expandedTaskIds}\n                toggleTaskCompletion={() => toggleTaskCompletion(quadrant, task.id)}\n                toggleTaskExpansion={() => toggleTaskExpansion(task.id)}\n                setTaskToEdit={setTaskToEdit} // Adding the missing prop here\n                deleteTask={() => deleteTask(quadrant, task.id)}\n                archiveTask={() => archiveTask(quadrant, task.id)}\n                moveTaskToQuadrant={addTaskToQuadrant}\n                renderSubtasks={(task: Task) => renderSubtasks(quadrant, task)}\n                onTaskModalOpen={onTaskModalOpen} // Pass this function to TaskItem\n                onTaskModalClose={onTaskModalClose}\n            />\n        );\n    };\n\n    // Render Quadrant\n    const renderQuadrant = (quadrant: QuadrantType) => (\n        <Droppable droppableId={quadrant} key={quadrant}>\n            {(provided, snapshot) => (\n                <Card\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`p-4 mb-4 ${theme === \"dark\" ? (snapshot.isDraggingOver ? 'bg-zinc-700' : 'bg-zinc-900') : (snapshot.isDraggingOver ? 'bg-white' : 'bg-background')}`}\n                >\n                    <CardHeader className=\"flex justify-between items-center\">\n                        <div className=\"text-default-500 text-sm\">{quadrants[quadrant]}</div>\n                        <Button\n                            size=\"sm\"\n                            isIconOnly\n                            variant=\"light\"\n                            onClick={() => {\n                                setSelectedQuadrantForAdd(quadrant);\n                                setIsAddTaskModalOpen(true);\n                            }}\n                        >\n                            <Plus size={16} />\n                        </Button>\n                    </CardHeader>\n                    {(isArchiveMode ? archivedTasks : tasks)[quadrant].length === 0 ? (\n                        <div className=\"flex flex-col items-center justify-center py-10 text-center text-default-500\">\n                            <img src=\"/emptystate.png\" className=\"w-10 h-10 mt-2 mx-auto\" alt=\"No tasks\" />\n                            <p className='mt-2 text-default-400 text-sm'>No tasks added yet</p>\n                        </div>\n                    ) : (\n                        <ul className='text-default-90 text-lg'>\n                            {(isArchiveMode ? archivedTasks : tasks)[quadrant].map((task, index) => renderTask(quadrant, task, index))}\n                        </ul>\n                    )}\n                    {provided.placeholder}\n                </Card>\n            )}\n        </Droppable>\n    );\n\n    // Function to handle task breakdown with AI and update the task with subtasks\n    const handleBreakdownTaskWithAI = async (quadrant: QuadrantType, taskId: number, taskText: string) => {\n        setLoadingAI(true);\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/mistralai/Mistral-Small-Instruct-2409\", {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${process.env.NEXT_PUBLIC_HUGGINGFACE_API_KEY}`, // Store your API key securely\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    inputs: `Break down this task into smaller tasks: ${taskText}`\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`AI request failed with status ${response.status}`);\n            }\n\n            const data = await response.json();\n            if (data && data[0] && data[0].generated_text) {\n                const newSubtasks = data[0].generated_text\n                    .split(\"\\n\")\n                    .filter((line: string) => line.trim() !== \"\")\n                    .map((text: string, idx: number) => ({\n                        id: Date.now() + idx, // Ensure unique IDs\n                        text: text.trim(),\n                        completed: false\n                    }));\n\n                setTasks((prevTasks) => ({\n                    ...prevTasks,\n                    [quadrant]: prevTasks[quadrant].map((t) =>\n                        t.id === taskId ? { ...t, subtasks: t.subtasks.concat(newSubtasks) } : t\n                    )\n                }));\n                setExpandedTaskIds((prev) => [...prev, taskId]); // Ensure the task is expanded to show new subtasks\n            }\n        } catch (error) {\n            console.error(\"AI breakdown error:\", error);\n        } finally {\n            setLoadingAI(false);\n        }\n    };\n\n    // Add Task to Quadrant\n    const addTaskToQuadrant = async () => {\n        if (newTask.trim() && selectedQuadrantForAdd) {\n            // Define the new task object\n            const newTaskObject: InsertTask = {\n                text: newTask.trim(),\n                completed: false,\n                archived: false,\n                quadrant: selectedQuadrantForAdd,\n                user_id: user?.sub || 'anonymous', // Ensure user_id is handled correctly\n            };\n    \n            if (user) {\n                try {\n                    // Insert the new task into Supabase, wrapped in an array\n                    const { data, error }: { data: SupabaseTask[] | null; error: PostgrestError | null } = await supabase\n                        .from<SupabaseTask>('tasks')  // Specify the type for the table\n                        .insert([newTaskObject])      // Wrap `newTaskObject` in an array\n                        .select();                    // Ensure the inserted row is returned\n    \n                    if (error) {\n                        console.error('Error adding task to Supabase:', error);\n                    } else if (data && data.length > 0) {\n                        console.log(`Task added successfully to Supabase by ${user.name}:`, data);\n    \n                        // Update the state only after the task is successfully added to the DB\n                        setTasks((prev) => ({\n                            ...prev,\n                            [selectedQuadrantForAdd]: [\n                                ...prev[selectedQuadrantForAdd],\n                                { ...newTaskObject, id: data[0].id }, // Correctly assign 'id' from Supabase\n                            ],\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error inserting task into Supabase:', err);\n                }\n            } else {\n                // User is not logged in\n                const localId = Date.now(); // Use a unique local ID as a number\n                const localTask: Task = { ...newTaskObject, id: localId, subtasks: [] }; // Initialize subtasks if necessary\n    \n                setTasks((prev) => ({\n                    ...prev,\n                    [selectedQuadrantForAdd]: [...prev[selectedQuadrantForAdd], localTask],\n                }));\n            }\n    \n            // Clear the input and close the modal\n            setNewTask('');\n            setIsAddTaskModalOpen(false);\n        }\n    };\n    \n\n    function setIsAddTaskModalOpen(arg0: boolean) {\n        throw new Error('Function not implemented.');\n    }\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"text-center p-4\">\n                {\n                    // Check if user is logged in\n                    user ? (\n                        // If user is premium, show h1 and p\n                        user.premium ? (\n                            <>\n                                <h1 className=\"tracking-tight inline font-semibold text-base mb-4 leading-9\">\n                                    {(() => {\n                                        const hour = new Date().getHours();\n                                        if (hour >= 5 && hour < 12) {\n                                            return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                        } else if (hour >= 12 && hour < 17) {\n                                            return `Good afternoon, ${user.name}. Ready to power through?`;\n                                        } else if (hour >= 17 && hour < 22) {\n                                            return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                        } else {\n                                            return `Let's get some late-night magic going, ${user.name}!`;\n                                        }\n                                    })()}\n                                </h1>\n                                {/* Display sync message only for premium users */}\n                                <p className='text-default-500 text-sm'>\n                                    Sync across all devices with this account and unlock more features with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>\n                                </p>\n                            </>\n                        ) : (\n                            // If user is not premium, show only h1\n                            <h1 className=\"tracking-tight inline font-semibold text-base mb-4 leading-9\">\n                                {(() => {\n                                    const hour = new Date().getHours();\n                                    if (hour >= 5 && hour < 12) {\n                                        return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                    } else if (hour >= 12 && hour < 17) {\n                                        return `Good afternoon, ${user.name}. Ready to power through?`;\n                                    } else if (hour >= 17 && hour < 22) {\n                                        return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                    } else {\n                                        return `Let's get some late-night magic going, ${user.name}!`;\n                                    }\n                                })()}\n                            </h1>\n                        )\n                    ) : (\n                        <>\n                            {/* If user is not logged in, show this default h1 and p */}\n                            <h1 className=\"tracking-tight inline font-semibold leading-0 md:leading-9\">\n                                Prioritize your tasks with the Eisenhower Matrix, and break them down\n                            </h1>\n                            <div className='mb-8 md:mb-0'>\n                                <p className='text-default-500 text-sm mb-8'>\n                                    No account needed, free forever (more features included with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>)\n                                </p>\n                            </div>\n                        </>\n                    )\n                }\n\n                {/* Add Task Modal */}\n                <Modal isOpen={isAddTaskModalOpen} onClose={() => setIsAddTaskModalOpen(false)}>\n                    <ModalContent>\n                        <ModalHeader>\n                            Add Task to {selectedQuadrantForAdd ? quadrants[selectedQuadrantForAdd] : ''}\n                        </ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={newTask}\n                                onChange={(e) => setNewTask(e.target.value.slice(0, 100))}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        addTaskToQuadrant();\n                                    } else if (e.key === 'Escape') {\n                                        setIsAddTaskModalOpen(false);\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new task name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={() => {\n                                addTaskToQuadrant();\n                            }}>Add Task</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                {/* Edit Task Modal */}\n                <Modal isOpen={isTaskModalOpen} onClose={onTaskModalClose}>\n                    <ModalContent>\n                        <ModalHeader>Edit Task</ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={taskToEdit?.task.text || ''}\n                                onChange={handleTaskInputChange}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        saveEditedTask();\n                                    } else if (e.key === 'Escape') {\n                                        onTaskModalClose();\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new task name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={() => saveEditedTask()}>Save</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                {/* Edit Subtask Modal */}\n                <Modal isOpen={isSubtaskModalOpen} onClose={onSubtaskModalClose}>\n                    <ModalContent>\n                        <ModalHeader>Edit Subtask</ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={subtaskToEdit?.subtask.text || ''}\n                                onChange={handleSubtaskInputChange}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        saveEditedSubtask();\n                                    } else if (e.key === 'Escape') {\n                                        onSubtaskModalClose();\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new subtask name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={saveEditedSubtask}>Save</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                <FloatingButton\n                    tasks={tasks}\n                    showArchivedTasks={showArchivedTasks}\n                    isArchiveMode={isArchiveMode}\n                />\n            </div>\n\n            {loadingAI && (\n                <div className=\"z-10 fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <Spinner size=\"lg\" />\n                </div>\n            )}\n            <div className=\"flex-grow overflow-auto sm:p-0 lg:p-4\">\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {(['do', 'decide', 'delegate', 'delete', 'unsorted'] as QuadrantType[]).map(renderQuadrant)}\n                    </div>\n                </DragDropContext>\n            </div>\n        </div>\n    )\n};\n\nexport default EisenhowerMatrix;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1829, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}