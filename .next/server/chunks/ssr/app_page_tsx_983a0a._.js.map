{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '@nextui-org/button';\nimport { Dropdown, DropdownTrigger, DropdownMenu, DropdownItem } from \"@nextui-org/react\";\nimport { Input } from '@nextui-org/input';\nimport { Card, CardHeader } from '@nextui-org/card';\nimport { Trash2, GripVertical, MoreVertical } from 'lucide-react';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\ntype Task = {\n  id: number;\n  text: string;\n  completed: boolean;\n};\n\n\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\nconst quadrants: Record<QuadrantType, string> = {\n  do: 'Do (Urgent & Important)',\n  decide: 'Decide (Not Urgent & Important)',\n  delegate: 'Delegate (Urgent & Not Important)',\n  delete: 'Delete (Not Urgent & Not Important)',\n  unsorted: 'Unsorted Tasks',\n};\n\nconst SNLMatrix: React.FC = () => {\n  const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>({\n    do: [],\n    decide: [],\n    delegate: [],\n    delete: [],\n    unsorted: [],\n  });\n  const [newTask, setNewTask] = useState('');\n  const [selectedQuadrant, setSelectedQuadrant] = useState<QuadrantType>('unsorted');\n  const [kanbanView, setKanbanView] = useState(false);\n\n  const addTask = () => {\n    if (newTask.trim()) {\n      setTasks((prev) => ({\n        ...prev,\n        [selectedQuadrant]: [\n          ...prev[selectedQuadrant],\n          { id: Date.now(), text: newTask.trim(), completed: false },\n        ],\n      }));\n      setNewTask('');\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      addTask();\n    }\n  };\n\n  const toggleTask = (quadrant: QuadrantType, taskId: number) => {\n    setTasks((prev) => ({\n      ...prev,\n      [quadrant]: prev[quadrant].map((task) =>\n        task.id === taskId ? { ...task, completed: !task.completed } : task\n      ),\n    }));\n  };\n\n  const deleteTask = (quadrant: QuadrantType, taskId: number) => {\n    setTasks((prev) => ({\n      ...prev,\n      [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n    }));\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    const sourceQuadrant = source.droppableId as QuadrantType;\n    const destinationQuadrant = destination.droppableId as QuadrantType;\n\n    const newTasks = { ...tasks };\n    const [movedTask] = newTasks[sourceQuadrant].splice(source.index, 1);\n    newTasks[destinationQuadrant].splice(destination.index, 0, movedTask);\n\n    setTasks(newTasks);\n  };\n\n  const moveTaskToQuadrant = (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => {\n    const sourceTasks = Array.from(tasks[sourceQuadrant]);\n    const taskIndex = sourceTasks.findIndex(task => task.id === taskId);\n    if (taskIndex === -1) return;\n\n    const [task] = sourceTasks.splice(taskIndex, 1);\n    const updatedTargetTasks = [...tasks[targetQuadrant], task];\n\n    setTasks((prev) => ({\n      ...prev,\n      [sourceQuadrant]: sourceTasks,\n      [targetQuadrant]: updatedTargetTasks,\n    }));\n  };\n\n  const renderTask = (quadrant: QuadrantType, task: Task, index: number) => (\n    <Draggable key={task.id} draggableId={task.id.toString()} index={index}>\n      {(provided, snapshot) => (\n        <li\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          className={`flex items-center justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-blue-100' : 'hsl(0, 0%, 90%)'\n            }`}\n        >\n          <div className=\"flex items-center flex-grow\">\n            <span {...provided.dragHandleProps} className=\"mr-2 cursor-move\">\n              <GripVertical size={16} />\n            </span>\n            <input\n              type=\"checkbox\"\n              checked={task.completed}\n              onChange={() => toggleTask(quadrant, task.id)}\n              className=\"mr-2\"\n            />\n            <span\n              className={`cursor-pointer ${task.completed ? 'line-through' : ''}`}\n              onClick={() => toggleTask(quadrant, task.id)}\n            >\n              {task.text}\n            </span>\n          </div>\n          <div className=\"flex items-center\">\n            <Dropdown>\n              <DropdownTrigger>\n                <Button size=\"sm\" variant=\"light\">\n                  <MoreVertical size={16} />\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu>\n                {Object.keys(quadrants)\n                  .filter((q) => q !== quadrant)\n                  .map((targetQuadrant) => (\n                    <DropdownItem\n                      key={targetQuadrant}\n                      onClick={() =>\n                        moveTaskToQuadrant(quadrant, task.id, targetQuadrant as QuadrantType)\n                      }\n                    >\n                      Move to {quadrants[targetQuadrant as QuadrantType]}\n                    </DropdownItem>\n                  ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Button\n              size=\"sm\"\n              variant=\"light\"\n              onClick={() => deleteTask(quadrant, task.id)}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </li>\n      )}\n    </Draggable>\n  );\n\n  const renderQuadrant = (quadrant: QuadrantType) => (\n    <Droppable droppableId={quadrant} key={quadrant}>\n      {(provided, snapshot) => (\n        <Card\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          className={`p-4 ${snapshot.isDraggingOver ? 'bg-gray-100' : ''} ${kanbanView ? 'min-w-[250px]' : ''\n            }`}\n        >\n          <CardHeader>\n            <div>{quadrants[quadrant]}</div>\n          </CardHeader>\n          <div className=\"flex flex-col items-center justify-center\">\n            {tasks[quadrant].length > 0 ? (\n              <ul className=\"w-full\">\n                {tasks[quadrant].map((task, index) => renderTask(quadrant, task, index))}\n              </ul>\n            ) : (\n              <div className=\"text-center text-gray-500\">No tasks added yet</div>\n            )}\n            {provided.placeholder}\n          </div>\n        </Card>\n      )}\n    </Droppable>\n  );\n\n   // Load tasks from local storage on component mount\nuseEffect(() => {\n  const storedTasks = localStorage.getItem('tasks');\n  if (storedTasks) {\n    setTasks(JSON.parse(storedTasks)); Â  \n\n  }\n}, []);\n\n// Save tasks to local storage on state change\nuseEffect(() => {\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n}, [tasks]);\n\n// Reset button to clear local storage and reset tasks\nconst resetTasks = () => {\n  localStorage.removeItem('tasks');\n  setTasks({\n    do: [],\n    decide: [],\n    delegate: [],\n    delete: [],\n    unsorted: [],\n  });\n};\n\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Eisenhower Matrix Task Management</h1>\n\n      <div className=\"flex justify-end mb-4 gap-2\">\n        <Button onClick={() => setKanbanView(!kanbanView)}>\n          {kanbanView ? 'Matrix View' : 'Kanban View'}\n        </Button>\n        <Button onClick={resetTasks}>\n          Reset All Changes\n        </Button>\n      </div>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        {kanbanView ? (\n          <div className=\"flex overflow-x-auto space-x-4 mb-4\">\n            {(Object.keys(quadrants) as QuadrantType[]).map(renderQuadrant)}\n          </div>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              {(['do', 'decide', 'delegate', 'delete'] as QuadrantType[]).map(renderQuadrant)}\n            </div>\n            {renderQuadrant('unsorted')}\n          </>\n        )}\n      </DragDropContext>\n\n      <div className=\"flex space-x-2 mt-4\">\n        <Input\n          type=\"text\"\n          value={newTask}\n          onChange={(e) => setNewTask(e.target.value)}\n          placeholder=\"Add a new task\"\n          className=\"flex-grow\"\n          onKeyDown={handleKeyDown}\n        />\n        <select\n          value={selectedQuadrant}\n          onChange={(e) => setSelectedQuadrant(e.target.value as QuadrantType)}\n          className=\"border rounded p-2\"\n        >\n          {Object.entries(quadrants).map(([key, value]) => (\n            <option key={key} value={key}>\n              {value}\n            </option>\n          ))}\n        </select>\n        <Button onClick={addTask}>Add Task</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SNLMatrix;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}