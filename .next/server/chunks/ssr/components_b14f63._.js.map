{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 11, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/EisenhowerMatrix.tsx"],"sourcesContent":["// EisenhowerMatrix.tsx\n\n\"use client\";\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Button, ButtonGroup } from '@nextui-org/button';\nimport { Input } from '@nextui-org/input';\nimport { Card, CardHeader } from '@nextui-org/card';\nimport { GripVertical, Plus, MoreVertical, ChevronDown, ChevronUp } from 'lucide-react';\nimport { DragDropContext, Droppable, DropResult } from '@hello-pangea/dnd';\nimport { Chip, Dropdown, DropdownTrigger, DropdownSection, DropdownMenu, DropdownItem, Link, Spinner, Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, useDisclosure } from \"@nextui-org/react\";\nimport { useTheme } from \"next-themes\";\nimport FloatingButton from './floatingbutton';\n\nimport { useUser } from '@auth0/nextjs-auth0/client'\n\nimport { createClient, SupabaseClient, PostgrestError } from '@supabase/supabase-js'\nimport SubtaskItem from './subtaskitem';\nimport TaskItem from './taskitem';\nimport { SupabaseTask, Task, QuadrantType, TaskEditInfo, SubtaskEditInfo, InsertTask } from '../customtypes';\nimport PiPWindow from './floatingwindow';\nimport { Popover, PopoverTrigger, PopoverContent } from \"@nextui-org/react\";\n\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);\n\n// Define Quadrants\nconst quadrants: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\n// Mental model explanations for each quadrant\nconst quadrantExplanations: Record<QuadrantType, string> = {\n    do: \"Require immediate attention and have significant consequences if not completed.\",\n    decide: \"Contribute to your long-term goals but don't require immediate action.\",\n    delegate: \"Need to be done soon but can be handled by someone else.\",\n    delete: \"Do not contribute to your goals and can be removed.\",\n    unsorted: \"Tasks that need to be categorized.\"\n};\nconst EisenhowerMatrix: React.FC = () => {\n    const { user } = useUser();\n    const { isOpen: isTaskModalOpen, onOpen: onTaskModalOpen, onClose: onTaskModalClose } = useDisclosure();\n    const { isOpen: isSubtaskModalOpen, onOpen: onSubtaskModalOpen, onClose: onSubtaskModalClose } = useDisclosure();\n    const { isOpen: isAddTaskModalOpen, onOpen: onAddTaskModalOpen, onClose: onAddTaskModalClose } = useDisclosure();\n\n    const { theme } = useTheme();\n\n\n    const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [archivedTasks, setArchivedTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n\n    const [firstUrgentTask, setFirstUrgentTask] = useState<string | null>(null);\n    const [pipVisible, setPipVisible] = useState(false);\n\n    useEffect(() => {\n        const nonArchivedTasks = tasks.do.filter(task => !task.archived); // Only consider non-archived tasks\n        if (nonArchivedTasks.length > 0) {\n            setFirstUrgentTask(nonArchivedTasks[0].text); // Set the first non-archived task\n            setPipVisible(true); // Show PiP when task exists\n        } else {\n            setFirstUrgentTask(null);\n            setPipVisible(false); // Hide PiP when no task exists\n        }\n    }, [tasks]);\n\n\n    const [isArchiveMode, setIsArchiveMode] = useState(false);\n    const [newTask, setNewTask] = useState('');\n    const [newSubtask, setNewSubtask] = useState('');\n    const [selectedQuadrantForAdd, setSelectedQuadrantForAdd] = useState<QuadrantType | null>(null);\n    const [taskToEdit, setTaskToEditState] = useState<TaskEditInfo | null>(null);\n    const [subtaskToEdit, setSubtaskToEdit] = useState<SubtaskEditInfo | null>(null);\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n    const [expandedTaskIds, setExpandedTaskIds] = useState<number[]>([]);\n    const [loadingAI, setLoadingAI] = useState(false); // Track AI loading state\n    const videoRef = useRef<HTMLVideoElement>(null);\n\n    // Wrapper function to set task to edit\n    const setTaskToEdit = (task: Task, quadrant: QuadrantType) => {\n        setTaskToEditState({ task, quadrant });\n    };\n\n    // Handle Key Down Events for Accessibility\n    const handleKeyDown = (e: React.KeyboardEvent, task: Task, quadrant: QuadrantType) => {\n        switch (e.key) {\n            case 'e':\n                setTaskToEdit(task, quadrant);\n                onTaskModalOpen();\n                break;\n            case 'Delete':\n            case 'Backspace':\n                deleteTask(quadrant, task.id);\n                break;\n            default:\n                break;\n        }\n        setOpenDropdownId(null);  // Close dropdown manually after any action\n    };\n\n    // Handle Subtask Input Change\n    const handleSubtaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (subtaskToEdit) {\n            setSubtaskToEdit({\n                ...subtaskToEdit,\n                subtask: { ...subtaskToEdit.subtask, text: e.target.value }\n            });\n        }\n    };\n\n    // Handle Task Input Change\n    const handleTaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (taskToEdit) {\n            setTaskToEditState(prev => ({\n                ...prev!,\n                task: { ...prev!.task, text: e.target.value },\n            }));\n        }\n    };\n\n    // Fetch and Merge Tasks from Supabase and LocalStorage\n    useEffect(() => {\n        const fetchAndMergeTasks = async () => {\n            if (user) {\n                try {\n                    // Fetch tasks from Supabase\n                    const { data: supabaseTasks, error } = await supabase\n                        .from('tasks')\n                        .select('*')\n                        .eq('user_id', user.sub);\n\n                    if (error) {\n                        console.error('Error fetching tasks from Supabase:', error);\n                        return;\n                    }\n\n                    // Initialize task containers for both active and archived tasks\n                    const activeTasks: Record<QuadrantType, Task[]> = {\n                        do: [],\n                        decide: [],\n                        delegate: [],\n                        delete: [],\n                        unsorted: [],\n                    };\n\n                    const archivedTasksContainer: Record<QuadrantType, Task[]> = {\n                        do: [],\n                        decide: [],\n                        delegate: [],\n                        delete: [],\n                        unsorted: [],\n                    };\n\n                    // Separate tasks into active and archived categories\n                    supabaseTasks.forEach((supTask) => {\n                        const task: Task = {\n                            id: supTask.id,\n                            text: supTask.text,\n                            completed: supTask.completed,\n                            subtasks: supTask.subtasks || [],\n                            archived: supTask.archived,\n                            user_id: supTask.user_id,\n                            quadrant: supTask.quadrant\n                        };\n\n                        if (supTask.archived) {\n                            archivedTasksContainer[supTask.quadrant as QuadrantType].push(task);\n                        } else {\n                            activeTasks[supTask.quadrant as QuadrantType].push(task);\n                        }\n                    });\n\n                    // Set the state for active and archived tasks\n                    setTasks(activeTasks);\n                    setArchivedTasks(archivedTasksContainer);\n                } catch (err) {\n                    console.error('Error fetching and merging tasks:', err);\n                }\n            } else {\n                // Load tasks from localStorage if user is not logged in\n                const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n                if (storedTasks) {\n                    setTasks(JSON.parse(storedTasks));\n                }\n            }\n        };\n\n        fetchAndMergeTasks();\n    }, [user]);\n\n    // Update localStorage whenever tasks change (only when not logged in)\n    useEffect(() => {\n        if (!user) {\n            window.localStorage.setItem('eisenhowerMatrixTasks', JSON.stringify(tasks));\n        }\n    }, [tasks, user]);\n\n    // Function to toggle dropdown based on task ID\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);\n    };\n\n    // Add Subtask\n    const addSubtask = async (quadrant: QuadrantType, taskId: number) => {\n        if (newSubtask.trim()) {\n            const task = tasks[quadrant].find((task) => task.id === taskId);\n            if (task) {\n                const newSubtaskObj = { id: Date.now(), text: newSubtask.trim(), completed: false };\n                const newSubtasks = [...task.subtasks, newSubtaskObj];\n\n                if (user) {\n                    try {\n                        const { error } = await supabase\n                            .from('tasks')\n                            .update({ subtasks: newSubtasks })\n                            .eq('id', taskId);\n\n                        if (error) {\n                            console.error('Error updating subtasks in Supabase:', error);\n                        } else {\n                            // Update local state only after successful DB update\n                            setTasks((prev) => ({\n                                ...prev,\n                                [quadrant]: prev[quadrant].map((t) =>\n                                    t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                                ),\n                            }));\n                        }\n                    } catch (err) {\n                        console.error('Error during Supabase update:', err);\n                    }\n                } else {\n                    // Update local state\n                    setTasks((prev) => ({\n                        ...prev,\n                        [quadrant]: prev[quadrant].map((t) =>\n                            t.id === taskId\n                                ? { ...t, subtasks: newSubtasks }\n                                : t\n                        ),\n                    }));\n                }\n            }\n            setNewSubtask('');\n        }\n    };\n\n    // Toggle Subtask Completion\n    const toggleSubtaskCompletion = async (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        const task = tasks[quadrant].find((task) => task.id === taskId);\n        if (task) {\n            const newSubtasks = task.subtasks.map((subtask) =>\n                subtask.id === subtaskId ? { ...subtask, completed: !subtask.completed } : subtask\n            );\n            if (user) {\n                try {\n                    const { error } = await supabase\n                        .from('tasks')\n                        .update({ subtasks: newSubtasks })\n                        .eq('id', taskId);\n\n                    if (error) {\n                        console.error('Error updating subtasks in Supabase:', error);\n                    } else {\n                        // Update local state\n                        setTasks((prev) => ({\n                            ...prev,\n                            [quadrant]: prev[quadrant].map((t) =>\n                                t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                            ),\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error during Supabase update:', err);\n                }\n            } else {\n                // Update local state\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((t) =>\n                        t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                    ),\n                }));\n            }\n        }\n    };\n\n    // Toggle Task Completion\n    const toggleTaskCompletion = async (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId ? { ...task, completed: !task.completed } : task\n            ),\n        }));\n\n        if (user) {\n            try {\n                const { error } = await supabase\n                    .from('tasks')\n                    .update({ completed: !tasks[quadrant].find((task) => task.id === taskId)?.completed })\n                    .eq('id', taskId);\n\n                if (error) {\n                    console.error('Error toggling task completion in Supabase:', error);\n                }\n            } catch (err) {\n                console.error('Error during Supabase toggle:', err);\n            }\n        }\n    };\n\n    // Delete Task\n    const deleteTask = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n        }));\n    };\n\n    // Archive Task\n    const archiveTask = async (quadrant: QuadrantType, taskId: number) => {\n        if (user) {\n            try {\n                const { error } = await supabase\n                    .from('tasks')\n                    .update({ archived: true })\n                    .eq('id', taskId);\n\n                if (error) {\n                    console.error('Error archiving task in Supabase:', error);\n                } else {\n                    setTasks((prevTasks) => ({\n                        ...prevTasks,\n                        [quadrant]: prevTasks[quadrant].map((task) =>\n                            task.id === taskId ? { ...task, archived: true } : task\n                        ),\n                    }));\n                }\n            } catch (err) {\n                console.error('Error during Supabase archive:', err);\n            }\n        }\n    };\n\n    // Delete Subtask\n    const deleteSubtask = async (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        const task = tasks[quadrant].find((task) => task.id === taskId);\n        if (task) {\n            const newSubtasks = task.subtasks.filter((subtask) => subtask.id !== subtaskId);\n            if (user) {\n                try {\n                    const { error } = await supabase\n                        .from('tasks')\n                        .update({ subtasks: newSubtasks })\n                        .eq('id', taskId);\n\n                    if (error) {\n                        console.error('Error updating subtasks in Supabase:', error);\n                    } else {\n                        // Update local state\n                        setTasks((prev) => ({\n                            ...prev,\n                            [quadrant]: prev[quadrant].map((t) =>\n                                t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                            ),\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error during Supabase update:', err);\n                }\n            } else {\n                // Update local state\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((t) =>\n                        t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                    ),\n                }));\n            }\n        }\n    };\n\n    // Save Edited Task\n    const saveEditedTask = async () => {\n        if (taskToEdit && user) {\n            const { quadrant, task } = taskToEdit;\n\n            try {\n                // Update the task in Supabase\n                const { data, error } = await supabase\n                    .from('tasks')\n                    .update({ text: task.text })\n                    .eq('id', task.id)\n                    .select();\n\n                if (error) {\n                    console.error('Error updating task in Supabase:', error);\n                    return;\n                }\n\n                if (data && data.length > 0) {\n                    // Update local state only after successful DB update\n                    setTasks((prev) => ({\n                        ...prev,\n                        [quadrant]: prev[quadrant].map((t) =>\n                            t.id === task.id ? { ...t, text: task.text } : t\n                        ),\n                    }));\n                    console.log('Task updated successfully in Supabase:', data[0]);\n                }\n            } catch (err) {\n                console.error('Error updating task:', err);\n            }\n\n            // Clear the editing state and close the modal\n            setTaskToEditState(null);\n            onTaskModalClose();\n        } else if (!user) {\n            // If user is not logged in, just update local state\n            if (taskToEdit) {\n                const { quadrant, task } = taskToEdit;\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((t) =>\n                        t.id === task.id ? { ...t, text: task.text } : t\n                    ),\n                }));\n            }\n            setTaskToEditState(null);\n            onTaskModalClose();\n        }\n    };\n\n    // Save Edited Subtask\n    const saveEditedSubtask = async () => {\n        if (subtaskToEdit) {\n            const { quadrant, taskId, subtask } = subtaskToEdit;\n            const task = tasks[quadrant].find((task) => task.id === taskId);\n            if (task) {\n                const newSubtasks = task.subtasks.map((st) =>\n                    st.id === subtask.id ? { ...st, text: subtask.text } : st\n                );\n                if (user) {\n                    try {\n                        const { error } = await supabase\n                            .from('tasks')\n                            .update({ subtasks: newSubtasks })\n                            .eq('id', taskId);\n\n                        if (error) {\n                            console.error('Error updating subtasks in Supabase:', error);\n                        } else {\n                            // Update local state\n                            setTasks((prev) => ({\n                                ...prev,\n                                [quadrant]: prev[quadrant].map((t) =>\n                                    t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                                ),\n                            }));\n                        }\n                    } catch (err) {\n                        console.error('Error during Supabase update:', err);\n                    }\n                } else {\n                    // Update local state\n                    setTasks((prev) => ({\n                        ...prev,\n                        [quadrant]: prev[quadrant].map((t) =>\n                            t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                        ),\n                    }));\n                }\n                setSubtaskToEdit(null);\n                onSubtaskModalClose();  // Close the modal after saving\n            }\n        }\n    };\n\n    // Toggle Task Expansion\n    const toggleTaskExpansion = (taskId: number) => {\n        setExpandedTaskIds((currentIds) => {\n            if (currentIds.includes(taskId)) {\n                return currentIds.filter(id => id !== taskId);\n            } else {\n                return [...currentIds, taskId];\n            }\n        });\n    };\n\n    const moveTaskToQuadrant = (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => {\n        const sourceTasks = [...tasks[sourceQuadrant]];\n        const taskIndex = sourceTasks.findIndex((task) => task.id === taskId);\n\n        if (taskIndex === -1) return;\n\n        const [task] = sourceTasks.splice(taskIndex, 1);\n        const updatedTargetTasks = [...tasks[targetQuadrant], task];\n\n        setTasks((prevTasks) => ({\n            ...prevTasks,\n            [sourceQuadrant]: sourceTasks,\n            [targetQuadrant]: updatedTargetTasks,\n        }));\n    };\n\n    // Drag and Drop Handler\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // If there's no destination (i.e., task was dropped outside a valid area), do nothing\n        if (!destination) return;\n\n        const sourceQuadrant = source.droppableId as QuadrantType;\n        const destinationQuadrant = destination.droppableId as QuadrantType;\n\n        // Get source task\n        const sourceTask = sourceQuadrant in tasks && source.index in tasks[sourceQuadrant] ? tasks[sourceQuadrant][source.index] : null;\n\n        // If dragging within the same quadrant\n        if (sourceQuadrant === destinationQuadrant) {\n            const reorderedTasks = sourceQuadrant in tasks ? Array.from(tasks[sourceQuadrant]) : [];\n            const [movedTask] = source.index in reorderedTasks ? reorderedTasks.splice(source.index, 1) : [];\n            reorderedTasks.splice(destination.index, 0, movedTask);\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: reorderedTasks,\n            }));\n        } else {\n            // Moving to a different quadrant\n            const sourceTasks = Array.from(tasks[sourceQuadrant]);\n            const [movedTask] = sourceTasks.splice(source.index, 1);\n            const destinationTasks = Array.from(tasks[destinationQuadrant]);\n            destinationTasks.splice(destination.index, 0, movedTask);\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: sourceTasks,\n                [destinationQuadrant]: destinationTasks,\n            }));\n        }\n    };\n\n    // Render Archived Tasks\n    const renderArchivedTasks = (quadrant: QuadrantType) => (\n        <ul className=\"mt-4\">\n            {archivedTasks[quadrant].length > 0 ? (\n                archivedTasks[quadrant].map((task) => (\n                    <li key={task.id} className=\"flex items-center justify-between mb-2\">\n                        <span className=\"line-through\">{task.text}</span>\n                        <Button\n                            size=\"sm\"\n                            variant=\"light\"\n                            onClick={() => unarchiveTask(quadrant, task.id)}\n                        >\n                            Unarchive\n                        </Button>\n                    </li>\n                ))\n            ) : (\n                <p>No archived tasks</p>\n            )}\n        </ul>\n    );\n\n    // Unarchive Task\n    const unarchiveTask = (quadrant: QuadrantType, taskId: number) => {\n        setArchivedTasks((prevArchived) => {\n            const updatedArchived = { ...prevArchived };\n            const taskToUnarchive = updatedArchived[quadrant].find((task) => task.id === taskId);\n            if (taskToUnarchive) {\n                setTasks((prevTasks) => ({\n                    ...prevTasks,\n                    [quadrant]: [...prevTasks[quadrant], taskToUnarchive],\n                }));\n                updatedArchived[quadrant] = updatedArchived[quadrant].filter((task) => task.id !== taskId);\n            }\n            return updatedArchived;\n        });\n    };\n\n    // Toggle Archive Mode\n    const showArchivedTasks = () => {\n        setIsArchiveMode(!isArchiveMode);\n    };\n\n    // Render Subtasks\n    const renderSubtasks = (quadrant: QuadrantType, task: Task) => (\n        <Droppable droppableId={`subtasks-${task.id}`} type=\"subtask\">\n            {(provided) => (\n                <ul className=\"pl-2 mt-2 w-full\" ref={provided.innerRef} {...provided.droppableProps}>\n                    {task.subtasks?.map((subtask, index) => (\n                        <SubtaskItem\n                            key={subtask.id}\n                            subtask={subtask}\n                            taskId={task.id}\n                            index={index}\n                            quadrant={quadrant}\n                            toggleSubtaskCompletion={() => toggleSubtaskCompletion(quadrant, task.id, subtask.id)}\n                            deleteSubtask={() => deleteSubtask(quadrant, task.id, subtask.id)}\n                            setSubtaskToEdit={() => {\n                                setSubtaskToEdit({ subtask, taskId: task.id, quadrant });\n                                onSubtaskModalOpen();\n                            }}\n                            onSubtaskModalOpen={onSubtaskModalOpen}\n                        />\n                    ))}\n                    {provided.placeholder}\n                    <div className=\"mt-2 flex items-center\">\n                        <Input\n                            value={newSubtask}\n                            onChange={(e) => setNewSubtask(e.target.value.slice(0, 100))}\n                            placeholder=\"New subtask\"\n                            onKeyDown={(e) => e.key === 'Enter' && addSubtask(quadrant, task.id)}\n                            maxLength={100}\n                        />\n                        <Button onClick={() => addSubtask(quadrant, task.id)} className=\"ml-2\" style={{ minWidth: 'auto' }}>\n                            <Plus size={16} />\n                        </Button>\n                    </div>\n                </ul>\n            )}\n        </Droppable>\n    );\n\n    // Render Individual Task\n    const renderTask = (quadrant: QuadrantType, task: Task, index: number) => {\n        // Only render archived tasks if archive mode is active\n        if (task.archived && !isArchiveMode) {\n            return null;  // Skip rendering archived tasks unless archive mode is active\n        }\n\n        if (!task.archived && isArchiveMode) {\n            return null;  // Skip rendering active tasks if archive mode is active\n        }\n\n        return (\n            <TaskItem\n                key={task.id}\n                task={task}\n                quadrant={quadrant}\n                index={index}\n                handleBreakdownTaskWithAI={handleBreakdownTaskWithAI}\n                expandedTaskIds={expandedTaskIds}\n                toggleTaskCompletion={() => toggleTaskCompletion(quadrant, task.id)}\n                toggleTaskExpansion={() => toggleTaskExpansion(task.id)}\n                setTaskToEdit={setTaskToEdit} // Adding the missing prop here\n                deleteTask={() => deleteTask(quadrant, task.id)}\n                archiveTask={() => archiveTask(quadrant, task.id)}\n                moveTaskToQuadrant={moveTaskToQuadrant}\n                renderSubtasks={(task: Task) => renderSubtasks(quadrant, task)}\n                onTaskModalOpen={onTaskModalOpen} // Pass this function to TaskItem\n                onTaskModalClose={onTaskModalClose}\n            />\n        );\n    };\n\n    const handleBreakdownTaskWithAI = async (quadrant: QuadrantType, taskId: number, taskText: string) => {\n    }\n\n    // Render Quadrant\n    const renderQuadrant = (quadrant: QuadrantType) => (\n        <Droppable droppableId={quadrant} key={quadrant}>\n            {(provided, snapshot) => (\n                <Card\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`p-4 mb-4 ${theme === \"dark\" ? (snapshot.isDraggingOver ? 'bg-zinc-700' : 'bg-zinc-900') : (snapshot.isDraggingOver ? 'bg-white' : 'bg-background')}`}\n                >\n                    <CardHeader className=\"flex justify-between items-center\">\n                        {/* <div className=\"text-default-500 text-sm\">{quadrants[quadrant]}</div> */}\n                        <Popover shadow=\"lg\" containerPadding={8} triggerType=\"tree\" size='sm' backdrop='opaque' placement=\"top\">\n                            <PopoverTrigger className=\"cursor-pointer text-default-500 text-sm\">\n                                {quadrants[quadrant]}\n                            </PopoverTrigger>\n                            <PopoverContent>\n                                <p className=\"p-2 text-xs max-w-[32rem]\">\n                                    {quadrantExplanations[quadrant]}\n                                </p>\n                            </PopoverContent>\n                        </Popover>\n                        <Button\n                            size=\"sm\"\n                            isIconOnly\n                            variant=\"light\"\n                            onClick={() => {\n                                setSelectedQuadrantForAdd(quadrant);\n                                onAddTaskModalOpen();\n                            }}\n                        >\n                            <Plus size={16} />\n                        </Button>\n                    </CardHeader>\n                    {/* Show tasks based on archive mode */}\n                    {(isArchiveMode ? archivedTasks : tasks)[quadrant].length === 0 ? (\n                        <div className=\"flex flex-col items-center justify-center py-10 text-center text-default-500\">\n                            <img src=\"/emptystate.png\" className=\"w-10 h-10 mt-2 mx-auto\" alt=\"No tasks\" />\n                            <p className='mt-2 text-default-400 text-sm'>No tasks added yet</p>\n                        </div>\n                    ) : (\n                        <ul className='text-default-90 text-lg'>\n                            {(isArchiveMode ? archivedTasks : tasks)[quadrant].map((task, index) => renderTask(quadrant, task, index))}\n                        </ul>\n                    )}\n                    {provided.placeholder}\n                </Card>\n            )}\n        </Droppable>\n    );\n\n    // Add Task to Quadrant\n    const addTaskToQuadrant = async () => {\n        if (newTask.trim() && selectedQuadrantForAdd) {\n            // Define the new task object\n            const newTaskObject: InsertTask = {\n                text: newTask.trim(),\n                completed: false,\n                archived: false,\n                quadrant: selectedQuadrantForAdd,\n                user_id: user?.sub || 'anonymous', // Ensure user_id is handled correctly\n            };\n\n            if (user) {\n                try {\n                    // Insert the new task into Supabase, wrapped in an array\n                    const { data, error }: { data: SupabaseTask[] | null; error: PostgrestError | null } = await supabase\n                        .from('tasks')\n                        .insert([newTaskObject])      // Wrap `newTaskObject` in an array\n                        .select();                    // Ensure the inserted row is returned\n\n                    if (error) {\n                        console.error('Error adding task to Supabase:', error);\n                    } else if (data && data.length > 0) {\n                        console.log(`Task added successfully to Supabase by ${user.name}:`, data);\n\n                        // Update the state only after the task is successfully added to the DB\n                        setTasks((prev) => ({\n                            ...prev,\n                            [selectedQuadrantForAdd]: [\n                                ...prev[selectedQuadrantForAdd],\n                                { ...newTaskObject, id: data[0].id, subtasks: [] }, // Correctly assign 'id' from Supabase and initialize subtasks\n                            ],\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error inserting task into Supabase:', err);\n                }\n            } else {\n                // User is not logged in\n                const localId = Date.now(); // Use a unique local ID as a number\n                const localTask: Task = { ...newTaskObject, id: localId, subtasks: [] }; // Initialize subtasks if necessary\n\n                setTasks((prev) => ({\n                    ...prev,\n                    [selectedQuadrantForAdd]: [...prev[selectedQuadrantForAdd], localTask],\n                }));\n            }\n            // Clear the input and close the modal\n            setNewTask('');\n            onAddTaskModalClose();\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"text-center p-4\">\n                {\n                    // Check if user is logged in\n                    user ? (\n                        // If user is premium, only show the h1\n                        user.premium ? (\n                            // If user is not premium, show both h1 and p\n                            <>\n                                <h1 className=\"tracking-tight inline font-semibold text-base mb-4 leading-9\">\n                                    {(() => {\n                                        const hour = new Date().getHours();\n                                        if (hour >= 5 && hour < 12) {\n                                            return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                        } else if (hour >= 12 && hour < 17) {\n                                            return `Good afternoon, ${user.name}. Ready to power through?`;\n                                        } else if (hour >= 17 && hour < 22) {\n                                            return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                        } else {\n                                            return `Let's get some late-night magic going, ${user.name}!`;\n                                        }\n                                    })()}\n                                </h1>\n                                {/* Display sync message only for non-premium users */}\n                                <p className='text-default-500 text-sm'>\n                                    Sync across all devices with this account and unlock more features with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>\n                                </p>\n                            </>\n\n                        ) : (\n                            <h1 className=\"tracking-tight inline font-semibold text-base mb-4\t leading-9\">\n                                {(() => {\n                                    const hour = new Date().getHours();\n                                    // Morning: 5am to 12pm\n                                    if (hour >= 5 && hour < 12) {\n                                        return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                    }\n                                    // Afternoon: 12pm to 5pm\n                                    else if (hour >= 12 && hour < 17) {\n                                        return `Good afternoon, ${user.name}. Ready to power through?`;\n                                    }\n                                    // Evening: 5pm to 10pm\n                                    else if (hour >= 17 && hour < 22) {\n                                        return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                    }\n                                    // Late night: 10pm to 5am\n                                    else {\n                                        return `Let's get some late-night magic going, ${user.name}!`;\n                                    }\n                                })()}\n                            </h1>\n                        )\n                    ) : (\n                        <>\n                            {/* If user is not logged in, show this default h1 and p */}\n                            <h1 className=\"tracking-tight inline font-semibold text-base leading-9 mb-4\">\n                                Prioritize your tasks with the Eisenhower Matrix, and break them down\n                            </h1>\n                            <p className='text-default-500 text-sm'>\n                                No account needed, free forever (more features included with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>)\n                            </p>\n                        </>\n                    )\n                }\n\n                <FloatingButton\n                    tasks={tasks}\n                    showArchivedTasks={showArchivedTasks}\n                    isArchiveMode={isArchiveMode}\n                    user={user} />\n            </div>\n\n            {loadingAI && (\n                <div className=\"z-10 fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <Spinner size=\"lg\" />\n                </div>\n            )}\n\n            {/* Render the PiPWindow and pass props */}\n            {firstUrgentTask && (\n                <PiPWindow\n                    taskText={firstUrgentTask}\n                    isVisible={pipVisible}\n                    onClose={() => setPipVisible(false)}  // Handle PiP close event\n                />\n            )}\n\n\n            <Modal isOpen={isAddTaskModalOpen} onClose={onAddTaskModalClose}>\n                <ModalContent>\n                    <ModalHeader>Add Task</ModalHeader>\n                    <ModalBody>\n                        <Input\n                            value={newTask}\n                            onChange={(e) => setNewTask(e.target.value)}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    addTaskToQuadrant();  // Updated function call\n                                } else if (e.key === 'Escape') {\n                                    onAddTaskModalClose();\n                                }\n                            }}\n                            fullWidth\n                            placeholder=\"Enter task name\"\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={addTaskToQuadrant}>Add</Button>  {/* Updated function call */}\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n\n            <Modal isOpen={isTaskModalOpen} onClose={onTaskModalClose}>\n                <ModalContent>\n                    <ModalHeader>Edit Task</ModalHeader>\n                    <ModalBody>\n                        <Input\n                            value={taskToEdit?.task.text || ''}\n                            onChange={handleTaskInputChange}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    saveEditedTask();\n                                } else if (e.key === 'Escape') {\n                                    onTaskModalClose();\n                                }\n                            }}\n                            fullWidth\n                            placeholder=\"Enter new task name\"\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={saveEditedTask}>Save</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            <Modal isOpen={isSubtaskModalOpen} onClose={onSubtaskModalClose}>\n                <ModalContent>\n                    <ModalHeader>Edit Subtask</ModalHeader>\n                    <ModalBody>\n                        <Input\n                            value={subtaskToEdit?.subtask.text || ''}\n                            onChange={handleSubtaskInputChange}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    saveEditedSubtask();\n                                } else if (e.key === 'Escape') {\n                                    onSubtaskModalClose();\n                                }\n                            }}\n                            fullWidth\n                            placeholder=\"Enter new subtask name\"\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={saveEditedSubtask}>Save</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            <div className=\"flex-grow overflow-auto sm:p-0 lg:p-4\">\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {(['do', 'decide', 'delegate', 'delete', 'unsorted'] as QuadrantType[]).map(renderQuadrant)}\n                    </div>\n                </DragDropContext>\n            </div>\n        </div>\n    )\n};\n\nexport default EisenhowerMatrix;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}