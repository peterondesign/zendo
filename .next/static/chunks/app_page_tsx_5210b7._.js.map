{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '@nextui-org/button';\nimport { Input } from '@nextui-org/input';\nimport { Card, CardHeader } from '@nextui-org/card';\nimport { Trash2, GripVertical, Plus, MoreVertical, ChevronDown, ChevronUp } from 'lucide-react';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport { Popover, PopoverTrigger, PopoverContent, Dropdown, DropdownTrigger, DropdownSection, DropdownMenu, DropdownItem } from \"@nextui-org/react\";\n\ntype Task = {\n  id: number;\n  text: string;\n  completed: boolean;\n  subtasks: SubTask[];\n};\n\ntype SubTask = {\n  id: number;\n  text: string;\n  completed: boolean;\n};\n\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\nconst quadrants: Record<QuadrantType, string> = {\n  do: 'Do (Urgent & Important)',\n  decide: 'Decide (Not Urgent & Important)',\n  delegate: 'Delegate (Urgent & Not Important)',\n  delete: 'Delete (Not Urgent & Not Important)',\n  unsorted: 'Unsorted Tasks',\n};\n\nconst initialTasks = () => {\n  const storedTasks = localStorage.getItem('eisenhowerMatrixTasks');\n  return storedTasks\n    ? JSON.parse(storedTasks)\n    : {\n      do: [],\n      decide: [],\n      delegate: [],\n      delete: [],\n      unsorted: [],\n    };\n};\n\nconst EisenhowerMatrix: React.FC = () => {\n  const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>(initialTasks);\n  const [newTask, setNewTask] = useState('');\n  const [selectedQuadrant, setSelectedQuadrant] = useState<QuadrantType>('unsorted');\n  const [newSubtask, setNewSubtask] = useState('');\n  const [expandedTaskIds, setExpandedTaskIds] = useState<number[]>([]);\n\n  useEffect(() => {\n    localStorage.setItem('eisenhowerMatrixTasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleTaskExpansion = (taskId: number) => {\n    setExpandedTaskIds((prev) =>\n      prev.includes(taskId) ? prev.filter((id) => id !== taskId) : [...prev, taskId]\n    );\n  };\n\n\n  const addTask = (quadrant: QuadrantType = selectedQuadrant, taskText: string = newTask) => {\n    if (taskText.trim()) {\n      setTasks((prev) => ({\n        ...prev,\n        [quadrant]: [\n          ...prev[quadrant],\n          { id: Date.now(), text: taskText.trim(), completed: false, subtasks: [] },\n        ],\n      }));\n      setNewTask('');\n    }\n  };\n\n  const addSubtask = (quadrant: QuadrantType, taskId: number) => {\n    if (newSubtask.trim()) {\n      setTasks((prev) => ({\n        ...prev,\n        [quadrant]: prev[quadrant].map((task) =>\n          task.id === taskId\n            ? {\n              ...task,\n              subtasks: [\n                ...task.subtasks,\n                { id: Date.now(), text: newSubtask.trim(), completed: false },\n              ],\n            }\n            : task\n        ),\n      }));\n      setNewSubtask('');\n    }\n  };\n\n  const toggleSubtaskCompletion = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n    setTasks((prev) => ({\n      ...prev,\n      [quadrant]: prev[quadrant].map((task) =>\n        task.id === taskId\n          ? {\n            ...task,\n            subtasks: task.subtasks.map((subtask) =>\n              subtask.id === subtaskId\n                ? { ...subtask, completed: !subtask.completed }\n                : subtask\n            ),\n          }\n          : task\n      ),\n    }));\n  };\n\n  const toggleTaskCompletion = (quadrant: QuadrantType, taskId: number) => {\n    setTasks((prev) => ({\n      ...prev,\n      [quadrant]: prev[quadrant].map((task) =>\n        task.id === taskId ? { ...task, completed: !task.completed } : task\n      ),\n    }));\n  };\n\n  const deleteTask = (quadrant: QuadrantType, taskId: number) => {\n    setTasks((prev) => ({\n      ...prev,\n      [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n    }));\n  };\n\n  const deleteSubtask = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n    setTasks((prev) => ({\n      ...prev,\n      [quadrant]: prev[quadrant].map((task) =>\n        task.id === taskId\n          ? {\n            ...task,\n            subtasks: task.subtasks.filter((subtask) => subtask.id !== subtaskId),\n          }\n          : task\n      ),\n    }));\n  };\n\n  const moveTaskToQuadrant = (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => {\n    const sourceTasks = Array.from(tasks[sourceQuadrant]);\n    const taskIndex = sourceTasks.findIndex((task) => task.id === taskId);\n    if (taskIndex === -1) return;\n\n    const [task] = sourceTasks.splice(taskIndex, 1);\n    const updatedTargetTasks = [...tasks[targetQuadrant], task];\n\n    setTasks((prev) => ({\n      ...prev,\n      [sourceQuadrant]: sourceTasks,\n      [targetQuadrant]: updatedTargetTasks,\n    }));\n  };\n\n  // Handles drag-and-drop reordering of tasks and moving between quadrants\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n\n    // No destination means the task wasn't moved\n    if (!destination) return;\n\n    const sourceQuadrant = source.droppableId as QuadrantType;\n    const destinationQuadrant = destination.droppableId as QuadrantType;\n\n    // Check if the task is moved within the same quadrant\n    if (sourceQuadrant === destinationQuadrant) {\n      const reorderedTasks = Array.from(tasks[sourceQuadrant]);\n      const [removed] = reorderedTasks.splice(source.index, 1);\n      reorderedTasks.splice(destination.index, 0, removed);\n\n      setTasks((prev) => ({\n        ...prev,\n        [sourceQuadrant]: reorderedTasks,\n      }));\n    } else {\n      // Moving task to a different quadrant\n      const sourceTasks = Array.from(tasks[sourceQuadrant]);\n      const [movedTask] = sourceTasks.splice(source.index, 1);\n      const destinationTasks = Array.from(tasks[destinationQuadrant]);\n\n      // Insert task into the new position in the destination quadrant\n      destinationTasks.splice(destination.index, 0, movedTask);\n\n      setTasks((prev) => ({\n        ...prev,\n        [sourceQuadrant]: sourceTasks,   // Update source quadrant tasks\n        [destinationQuadrant]: destinationTasks, // Update destination quadrant tasks\n      }));\n    }\n  };\n\n\n  const renderSubtasks = (quadrant: QuadrantType, task: Task) => (\n    <ul className=\"pl-6 mt-2\">\n      {task.subtasks.map((subtask) => (\n        <li key={subtask.id} className=\"flex items-center mb-2\">\n          <input\n            type=\"checkbox\"\n            checked={subtask.completed}\n            onChange={() => toggleSubtaskCompletion(quadrant, task.id, subtask.id)}\n            className=\"mr-2\"\n          />\n          <span className={subtask.completed ? 'line-through' : ''}>{subtask.text}</span>\n          <Button size=\"sm\" variant=\"light\" onClick={() => deleteSubtask(quadrant, task.id, subtask.id)}>\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </li>\n      ))}\n      <div className=\"mt-2 flex items-center\">\n        <Input\n          value={newSubtask}\n          onChange={(e) => setNewSubtask(e.target.value)}\n          placeholder=\"Add new subtask\"\n          onKeyDown={(e) => e.key === 'Enter' && addSubtask(quadrant, task.id)}\n        />\n        <Button onClick={() => addSubtask(quadrant, task.id)} className=\"ml-2\">\n          <Plus size={16} />\n        </Button>\n      </div>\n    </ul>\n  );\n\n  // Function to calculate percentage of completed subtasks\n  const getSubtaskCompletionPercentage = (task: Task) => {\n    const totalSubtasks = task.subtasks.length;\n    const completedSubtasks = task.subtasks.filter(subtask => subtask.completed).length;\n\n    return totalSubtasks > 0 ? Math.round((completedSubtasks / totalSubtasks) * 100) : 0;\n  };\n\n\n  const renderTask = (quadrant: QuadrantType, task: Task, index: number) => (\n\n    <Draggable key={task.id} draggableId={task.id.toString()} index={index}>\n      {(provided, snapshot) => (\n        <li\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          className={`flex flex-col items-start justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-700' : 'hover:bg-default-100'\n            }`}\n        >\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center flex-grow\">\n              <span {...provided.dragHandleProps} className=\"mr-2 cursor-move\">\n                <GripVertical size={16} />\n              </span>\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => toggleTaskCompletion(quadrant, task.id)}\n                className=\"mr-2\"\n              />\n              <span\n                className={`cursor-pointer ${task.completed ? 'line-through' : ''}`}\n                onClick={() => toggleTaskExpansion(task.id)}\n              >\n                {task.text}\n              </span>\n            </div>\n            <div className=\"flex items-center\">\n              <Button\n                size=\"sm\"\n                variant=\"light\"\n                onClick={() => toggleTaskExpansion(task.id)}\n              >\n                {expandedTaskIds.includes(task.id) ? (\n                  <ChevronUp size={16} />\n                ) : (\n                  <ChevronDown size={16} />\n                )}\n              </Button>\n              <Dropdown>\n                <DropdownTrigger>\n                  <Button size=\"sm\" variant=\"light\">\n                    <MoreVertical size={16} className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownTrigger>\n                <DropdownMenu>\n                  <DropdownSection title=\"Move\">\n                    {Object.keys(quadrants)\n                      .filter((q) => q !== quadrant)\n                      .map((targetQuadrant) => (\n                        <DropdownItem\n                          key={targetQuadrant}\n                          onClick={() => moveTaskToQuadrant(quadrant, task.id, targetQuadrant as QuadrantType)}\n                        >\n                          Move to {quadrants[targetQuadrant as QuadrantType]}\n                        </DropdownItem>\n                      ))}\n                  </DropdownSection>\n\n                  {/* <DropdownSection title=\"AI Breakdown\">\n                    <DropdownItem\n                      onClick={() => handleBreakdownTask(quadrant, task.id, task.text)}\n                    >\n                      Breakdown with AI\n                    </DropdownItem>\n                  </DropdownSection> */}\n\n                  <DropdownSection title=\"Danger zone\">\n\n                    <DropdownItem\n                      onClick={() => deleteTask(quadrant, task.id)}\n                      className=\"text-red-500\"\n                    >\n                      Delete\n                    </DropdownItem>\n                  </DropdownSection>\n\n                </DropdownMenu>\n              </Dropdown>\n            </div>\n          </div>\n          {expandedTaskIds.includes(task.id) && renderSubtasks(quadrant, task)}\n        </li>\n      )}\n    </Draggable>\n  );\n\n  const renderQuadrant = (quadrant: QuadrantType) => (\n    <Droppable droppableId={quadrant} key={quadrant}>\n      {(provided) => (\n        <Card ref={provided.innerRef} {...provided.droppableProps} className=\"p-4 mb-4\">\n          <CardHeader className=\"flex justify-between items-center\">\n            <div>{quadrants[quadrant]}</div>\n            <Popover placement=\"bottom\">\n              <PopoverTrigger>\n                <Button size=\"sm\" isIconOnly variant=\"light\">\n                  <Plus size={16} />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent>\n                <div className=\"p-4\">\n                  <Input\n                    placeholder=\"New task\"\n                    value={newTask}\n                    onChange={(e) => setNewTask(e.target.value)}\n                    onKeyDown={(e) => e.key === 'Enter' && addTask(quadrant)}\n                  />\n                  <Button onClick={() => addTask(quadrant)} className=\"mt-2\">\n                    Add Task\n                  </Button>\n                </div>\n              </PopoverContent>\n            </Popover>\n          </CardHeader>\n          <ul>{tasks[quadrant].map((task, index) => renderTask(quadrant, task, index))}</ul>\n          {provided.placeholder}\n        </Card>\n      )}\n    </Droppable>\n  );\n\n  // Function to call the LocalAI service for task breakdown using /v1/chat/completions\n  const fetchTaskBreakdown = async (taskText: string) => {\n    const apiUrl = \"https://localai.io/v1/chat/completions\"; // Replace with the actual LocalAI API endpoint\n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\", // Use appropriate model name based on LocalAI API\n        messages: [\n          {\n            role: \"user\",\n            content: `Please break down the following task into subtasks: ${taskText}`,\n          },\n        ],\n        max_tokens: 100,\n      }),\n    });\n\n    const data = await response.json();\n    return data.choices[0].message.content.split('\\n').filter((subtask: string) => subtask.trim());\n  };\n\n  // Function to handle task breakdown with AI and update the task with subtasks\n  const handleBreakdownTask = async (quadrant: QuadrantType, taskId: number, taskText: string) => {\n    const subtasks = await fetchTaskBreakdown(taskText);\n    setTasks((prev) => ({\n      ...prev,\n      [quadrant]: prev[quadrant].map((task) =>\n        task.id === taskId\n          ? {\n            ...task,\n            subtasks: subtasks.map((subtaskText: string, index: number) => ({\n              id: Date.now() + index,\n              text: subtaskText.trim(),\n              completed: false,\n            })),\n          }\n          : task\n      ),\n    }));\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <div className=\"p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Eisenhower Matrix Task Management</h1>\n      </div>\n      <div className=\"flex-grow overflow-auto p-4\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {(['do', 'decide', 'delegate', 'delete', 'unsorted'] as QuadrantType[]).map(renderQuadrant)}\n          </div>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\nexport default EisenhowerMatrix;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 661, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}