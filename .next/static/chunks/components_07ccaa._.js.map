{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/taskchart.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, SetStateAction } from \"react\";\nimport { Scatter } from \"react-chartjs-2\";\nimport { Button } from \"@nextui-org/button\";\nimport { format } from \"date-fns\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from \"chart.js\";\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { Task } from \"../customtypes\";\nimport { useUser } from '@auth0/nextjs-auth0/client'; // Assuming you use Auth0 for user management\nimport { ChartOptions, ScatterDataPoint } from 'chart.js';\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);\n\ninterface TooltipContext {\n    raw: {\n        label: string;\n        time: string;\n    };\n}\n\n// Register Chart.js components for scatter/line charts\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst HourlyTaskChart = () => {\n    const { user } = useUser(); // Get user details\n    const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n    // const [scatterData, setScatterData] = useState<any[]>([]); // Array for task points\n    const [tasks, setTasks] = useState<Task[]>([]); // Store fetched tasks here\n    const [scatterData, setScatterData] = useState<Array<ScatterDataPoint & { label: string; time: string }>>([]);\n\n\n    // Function to fetch tasks from the database or local storage\n    const fetchTasks = async () => {\n        let fetchedTasks: Task[] = [];\n\n        if (user) {\n            // Fetch tasks for logged-in user from Supabase\n            const { data, error } = await supabase\n                .from(\"tasks\")\n                .select(\"created_at, completed_at, user_id, id, text, completed, archived, subtasks, quadrant\")\n                .eq(\"user_id\", user.sub);\n\n            if (error) {\n                console.error(\"Error fetching tasks from the database\", error);\n            } else if (data) {\n                fetchedTasks = data.map((task: any) => ({\n                    created_at: new Date(task.created_at),\n                    completed_at: task.completed_at ? new Date(task.completed_at) : null,\n                    user_id: task.user_id,\n                    id: task.id,\n                    text: task.text,\n                    completed: task.completed,\n                    archived: task.archived,\n                    subtasks: task.subtasks,\n                    quadrant: task.quadrant,\n                    updated_at: new Date(task.updated_at),\n                }));\n            }\n        } else {\n            // No user is logged in, fetch from 'eisenhowerMatrixTasks' in local storage\n            const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n\n            if (storedTasks) {\n                try {\n                    const parsedTasks = JSON.parse(storedTasks);\n\n                    // Check if parsedTasks is an object and flatten task arrays from each quadrant\n                    if (parsedTasks && typeof parsedTasks === 'object') {\n                        // Flatten all tasks from each quadrant into a single array\n                        fetchedTasks = Object.keys(parsedTasks).reduce((acc: Task[], quadrant: string) => {\n                            return acc.concat(parsedTasks[quadrant]);\n                        }, []);\n\n                        // Transform fetched tasks' date fields into Date objects\n                        fetchedTasks = fetchedTasks.map((task: any) => ({\n                            ...task,\n                            created_at: new Date(task.created_at),\n                            completed_at: task.completed_at ? new Date(task.completed_at) : null,\n                        }));\n                    }\n                } catch (error) {\n                    console.error(\"Error parsing tasks from localStorage:\", error);\n                }\n            }\n        }\n\n        setTasks(fetchedTasks); // Update the tasks state\n    };\n\n\n    // Save tasks to local storage if the user is not logged in\n    const saveTasksToLocal = () => {\n        if (!user) {\n            localStorage.setItem(\"localTasks\", JSON.stringify(tasks));\n        }\n    };\n\n    // Call fetchTasks when the component mounts\n    useEffect(() => {\n        fetchTasks();\n    }, [user]);\n\n    useEffect(() => {\n        saveTasksToLocal(); // Save tasks to local storage if there's no user\n    }, [tasks]);\n\n    // Function to update chart data based on the selected day\n    const updateChartData = (tasks: Task[], date: Date) => {\n        const newScatterData: SetStateAction<any[]> = []; // Reset task data\n\n        tasks.forEach((task) => {\n            if (format(task.created_at, \"yyyy-MM-dd\") === format(date, \"yyyy-MM-dd\")) {\n                // Add creation time point\n                newScatterData.push({\n                    x: task.created_at.getHours() + task.created_at.getMinutes() / 60, // Exact time in decimal hours\n                    y: 1, // \"Created\"\n                    label: `Created: ${task.text}`,\n                    time: format(task.created_at, \"HH:mm\"),\n                });\n            }\n\n            if (task.completed_at && format(task.completed_at, \"yyyy-MM-dd\") === format(date, \"yyyy-MM-dd\")) {\n                // Add completion time point\n                newScatterData.push({\n                    x: task.completed_at.getHours() + task.completed_at.getMinutes() / 60, // Exact time in decimal hours\n                    y: 2, // \"Completed\"\n                    label: `Completed: ${task.text}`,\n                    time: format(task.completed_at, \"HH:mm\"),\n                });\n            }\n        });\n\n        console.log(\"Updated scatter data:\", newScatterData); // Log chart data\n        setScatterData(newScatterData); // Update the scatter data state\n    };\n\n    // Handle previous day navigation\n    const handlePreviousDay = () =>\n        setSelectedDate((prevDate) => new Date(prevDate.setDate(prevDate.getDate() - 1)));\n\n    // Handle next day navigation (prevent future dates)\n    const handleNextDay = () => {\n        const nextDate = new Date(selectedDate);\n        nextDate.setDate(nextDate.getDate() + 1);\n\n        // Do not allow selecting a future date\n        if (nextDate <= new Date()) {\n            setSelectedDate(nextDate);\n        }\n    };\n\n    // Handle resetting to today\n    const handleToday = () => setSelectedDate(new Date());\n\n    useEffect(() => {\n        // Update chart data when the selected day changes\n        updateChartData(tasks, selectedDate);\n    }, [selectedDate, tasks]);\n\n    // Chart data configuration for Chart.js (Scatter)\n    const data = {\n        datasets: [\n            {\n                label: \"Task Activity\",\n                data: scatterData,\n                backgroundColor: scatterData.map((d) => (d.y === 1 ? \"blue\" : \"green\")),\n                borderColor: \"rgba(0, 0, 0, 0.1)\",\n                borderWidth: 2,\n                showLine: false,\n                pointRadius: 12,\n                pointHoverRadius: 8\n            },\n        ],\n    };\n\n    // Update chart options to display task names in the tooltip\n\n    const options: ChartOptions<'scatter'> = {\n        scales: {\n            x: {\n                type: \"linear\", // Specify the type as \"linear\" for scatter chart\n                position: \"bottom\",\n                title: { display: true, text: \"Time of Day (hours)\" },\n                min: 0,\n                max: 24,\n            },\n            y: {\n                type: \"linear\", // Specify the type as \"linear\"\n                ticks: {\n                    callback: (tickValue: string | number) => {\n                        if (typeof tickValue === 'number') {\n                            return tickValue === 1 ? \"Created\" : tickValue === 2 ? \"Completed\" : \"\";\n                        }\n                        return \"\"; // Default for non-number tickValues\n                    },\n                },\n                title: { display: true, text: \"Task State\" },\n                min: 0,\n                max: 3,\n            },\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: function (tooltipItem) {\n                        const { label, time } = tooltipItem.raw as { label: string; time: string };\n                        return `${label} at ${time}`;\n                    },\n                },\n            },\n            legend: { display: false },\n        },\n    };\n\n\n    // const options = {\n    //     scales: {\n    //         x: {\n    //             type: \"linear\",\n    //             position: \"bottom\",\n    //             title: { display: true, text: \"Time of Day (hours)\" },\n    //             min: 0,\n    //             max: 24,\n    //         },\n    //         y: {\n    //             ticks: {\n    //                 callback: (tickValue: number) => (tickValue === 1 ? \"Created\" : tickValue === 2 ? \"Completed\" : \"\"),\n    //             },\n    //             title: { display: true, text: \"Task State\" },\n    //             min: 0,\n    //             max: 3,\n    //         },\n    //     },\n    //     plugins: {\n    //         tooltip: {\n    //             callbacks: {\n    //                 label: function (context: { raw: { label: any; time: any; }; }) {\n    //                     return `${context.raw.label} at ${context.raw.time}`;\n    //                 },\n    //             },\n    //         },\n    //         legend: { display: false },\n    //     },\n    // };\n\n    return (\n        <div className=\"p-4\">\n            <div className=\"flex justify-between items-top mb-4 sticky\">\n                <Button onClick={handlePreviousDay} variant=\"flat\">Previous Day</Button>\n                <div className=\"flex gap-2 flex-col\">\n                    <h2 className=\"text-center text-xl\">{format(selectedDate, \"yyyy-MM-dd\")}</h2>\n                    <Button onClick={handleToday} variant=\"light\">Today</Button>\n                </div>\n                <Button onClick={handleNextDay} variant=\"flat\">Next Day</Button>\n            </div>\n            <Scatter data={data} options={options} style={{ height: \"400px\", width: '100%' }} />\n        </div>\n    );\n};\n\nexport default HourlyTaskChart;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/premiumcontext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useUser } from '@auth0/nextjs-auth0/client';\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);\n\n// Create a context for premium status\nconst PremiumContext = createContext<{ isPremium: boolean | null }>({ isPremium: null });\n\n// Hook to use the PremiumContext in other components\nexport const usePremium = () => useContext(PremiumContext);\n\n// Provider component to wrap your app\nexport const PremiumProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useUser();\n  const [isPremium, setIsPremium] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    const fetchPremiumStatus = async () => {\n      if (user) {\n        try {\n          const { data, error } = await supabase\n            .from('users')\n            .select('premium')\n            .eq('id', user.sub) // Assuming user.sub is the Auth0 ID\n            .single();\n\n          if (error) {\n            console.error('Error fetching premium status:', error);\n            return;\n          }\n\n          if (data) {\n            setIsPremium(data.premium);\n          }\n        } catch (err) {\n          console.error('Error fetching premium status:', err);\n        }\n      }\n    };\n\n    fetchPremiumStatus();\n  }, [user]);\n\n  return (\n    <PremiumContext.Provider value={{ isPremium }}>\n      {children}\n    </PremiumContext.Provider>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA,MAAM;AACN,MAAM;AACN,MAAM,WAA2B,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAE3D,sCAAsC;AACtC,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAiC;IAAE,WAAW;AAAK;AAG/E,MAAM,aAAa;;IAAM,OAAA,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;AAAc;GAA5C;AAGN,MAAM,kBAA2D,CAAC,EAAE,QAAQ,EAAE;;IACnF,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,wKAAA,CAAA,UAAO,AAAD;IACvB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;IAE3D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,qBAAqB;YACzB,IAAI,MAAM;gBACR,IAAI;oBACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,SACL,MAAM,CAAC,WACP,EAAE,CAAC,MAAM,KAAK,GAAG,EAAE,oCAAoC;qBACvD,MAAM;oBAET,IAAI,OAAO;wBACT,QAAQ,KAAK,CAAC,kCAAkC;wBAChD;oBACF;oBAEA,IAAI,MAAM;wBACR,aAAa,KAAK,OAAO;oBAC3B;gBACF,EAAE,OAAO,KAAK;oBACZ,QAAQ,KAAK,CAAC,kCAAkC;gBAClD;YACF;QACF;QAEA;IACF,GAAG;QAAC;KAAK;IAET,qBACE,6LAAC,eAAe,QAAQ;QAAC,OAAO;YAAE;QAAU;kBACzC;;;;;;AAGP;IApCa;;QACM,wKAAA,CAAA,UAAO;;;KADb"}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 407, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/floatingbutton.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Tooltip, Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Table, TableHeader, TableColumn, TableBody, TableCell, TableRow } from \"@nextui-org/react\";\nimport { Clipboard, Archive, FileDown, CircleEllipsis } from 'lucide-react';\nimport jsPDF from 'jspdf';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useUser } from '@auth0/nextjs-auth0/client'\nimport { Flame } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns'; // Import from date-fns\nimport TaskChart from './taskchart';\nimport { usePremium } from './premiumcontext'; // Import the premium context\n\n\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\ninterface Task {\n    id: number;\n    text: string;\n    completed: boolean;\n    subtasks: SubTask[];\n    created_at: Date;\n    updated_at: Date;  // We will use updated_at to show when the task was last updated/completed\n}\n\ninterface SubTask {\n    id: number;\n    text: string;\n    completed: boolean;\n}\n\nconst quadrantDetails: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\ninterface FloatingButtonProps {\n    tasks: Record<QuadrantType, Task[]>;\n    showArchivedTasks: () => void;\n    isArchiveMode: boolean;\n    user: any;\n    streak: number; // Add streak as a prop\n}\n\n\nconst FloatingButton: React.FC<FloatingButtonProps> = ({ tasks, showArchivedTasks, isArchiveMode, user, streak }) => {\n\n    const [isTaskHistoryOpen, setTaskHistoryOpen] = useState(false);\n\n    const [taskHistory, setTaskHistory] = useState<Task[]>([]);\n    const { isPremium } = usePremium(); // Get premium status from the context\n\n    useEffect(() => {\n        // Fetch task history (both created and completed will be shown as one table)\n        const allTasks = Object.values(tasks).flat();\n        setTaskHistory(allTasks);\n    }, [tasks]);\n\n\n    const formatTasksToMarkdown = () => {\n        let markdown = '';\n        (Object.keys(quadrantDetails) as QuadrantType[]).forEach((quadrantKey) => {\n            const quadrantLabel = quadrantDetails[quadrantKey];\n            markdown += `## ${quadrantLabel}\\n\\n`;\n            if (tasks[quadrantKey].length > 0) {\n                tasks[quadrantKey].forEach((task: Task) => {\n                    markdown += `- [${task.completed ? 'x' : ' '}] ${task.text}\\n`;\n                    task.subtasks.forEach((subtask: SubTask) => {\n                        markdown += `   - [${subtask.completed ? 'x' : ' '}] ${subtask.text}\\n`;\n                    });\n                });\n            } else {\n                markdown += 'No tasks added yet.\\n';\n            }\n            markdown += '\\n';\n        });\n        return markdown;\n    };\n\n    const copyToClipboard = () => {\n        const markdownContent = formatTasksToMarkdown();\n        navigator.clipboard.writeText(markdownContent)\n            .then(() => toast.success('Tasks copied to clipboard'))\n            .catch(err => {\n                console.error('Failed to copy to clipboard: ', err);\n                toast.error('Failed to copy tasks');\n            });\n    };\n\n    const saveAsPDF = () => {\n        const pdf = new jsPDF();\n        const pageWidth = pdf.internal.pageSize.getWidth();\n        const tableWidth = pageWidth - 20; // Leave some padding on both sides\n        const lineHeight = 10;\n        let startX = 10;\n        let startY = 20; // Start slightly lower on the page for spacing\n\n        (Object.keys(quadrantDetails) as QuadrantType[]).forEach((quadrantKey, idx) => {\n            const quadrantLabel = quadrantDetails[quadrantKey];\n\n            if (idx !== 0) {\n                startY += 20;\n            }\n\n            pdf.setFontSize(14);\n            pdf.text(quadrantLabel, startX, startY);\n            startY += lineHeight;\n\n            pdf.setFontSize(12);\n            pdf.text('Tasks', startX, startY);\n            pdf.text('Subtasks', startX + 80, startY); // Adjust the X position for subtasks\n            startY += lineHeight;\n\n            tasks[quadrantKey].forEach((task) => {\n                const checkbox = task.completed ? '[x]' : '[ ]';\n                pdf.text(`${checkbox} ${task.text}`, startX, startY);\n                startY += lineHeight;\n\n                task.subtasks.forEach((subtask) => {\n                    const subCheckbox = subtask.completed ? '[x]' : '[ ]';\n                    pdf.text(`${subCheckbox} ${subtask.text}`, startX + 80, startY); // Indent subtasks\n                    startY += lineHeight;\n                });\n            });\n\n            if (tasks[quadrantKey].length === 0) {\n                pdf.text('No tasks added yet.', startX, startY);\n                startY += lineHeight;\n            }\n\n            if (startY > pdf.internal.pageSize.getHeight() - 30) {\n                pdf.addPage();\n                startY = 20;\n            }\n        });\n\n        pdf.save('tasks.pdf');\n        toast.success('PDF exported');\n    };\n\n    const handleArchiveTasks = () => {\n        showArchivedTasks();\n        toast.success(isArchiveMode ? 'Hiding archived tasks' : 'Showing archived tasks');\n    };\n\n    // Function to validate and parse dates\n    const isValidDate = (date: string | number | Date) => {\n        const parsedDate = new Date(date);\n        // Check if date is valid\n        return !isNaN(parsedDate.getTime());\n    };\n\n    // Function to log invalid dates for debugging\n    const handleInvalidDate = (taskId: number, fieldName: string, invalidValue: any) => {\n        console.warn(`Invalid date value for task ID ${taskId}, field ${fieldName}:`, invalidValue);\n    };\n\n    // Define which keys should be disabled if the user is not premium\n    const disabledKeys = !isPremium ? ['archive', 'copy', 'save'] : [];\n\n\n    return (\n        <>\n            <div><Toaster /></div>\n\n            <ButtonGroup className='z-10 fixed bottom-10 right-10' variant=\"flat\">\n                <Button isIconOnly onClick={() => setTaskHistoryOpen(true)} fullWidth={true} >\n                    <Flame color=\"orange\" size={16} />\n                    <span>{streak}D</span>\n                </Button>\n\n                {/* Only show the CircleEllipsis button if the user is logged in */}\n                {user && (\n                    <Dropdown placement=\"top-end\">\n                        <DropdownTrigger>\n                            <Button isIconOnly>\n                                <CircleEllipsis />\n                            </Button>\n                        </DropdownTrigger>\n                        <DropdownMenu aria-label=\"Task options\"\n                            disabledKeys={disabledKeys}>\n                            <DropdownItem\n                                key=\"archive\"\n                                startContent={<Archive size={16} />}\n                                onClick={handleArchiveTasks}\n                                description={!isPremium ? \"Requires premium to unlock\" : undefined}\n                            >\n                                {isArchiveMode ? \"Hide Archived\" : \"Show Archived\"}\n                            </DropdownItem>\n                            <DropdownItem key=\"copy\" startContent={<Clipboard size={16} />} onClick={copyToClipboard} description={!isPremium ? \"Requires premium to unlock\" : undefined}>\n                                Copy Tasks to Clipboard\n                            </DropdownItem>\n\n                            <DropdownItem key=\"save\" startContent={<FileDown size={16} />} onClick={saveAsPDF} description={!isPremium ? \"Requires premium to unlock\" : undefined}>\n                                Save as PDF\n                            </DropdownItem>\n                        </DropdownMenu>\n                    </Dropdown>\n                )}\n\n            </ButtonGroup>\n\n            {/* Modal for showing task history */}\n            <Modal isOpen={isTaskHistoryOpen} onClose={() => setTaskHistoryOpen(false)} size=\"4xl\">\n                <ModalContent>\n                    <ModalHeader>Task History</ModalHeader>\n                    <ModalBody className='h-48 overflow-auto'>\n                        {/* Display overlay message if not premium */}\n                        {!isPremium && (\n                            <div className=\"absolute inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n                                <p className=\"text-white font-bold text-lg\">🔐 Requires Premium to Unlock</p>\n                            </div>\n                        )}\n                        <TaskChart />\n                        {/* <Table aria-label=\"Task History\">\n                            <TableHeader>\n                                <TableColumn key=\"task\" minWidth={400}>Task</TableColumn>\n                                <TableColumn key=\"created\" align='end'>Created On</TableColumn>\n                                <TableColumn key=\"updated\" align='end'>Last Updated</TableColumn>\n                            </TableHeader>\n                            <TableBody>\n                                {taskHistory.map((task) => (\n                                    <TableRow key={task.id}>\n                                        <TableCell>{task.text}</TableCell>\n                                        <TableCell>\n                                            {isValidDate(task.created_at) ? formatDistanceToNow(new Date(task.created_at), { addSuffix: true }) : 'Invalid date'}\n                                        </TableCell>\n                                        <TableCell>\n                                            {isValidDate(task.updated_at) ? formatDistanceToNow(new Date(task.updated_at), { addSuffix: true }) : 'Invalid date'}\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n\n                        </Table> */}\n                    </ModalBody>\n                </ModalContent>\n                <ModalFooter>\n                    <Button onClick={() => setTaskHistoryOpen(false)}>Close</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    );\n};\n\nexport default FloatingButton;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 768, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 773, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/subtaskitem.tsx"],"sourcesContent":["// SubtaskItem.tsx\n\nimport React, { useState } from 'react';\nimport { Draggable } from '@hello-pangea/dnd';\nimport { GripVertical, MoreVertical } from 'lucide-react';\nimport { Button, Dropdown, DropdownItem, DropdownMenu, DropdownTrigger } from '@nextui-org/react';\nimport { Subtask, QuadrantType } from '../customtypes';\n\ninterface SubtaskItemProps {\n  subtask: Subtask;\n  taskId: number;\n  index: number;\n  quadrant: QuadrantType;\n  toggleSubtaskCompletion: () => void;\n  deleteSubtask: () => void;\n  setSubtaskToEdit: () => void;\n  onSubtaskModalOpen: () => void;  // Added this prop\n}\n\nconst SubtaskItem: React.FC<SubtaskItemProps> = ({\n  subtask,\n  taskId,\n  index,\n  quadrant,\n  toggleSubtaskCompletion,\n  deleteSubtask,\n  setSubtaskToEdit,\n  onSubtaskModalOpen, // Added this prop\n}) => {\n  const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n\n  const handleOpenChange = (subtaskId: number, open: boolean) => {\n    setOpenDropdownId(open ? subtaskId : null);\n  };\n\n  const handleEditSubtask = () => {\n    setSubtaskToEdit();       // Set the subtask to edit\n    onSubtaskModalOpen();     // Open the modal\n  };\n\n  \n\n  return (\n    <Draggable key={subtask.id} draggableId={`subtask-${subtask.id}`} index={index}>\n      {(provided, snapshot) => (\n        <li\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          className={`flex items-start justify-between my-4 pl-2 rounded ${snapshot.isDragging ? 'bg-gray-700' : 'hover:bg-default-100'\n          }`}\n        >\n          <div className=\"flex items-center flex-grow w-full\">\n            <span {...provided.dragHandleProps} className=\"mr-2 cursor-move\">\n              <GripVertical size={16} />\n            </span>\n            <input\n              type=\"checkbox\"\n              checked={subtask.completed}\n              onChange={toggleSubtaskCompletion}\n              className=\"mr-2\"\n            />\n            <span\n              className={`flex-grow ${subtask.completed ? 'line-through text-gray-500' : ''}`}\n              style={{ overflowWrap: 'anywhere' }}\n            >\n              {subtask.text}\n            </span>\n          </div>\n          <div>\n            <Dropdown\n              shouldBlockScroll={false}\n              isOpen={openDropdownId === subtask.id}\n              onOpenChange={(open) => handleOpenChange(subtask.id, open)}\n            >\n              <DropdownTrigger>\n                <Button size=\"sm\" variant=\"light\" style={{ minWidth: 'auto'}}>\n                  <MoreVertical size={16}  />                </Button>\n              </DropdownTrigger>\n              <DropdownMenu closeOnSelect={true}>\n                <DropdownItem onClick={handleEditSubtask}>Edit Subtask</DropdownItem>\n                <DropdownItem onClick={deleteSubtask} className=\"text-red-500\">\n                  Delete Subtask\n                </DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        </li>\n      )}\n    </Draggable>\n  );\n};\n\nexport default SubtaskItem;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;;;;;;;;;;;;;;;;AAmBlB,MAAM,cAA0C,CAAC,EAC/C,OAAO,EACP,MAAM,EACN,KAAK,EACL,QAAQ,EACR,uBAAuB,EACvB,aAAa,EACb,gBAAgB,EAChB,kBAAkB,EACnB;;IACC,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAEpE,MAAM,mBAAmB,CAAC,WAAmB;QAC3C,kBAAkB,OAAO,YAAY;IACvC;IAEA,MAAM,oBAAoB;QACxB,oBAA0B,0BAA0B;QACpD,sBAA0B,iBAAiB;IAC7C;IAIA,qBACE,6LAAC,iKAAA,CAAA,YAAS;QAAkB,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;QAAE,OAAO;kBACtE,CAAC,UAAU,yBACV,6LAAC;gBACC,KAAK,SAAS,QAAQ;gBACrB,GAAG,SAAS,cAAc;gBAC3B,WAAW,CAAC,mDAAmD,EAAE,SAAS,UAAU,GAAG,gBAAgB,uBACtG,CAAC;;kCAEF,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAM,GAAG,SAAS,eAAe;gCAAE,WAAU;0CAC5C,cAAA,6LAAC,yNAAA,CAAA,eAAY;oCAAC,MAAM;;;;;;;;;;;0CAEtB,6LAAC;gCACC,MAAK;gCACL,SAAS,QAAQ,SAAS;gCAC1B,UAAU;gCACV,WAAU;;;;;;0CAEZ,6LAAC;gCACC,WAAW,CAAC,UAAU,EAAE,QAAQ,SAAS,GAAG,+BAA+B,GAAG,CAAC;gCAC/E,OAAO;oCAAE,cAAc;gCAAW;0CAEjC,QAAQ,IAAI;;;;;;;;;;;;kCAGjB,6LAAC;kCACC,cAAA,6LAAC,4NAAA,CAAA,WAAQ;4BACP,mBAAmB;4BACnB,QAAQ,mBAAmB,QAAQ,EAAE;4BACrC,cAAc,CAAC,OAAS,iBAAiB,QAAQ,EAAE,EAAE;;8CAErD,6LAAC,2OAAA,CAAA,kBAAe;8CACd,cAAA,6LAAC,sNAAA,CAAA,SAAM;wCAAC,MAAK;wCAAK,SAAQ;wCAAQ,OAAO;4CAAE,UAAU;wCAAM;;0DACzD,6LAAC,6NAAA,CAAA,eAAY;gDAAC,MAAM;;;;;;4CAAO;;;;;;;;;;;;8CAE/B,6LAAC,qOAAA,CAAA,eAAY;oCAAC,eAAe;;sDAC3B,6LAAC,kOAAA,CAAA,eAAY;4CAAC,SAAS;sDAAmB;;;;;;sDAC1C,6LAAC,kOAAA,CAAA,eAAY;4CAAC,SAAS;4CAAe,WAAU;sDAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OArC3D,QAAQ,EAAE;;;;;AA+C9B;GAvEM;KAAA;uCAyES"}},
    {"offset": {"line": 944, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 949, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/taskitem.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Draggable } from '@hello-pangea/dnd';\nimport { ChevronDown, ChevronUp, GripVertical, MoreVertical } from 'lucide-react';\nimport { Button, ButtonGroup, Dropdown, DropdownItem, DropdownMenu, DropdownSection, DropdownTrigger, Spinner } from '@nextui-org/react';\nimport { Task, QuadrantType } from '../customtypes';\nimport { usePremium } from './premiumcontext';\n\ninterface TaskItemProps {\n    className?: string; \n    isArchived: boolean;\n    unarchiveTask?: () => void;\n    user: any;\n    task: Task;\n    quadrant: QuadrantType;\n    index: number;\n    expandedTaskIds: number[];\n    toggleTaskCompletion: (quadrant: QuadrantType, taskId: number) => void;\n    toggleTaskExpansion: (taskId: number) => void;\n    setTaskToEdit: (task: Task, quadrant: QuadrantType) => void;\n    deleteTask: (quadrant: QuadrantType, taskId: number) => void;\n    renderSubtasks: (task: Task) => JSX.Element;\n    archiveTask: () => void;\n    moveTaskToQuadrant: (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => void;\n    onTaskModalOpen: () => void;\n    onTaskModalClose: () => void;\n    handleBreakdownTaskWithAI: (quadrant: QuadrantType, taskId: number, taskText: string) => Promise<void>;\n}\n\nconst TaskItem: React.FC<TaskItemProps> = ({\n    user,\n    task,\n    quadrant,\n    index,\n    expandedTaskIds,\n    toggleTaskCompletion,\n    toggleTaskExpansion,\n    setTaskToEdit,\n    deleteTask,\n    archiveTask,\n    moveTaskToQuadrant,\n    renderSubtasks,\n    onTaskModalOpen,\n    onTaskModalClose,\n    handleBreakdownTaskWithAI\n}) => {\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n    const [loadingAI, setLoadingAI] = useState(false);\n    const { isPremium } = usePremium(); // Access premium status\n    const isBlurred = !isPremium && user; // Use premium status in logic\n\n    const quadrants: Record<QuadrantType, string> = {\n        do: 'Do (Urgent & Important)',\n        decide: 'Decide (Not Urgent & Important)',\n        delegate: 'Delegate (Urgent & Not Important)',\n        delete: 'Delete (Not Urgent & Not Important)',\n        unsorted: 'Unsorted Tasks',\n    };\n\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);\n    };\n\n    const handleAIBreakdown = async () => {\n        if (loadingAI) return;\n        setLoadingAI(true);\n        try {\n            await handleBreakdownTaskWithAI(quadrant, task.id, task.text);\n        } catch (error) {\n            console.error(\"Error in AI breakdown:\", error);\n        } finally {\n            setLoadingAI(false);\n        }\n    };\n\n    return (\n        <Draggable key={task.id} draggableId={task.id.toString()} index={index}>\n            {(provided, snapshot) => (\n                <li\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    data-task-id={task.id}\n                    data-quadrant={quadrant}\n                    className={`flex flex-col items-start justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-700' : 'hover:bg-default-100'} ${\n                        isBlurred ? 'blur-sm' : ''\n                    }`} // Apply blur class if not premium\n                >\n                    <div className=\"flex items-start justify-between w-full\">\n                        <div className=\"flex items-start flex-grow\">\n                            <div className=\"flex items-center mt-2 flex-grow\">\n                                <span {...provided.dragHandleProps} className=\"mr-2 cursor-move\">\n                                    <GripVertical size={16} />\n                                </span>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={task.completed}\n                                    onChange={() => toggleTaskCompletion(quadrant, task.id)}\n                                    className=\"mr-2\"\n                                    title=\"Toggle task completion\"\n                                />\n                            </div>\n                            <span\n                                id={`task-text-${task.id}`}\n                                style={{ overflowWrap: 'anywhere' }}\n                                className={`w-full text-lg ${task.completed ? 'line-through' : ''} ${task.archived ? 'opacity-50 italic' : 'opacity-100'}`}\n                            >\n                                {task.text}\n                            </span>\n                        </div>\n\n                        <div className=\"flex items-center\">\n                            {task.subtasks?.length > 0 && (\n                                <span className=\"text-xs text-default-500 ml-2\">\n                                    {task.subtasks?.filter(sub => sub.completed).length}/{task.subtasks.length}\n                                </span>\n                            )}\n                            <ButtonGroup>\n                                <Button\n                                    style={{ minWidth: 'auto' }}\n                                    size=\"sm\"\n                                    variant=\"light\"\n                                    onClick={() => toggleTaskExpansion(task.id)}\n                                >\n                                    {expandedTaskIds.includes(task.id) ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\n                                </Button>\n                                <Dropdown\n                                    shouldBlockScroll={false}\n                                    backdrop={\"opaque\"}\n                                    // scrollRef={scrollRef}\n                                    isOpen={openDropdownId === task.id}\n                                    onOpenChange={(open) => handleOpenChange(task.id, open)}\n                                >\n                                    <DropdownTrigger>\n                                        <Button style={{ minWidth: 'auto' }} size=\"sm\" variant=\"light\">\n                                            <MoreVertical size={16} className=\"h-4 w-4\" />\n                                        </Button>\n                                    </DropdownTrigger>\n                                    <DropdownMenu\n                                        style={{ maxHeight: '40vh', overflowY: 'auto' }}\n                                        closeOnSelect={true}\n                                    >\n                                        <DropdownItem onClick={() => {\n                                            setTaskToEdit(task, quadrant);\n                                            onTaskModalOpen();\n                                        }}>\n                                            Edit Task\n                                        </DropdownItem>\n                                        <DropdownSection title=\"AI Tools\">\n                                            <DropdownItem\n                                                onClick={handleAIBreakdown}\n                                                isDisabled={loadingAI}\n                                            >\n                                                {loadingAI ? (\n                                                    <>\n                                                        <Spinner size=\"sm\" />\n                                                        Breaking down...\n                                                    </>\n                                                ) : (\n                                                    <>Breakdown with AI</>\n                                                )}\n                                            </DropdownItem>\n                                        </DropdownSection>\n                                        <DropdownSection title=\"Move\">\n                                            {Object.keys(quadrants).map((targetQuadrant) => (\n                                                <DropdownItem\n                                                    key={targetQuadrant}\n                                                    onClick={() => moveTaskToQuadrant(quadrant, task.id, targetQuadrant as QuadrantType)}\n                                                    isDisabled={targetQuadrant === quadrant}\n                                                >\n                                                    Move to {quadrants[targetQuadrant as QuadrantType]}\n                                                </DropdownItem>\n                                            ))}\n                                        </DropdownSection>\n                                        {user && (\n                                            <DropdownSection title=\"Archive\">\n                                                <DropdownItem onClick={archiveTask}>Archive Task</DropdownItem>\n                                            </DropdownSection>\n                                        )}\n                                        <DropdownSection title=\"Danger zone\">\n                                            <DropdownItem onClick={() => deleteTask(quadrant, task.id)} className=\"text-red-500\">\n                                                Delete Task\n                                            </DropdownItem>\n                                        </DropdownSection>\n                                    </DropdownMenu>\n                                </Dropdown>\n                            </ButtonGroup>\n                        </div>\n                    </div>\n                    {expandedTaskIds.includes(task.id) && renderSubtasks(task)}\n                </li>\n            )}\n        </Draggable>\n    );\n};\n\nexport default TaskItem;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1295, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1300, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/floatingwindow.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface PiPWindowProps {\n  taskText: string;\n  isVisible: boolean;\n  onClose: () => void;\n}\n\nconst PiPWindow: React.FC<PiPWindowProps> = ({ taskText, isVisible, onClose }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [pipActive, setPipActive] = useState(false);\n\n  const openPictureInPicture = async (taskText: string) => {\n    if (!videoRef.current) return;\n    \n    try {\n      // Create a canvas to render the task text\n      const canvas = document.createElement('canvas');\n      canvas.width = 400;\n      canvas.height = 180;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        const renderTask = () => {\n          // Clear the canvas\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          // Background\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          // Text content\n          ctx.fillStyle = '#333333';\n          ctx.font = '16px Inter';\n          ctx.fillText('Urgent Task:', 20, 40);\n          ctx.font = '20px Inter';\n          ctx.fillText(taskText, 20, 80);\n          ctx.font = '8px Inter';\n          ctx.fillText('powered by Zendo', 20, 160);\n        };\n\n        renderTask();\n\n        // Stop any previous streams before assigning a new one\n        if (videoRef.current.srcObject) {\n          (videoRef.current.srcObject as MediaStream).getTracks().forEach(track => track.stop());\n        }\n\n        // Capture the canvas as a stream and set it to the video element\n        const stream = canvas.captureStream();\n        videoRef.current.srcObject = stream;\n\n        // Ensure the video plays before requesting Picture-in-Picture\n        await videoRef.current.play();\n        await videoRef.current.requestPictureInPicture();\n\n        setPipActive(true); // Set PiP as active\n      }\n    } catch (error) {\n      console.error('Error entering PiP:', error);\n    }\n  };\n\n  // Handle PiP close event\n  useEffect(() => {\n    const handlePipClose = () => {\n      setPipActive(false);\n      onClose();\n    };\n\n    document.addEventListener('leavepictureinpicture', handlePipClose);\n\n    return () => {\n      document.removeEventListener('leavepictureinpicture', handlePipClose);\n    };\n  }, [onClose]);\n\n  // Watch for visibility change and toggle PiP\n  useEffect(() => {\n    if (isVisible && taskText) {\n      openPictureInPicture(taskText);\n    }\n  }, [isVisible, taskText]);\n\n  return <video ref={videoRef} style={{ display: 'none' }} muted playsInline />;\n};\n\nexport default PiPWindow;\n"],"names":[],"mappings":";;;;;;;;;AAQA,MAAM,YAAsC,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE;;IAC3E,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAoB;IAC1C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,uBAAuB,OAAO;QAClC,IAAI,CAAC,SAAS,OAAO,EAAE;QAEvB,IAAI;YACF,0CAA0C;YAC1C,MAAM,SAAS,SAAS,aAAa,CAAC;YACtC,OAAO,KAAK,GAAG;YACf,OAAO,MAAM,GAAG;YAChB,MAAM,MAAM,OAAO,UAAU,CAAC;YAE9B,IAAI,KAAK;gBACP,MAAM,aAAa;oBACjB,mBAAmB;oBACnB,IAAI,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;oBAC/C,aAAa;oBACb,IAAI,SAAS,GAAG;oBAChB,IAAI,QAAQ,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;oBAC9C,eAAe;oBACf,IAAI,SAAS,GAAG;oBAChB,IAAI,IAAI,GAAG;oBACX,IAAI,QAAQ,CAAC,gBAAgB,IAAI;oBACjC,IAAI,IAAI,GAAG;oBACX,IAAI,QAAQ,CAAC,UAAU,IAAI;oBAC3B,IAAI,IAAI,GAAG;oBACX,IAAI,QAAQ,CAAC,oBAAoB,IAAI;gBACvC;gBAEA;gBAEA,uDAAuD;gBACvD,IAAI,SAAS,OAAO,CAAC,SAAS,EAAE;oBAC7B,SAAS,OAAO,CAAC,SAAS,CAAiB,SAAS,GAAG,OAAO,CAAC,CAAA,QAAS,MAAM,IAAI;gBACrF;gBAEA,iEAAiE;gBACjE,MAAM,SAAS,OAAO,aAAa;gBACnC,SAAS,OAAO,CAAC,SAAS,GAAG;gBAE7B,8DAA8D;gBAC9D,MAAM,SAAS,OAAO,CAAC,IAAI;gBAC3B,MAAM,SAAS,OAAO,CAAC,uBAAuB;gBAE9C,aAAa,OAAO,oBAAoB;YAC1C;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uBAAuB;QACvC;IACF;IAEA,yBAAyB;IACzB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,iBAAiB;YACrB,aAAa;YACb;QACF;QAEA,SAAS,gBAAgB,CAAC,yBAAyB;QAEnD,OAAO;YACL,SAAS,mBAAmB,CAAC,yBAAyB;QACxD;IACF,GAAG;QAAC;KAAQ;IAEZ,6CAA6C;IAC7C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,aAAa,UAAU;YACzB,qBAAqB;QACvB;IACF,GAAG;QAAC;QAAW;KAAS;IAExB,qBAAO,6LAAC;QAAM,KAAK;QAAU,OAAO;YAAE,SAAS;QAAO;QAAG,KAAK;QAAC,WAAW;;;;;;AAC5E;GA3EM;KAAA;uCA6ES"}},
    {"offset": {"line": 1394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1399, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/EisenhowerMatrix.tsx"],"sourcesContent":["// EisenhowerMatrix.tsx\n\n\"use client\";\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Button } from '@nextui-org/button';\nimport { Input } from '@nextui-org/input';\nimport { Card, CardHeader } from '@nextui-org/card';\nimport { Flame, Plus } from 'lucide-react';\nimport { DragDropContext, Droppable, DropResult } from '@hello-pangea/dnd';\nimport { Link, Spinner, Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, useDisclosure } from \"@nextui-org/react\";\nimport { useTheme } from \"next-themes\";\nimport FloatingButton from './floatingbutton';\nimport { useUser } from '@auth0/nextjs-auth0/client'\nimport { usePremium } from './premiumcontext'; // Import usePremium hook\nimport { createClient, SupabaseClient, PostgrestError } from '@supabase/supabase-js'\nimport SubtaskItem from './subtaskitem';\nimport TaskItem from './taskitem';\nimport { SupabaseTask, Task, QuadrantType, TaskEditInfo, SubtaskEditInfo, InsertTask } from '../customtypes';\nimport PiPWindow from './floatingwindow';\nimport { Popover, PopoverTrigger, PopoverContent } from \"@nextui-org/react\";\n\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);\n\n// Define Quadrants\nconst quadrants: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\n// Mental model explanations for each quadrant\nconst quadrantExplanations: Record<QuadrantType, string> = {\n    do: \"Require immediate attention and have significant consequences if not completed.\",\n    decide: \"Contribute to your long-term goals but don't require immediate action.\",\n    delegate: \"Need to be done soon but can be handled by someone else.\",\n    delete: \"Do not contribute to your goals and can be removed.\",\n    unsorted: \"Tasks that need to be categorized.\"\n};\nconst EisenhowerMatrix: React.FC = () => {\n    const { user } = useUser();\n    const { isPremium } = usePremium(); // Use the hook to access premium status\n    const { isOpen: isTaskModalOpen, onOpen: onTaskModalOpen, onClose: onTaskModalClose } = useDisclosure();\n    const { isOpen: isSubtaskModalOpen, onOpen: onSubtaskModalOpen, onClose: onSubtaskModalClose } = useDisclosure();\n    const { isOpen: isAddTaskModalOpen, onOpen: onAddTaskModalOpen, onClose: onAddTaskModalClose } = useDisclosure();\n\n    const { theme } = useTheme();\n\n    const [streak, setStreak] = useState(0);\n\n    const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [archivedTasks, setArchivedTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n\n    const [firstUrgentTask, setFirstUrgentTask] = useState<string | null>(null);\n    const [pipVisible, setPipVisible] = useState(false);\n\n\n    useEffect(() => {\n        const nonArchivedTasks = tasks.do.filter(task => !task.archived); // Only consider non-archived tasks\n        if (nonArchivedTasks.length > 0) {\n            setFirstUrgentTask(nonArchivedTasks[0].text); // Set the first non-archived task\n            setPipVisible(true); // Show PiP when task exists\n        } else {\n            setFirstUrgentTask(null);\n            setPipVisible(false); // Hide PiP when no task exists\n        }\n    }, [tasks]);\n\n\n    const [isArchiveMode, setIsArchiveMode] = useState(false);\n    const [newTask, setNewTask] = useState('');\n    const [newSubtask, setNewSubtask] = useState('');\n    const [selectedQuadrantForAdd, setSelectedQuadrantForAdd] = useState<QuadrantType | null>(null);\n    const [taskToEdit, setTaskToEditState] = useState<TaskEditInfo | null>(null);\n    const [subtaskToEdit, setSubtaskToEdit] = useState<SubtaskEditInfo | null>(null);\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n    const [expandedTaskIds, setExpandedTaskIds] = useState<number[]>([]);\n    const [loadingAI, setLoadingAI] = useState(false); // Track AI loading state\n    const videoRef = useRef<HTMLVideoElement>(null);\n\n    // Wrapper function to set task to edit\n    const setTaskToEdit = (task: Task, quadrant: QuadrantType) => {\n        setTaskToEditState({ task, quadrant });\n    };\n\n    // Handle Key Down Events for Accessibility\n    const handleKeyDown = (e: React.KeyboardEvent, task: Task, quadrant: QuadrantType) => {\n        switch (e.key) {\n            case 'e':\n                setTaskToEdit(task, quadrant);\n                onTaskModalOpen();\n                break;\n            case 'Delete':\n            case 'Backspace':\n                deleteTask(quadrant, task.id);\n                break;\n            default:\n                break;\n        }\n        setOpenDropdownId(null);  // Close dropdown manually after any action\n    };\n\n    // Handle Subtask Input Change\n    const handleSubtaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (subtaskToEdit) {\n            setSubtaskToEdit({\n                ...subtaskToEdit,\n                subtask: { ...subtaskToEdit.subtask, text: e.target.value }\n            });\n        }\n    };\n\n    // Handle Task Input Change\n    const handleTaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (taskToEdit) {\n            setTaskToEditState(prev => ({\n                ...prev!,\n                task: { ...prev!.task, text: e.target.value },\n            }));\n        }\n    };\n\n    // Function to validate and parse dates\n    const isValidDate = (date: string | number | Date) => {\n        const parsedDate = new Date(date);\n        // Check if date is valid\n        return !isNaN(parsedDate.getTime());\n    };\n\n    // Function to log invalid dates for debugging\n    const handleInvalidDate = (taskId: number, fieldName: string, invalidValue: any) => {\n        console.warn(`Invalid date value for task ID ${taskId}, field ${fieldName}:`, invalidValue);\n    };\n\n\n    useEffect(() => {\n        const fetchAndMergeTasks = async () => {\n            if (user) {\n                try {\n                    // Fetch both archived and non-deleted tasks when archive mode is enabled\n                    let query = supabase\n                        .from('tasks')\n                        .select('*')\n                        .eq('user_id', user.sub)\n                        .eq('deleted', false);  // Ensure we only fetch tasks that are not deleted\n\n                    if (!isArchiveMode) {\n                        query = query.eq('archived', false); // Only fetch non-archived tasks if archive mode is off\n                    }\n\n                    const { data: supabaseTasks, error } = await query;\n\n                    if (error) {\n                        console.error('Error fetching tasks from Supabase:', error);\n                        return;\n                    }\n\n                    const activeTasks: Record<QuadrantType, Task[]> = {\n                        do: [],\n                        decide: [],\n                        delegate: [],\n                        delete: [],\n                        unsorted: [],\n                    };\n\n                    const archivedTasksContainer: Record<QuadrantType, Task[]> = {\n                        do: [],\n                        decide: [],\n                        delegate: [],\n                        delete: [],\n                        unsorted: [],\n                    };\n\n                    supabaseTasks.forEach((supTask) => {\n                        const validCreatedAt = isValidDate(supTask.created_at) ? new Date(supTask.created_at) : new Date();\n                        const validUpdatedAt = isValidDate(supTask.updated_at) ? new Date(supTask.updated_at) : new Date();\n\n                        const task: Task = {\n                            id: supTask.id,\n                            text: supTask.text,\n                            completed: supTask.completed,\n                            subtasks: supTask.subtasks || [],\n                            archived: supTask.archived,\n                            user_id: supTask.user_id,\n                            quadrant: supTask.quadrant,\n                            created_at: validCreatedAt,\n                            updated_at: validUpdatedAt,\n                            deleted: supTask.deleted,\n                            completed_at: null\n                        };\n\n                        if (supTask.archived) {\n                            archivedTasksContainer[supTask.quadrant as QuadrantType].push(task);\n                        } else {\n                            activeTasks[supTask.quadrant as QuadrantType].push(task);\n                        }\n                    });\n\n                    setTasks(activeTasks);\n                    setArchivedTasks(archivedTasksContainer);\n                } catch (err) {\n                    console.error('Error fetching and merging tasks:', err);\n                }\n            } else {\n                const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n                if (storedTasks) {\n                    const parsedTasks = JSON.parse(storedTasks);\n                    // Filter out deleted tasks\n                    const nonDeletedTasks = (Object.fromEntries(\n                        Object.entries(parsedTasks).map(([quadrant, tasks]) => [\n                            quadrant,\n                            (tasks as Task[]).filter((task: Task) => !task.deleted),\n                        ])\n                    ) as Record<QuadrantType, Task[]>);\n\n                    setTasks(nonDeletedTasks);  // Set state with correctly typed tasks\n                }\n            }\n        };\n\n        fetchAndMergeTasks();\n        \n    }, [user, isArchiveMode]);\n\n    // Update localStorage whenever tasks change (only when not logged in)\n    useEffect(() => {\n        if (!user) {\n            window.localStorage.setItem('eisenhowerMatrixTasks', JSON.stringify(tasks));\n        }\n    }, [tasks, user]);\n\n    // Function to toggle dropdown based on task ID\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);\n    };\n\n    // Add Subtask\n    const addSubtask = async (quadrant: QuadrantType, taskId: number) => {\n        if (newSubtask.trim()) {\n            const task = tasks[quadrant].find((task) => task.id === taskId);\n            if (task) {\n                const newSubtaskObj = { id: Date.now(), text: newSubtask.trim(), completed: false };\n                const newSubtasks = [...task.subtasks, newSubtaskObj];\n\n                if (user) {\n                    try {\n                        const { error } = await supabase\n                            .from('tasks')\n                            .update({ subtasks: newSubtasks })\n                            .eq('id', taskId);\n\n                        if (error) {\n                            console.error('Error updating subtasks in Supabase:', error);\n                        } else {\n                            // Update local state only after successful DB update\n                            setTasks((prev) => ({\n                                ...prev,\n                                [quadrant]: prev[quadrant].map((t) =>\n                                    t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                                ),\n                            }));\n                        }\n                    } catch (err) {\n                        console.error('Error during Supabase update:', err);\n                    }\n                } else {\n                    // Update local state\n                    setTasks((prev) => ({\n                        ...prev,\n                        [quadrant]: prev[quadrant].map((t) =>\n                            t.id === taskId\n                                ? { ...t, subtasks: newSubtasks }\n                                : t\n                        ),\n                    }));\n                }\n            }\n            setNewSubtask('');\n        }\n    };\n\n    // Toggle Subtask Completion\n    const toggleSubtaskCompletion = async (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        const task = tasks[quadrant].find((task) => task.id === taskId);\n        if (task) {\n            const newSubtasks = task.subtasks.map((subtask) =>\n                subtask.id === subtaskId ? { ...subtask, completed: !subtask.completed } : subtask\n            );\n            if (user) {\n                try {\n                    const { error } = await supabase\n                        .from('tasks')\n                        .update({ subtasks: newSubtasks })\n                        .eq('id', taskId);\n\n                    if (error) {\n                        console.error('Error updating subtasks in Supabase:', error);\n                    } else {\n                        // Update local state\n                        setTasks((prev) => ({\n                            ...prev,\n                            [quadrant]: prev[quadrant].map((t) =>\n                                t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                            ),\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error during Supabase update:', err);\n                }\n            } else {\n                // Update local state\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((t) =>\n                        t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                    ),\n                }));\n            }\n        }\n    };\n\n    // Toggle Task Completion\n    const toggleTaskCompletion = async (quadrant: QuadrantType, taskId: number) => {\n        // Find the task in the current state\n        const task = tasks[quadrant].find((task) => task.id === taskId);\n        \n        if (!task) return;\n    \n        // Determine if the task is being completed or uncompleted\n        const isCompleted = !task.completed;\n        const completedAt = isCompleted ? new Date().toISOString() : null; // Set completed_at to current time or null\n    \n        // Update local state immediately\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((t) =>\n                t.id === taskId ? { ...t, completed: isCompleted, completed_at: completedAt } : t\n            ),\n        }));\n    \n        // If user is authenticated, update the task in the database\n        if (user) {\n            try {\n                const { error } = await supabase\n                    .from('tasks')\n                    .update({ completed: isCompleted, completed_at: completedAt }) // Update both fields\n                    .eq('id', taskId);\n    \n                if (error) {\n                    console.error('Error toggling task completion in Supabase:', error);\n                }\n            } catch (err) {\n                console.error('Error during Supabase toggle:', err);\n            }\n        }\n    };\n    \n\n    // Delete Task\n    const deleteTask = async (quadrant: QuadrantType, taskId: number) => {\n        // Check if the user is authenticated (assuming user object is available)\n        if (user) {\n            try {\n                // If user is authenticated, update the task in Supabase\n                const { error } = await supabase\n                    .from('tasks')\n                    .update({ deleted: true }) // Update 'deleted' flag or similar\n                    .eq('id', taskId);\n\n                if (error) {\n                    console.error('Error deleting task in Supabase:', error);\n                    return; // Exit if there’s an error\n                }\n\n                // After successful deletion in the database, update the local state\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n                }));\n\n                console.log('Task successfully deleted from Supabase and local state updated');\n            } catch (err) {\n                console.error('Unexpected error while deleting task:', err);\n            }\n        } else {\n            // If the user is not logged in, just update the local state\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n            }));\n\n            console.log('Task deleted locally since user is not logged in');\n        }\n    };\n\n\n    // Archive Task\n    const archiveTask = async (quadrant: QuadrantType, taskId: number) => {\n        if (user) {\n            try {\n                const { error } = await supabase\n                    .from('tasks')\n                    .update({ archived: true })\n                    .eq('id', taskId);\n\n                if (error) {\n                    console.error('Error archiving task in Supabase:', error);\n                } else {\n                    // Get the task to archive from the current tasks state\n                    const taskToArchive = tasks[quadrant].find(task => task.id === taskId);\n\n                    // Proceed only if the task exists\n                    if (taskToArchive) {\n                        // Update the local state to move the task to the archivedTasks list\n                        setTasks((prevTasks) => ({\n                            ...prevTasks,\n                            [quadrant]: prevTasks[quadrant].filter((task) => task.id !== taskId), // Remove from active tasks\n                        }));\n\n                        setArchivedTasks((prevArchived) => ({\n                            ...prevArchived,\n                            [quadrant]: [...prevArchived[quadrant], { ...taskToArchive, archived: true }], // Add to archived tasks\n                        }));\n                    }\n                }\n            } catch (err) {\n                console.error('Error during Supabase archive:', err);\n            }\n        }\n    };\n\n\n\n    // Delete Subtask\n    const deleteSubtask = async (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        const task = tasks[quadrant].find((task) => task.id === taskId);\n        if (task) {\n            const newSubtasks = task.subtasks.filter((subtask) => subtask.id !== subtaskId);\n            if (user) {\n                try {\n                    const { error } = await supabase\n                        .from('tasks')\n                        .update({ subtasks: newSubtasks })\n                        .eq('id', taskId);\n\n                    if (error) {\n                        console.error('Error updating subtasks in Supabase:', error);\n                    } else {\n                        // Update local state\n                        setTasks((prev) => ({\n                            ...prev,\n                            [quadrant]: prev[quadrant].map((t) =>\n                                t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                            ),\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error during Supabase update:', err);\n                }\n            } else {\n                // Update local state\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((t) =>\n                        t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                    ),\n                }));\n            }\n        }\n    };\n\n    // Save Edited Task\n    const saveEditedTask = async () => {\n        if (taskToEdit && user) {\n            const { quadrant, task } = taskToEdit;\n\n            try {\n                // Update the task in Supabase\n                const { data, error } = await supabase\n                    .from('tasks')\n                    .update({ text: task.text })\n                    .eq('id', task.id)\n                    .select();\n\n                if (error) {\n                    console.error('Error updating task in Supabase:', error);\n                    return;\n                }\n\n                if (data && data.length > 0) {\n                    // Update local state only after successful DB update\n                    setTasks((prev) => ({\n                        ...prev,\n                        [quadrant]: prev[quadrant].map((t) =>\n                            t.id === task.id ? { ...t, text: task.text } : t\n                        ),\n                    }));\n                    console.log('Task updated successfully in Supabase:', data[0]);\n                }\n            } catch (err) {\n                console.error('Error updating task:', err);\n            }\n\n            // Clear the editing state and close the modal\n            setTaskToEditState(null);\n            onTaskModalClose();\n        } else if (!user) {\n            // If user is not logged in, just update local state\n            if (taskToEdit) {\n                const { quadrant, task } = taskToEdit;\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((t) =>\n                        t.id === task.id ? { ...t, text: task.text } : t\n                    ),\n                }));\n            }\n            setTaskToEditState(null);\n            onTaskModalClose();\n        }\n    };\n\n    // Save Edited Subtask\n    const saveEditedSubtask = async () => {\n        if (subtaskToEdit) {\n            const { quadrant, taskId, subtask } = subtaskToEdit;\n            const task = tasks[quadrant].find((task) => task.id === taskId);\n            if (task) {\n                const newSubtasks = task.subtasks.map((st) =>\n                    st.id === subtask.id ? { ...st, text: subtask.text } : st\n                );\n                if (user) {\n                    try {\n                        const { error } = await supabase\n                            .from('tasks')\n                            .update({ subtasks: newSubtasks })\n                            .eq('id', taskId);\n\n                        if (error) {\n                            console.error('Error updating subtasks in Supabase:', error);\n                        } else {\n                            // Update local state\n                            setTasks((prev) => ({\n                                ...prev,\n                                [quadrant]: prev[quadrant].map((t) =>\n                                    t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                                ),\n                            }));\n                        }\n                    } catch (err) {\n                        console.error('Error during Supabase update:', err);\n                    }\n                } else {\n                    // Update local state\n                    setTasks((prev) => ({\n                        ...prev,\n                        [quadrant]: prev[quadrant].map((t) =>\n                            t.id === taskId ? { ...t, subtasks: newSubtasks } : t\n                        ),\n                    }));\n                }\n                setSubtaskToEdit(null);\n                onSubtaskModalClose();  // Close the modal after saving\n            }\n        }\n    };\n\n    // Toggle Task Expansion\n    const toggleTaskExpansion = (taskId: number) => {\n        setExpandedTaskIds((currentIds) => {\n            if (currentIds.includes(taskId)) {\n                return currentIds.filter(id => id !== taskId);\n            } else {\n                return [...currentIds, taskId];\n            }\n        });\n    };\n\n    const moveTaskToQuadrant = (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => {\n        const sourceTasks = [...tasks[sourceQuadrant]];\n        const taskIndex = sourceTasks.findIndex((task) => task.id === taskId);\n\n        if (taskIndex === -1) return;\n\n        const [task] = sourceTasks.splice(taskIndex, 1);\n        const updatedTargetTasks = [...tasks[targetQuadrant], task];\n\n        setTasks((prevTasks) => ({\n            ...prevTasks,\n            [sourceQuadrant]: sourceTasks,\n            [targetQuadrant]: updatedTargetTasks,\n        }));\n    };\n\n    // Drag and Drop Handler\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // If there's no destination (i.e., task was dropped outside a valid area), do nothing\n        if (!destination) return;\n\n        const sourceQuadrant = source.droppableId as QuadrantType;\n        const destinationQuadrant = destination.droppableId as QuadrantType;\n\n        // Get source task\n        const sourceTask = sourceQuadrant in tasks && source.index in tasks[sourceQuadrant] ? tasks[sourceQuadrant][source.index] : null;\n\n        // If dragging within the same quadrant\n        if (sourceQuadrant === destinationQuadrant) {\n            const reorderedTasks = sourceQuadrant in tasks ? Array.from(tasks[sourceQuadrant]) : [];\n            const [movedTask] = source.index in reorderedTasks ? reorderedTasks.splice(source.index, 1) : [];\n            reorderedTasks.splice(destination.index, 0, movedTask);\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: reorderedTasks,\n            }));\n        } else {\n            // Moving to a different quadrant\n            const sourceTasks = Array.from(tasks[sourceQuadrant]);\n            const [movedTask] = sourceTasks.splice(source.index, 1);\n            const destinationTasks = Array.from(tasks[destinationQuadrant]);\n            destinationTasks.splice(destination.index, 0, movedTask);\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: sourceTasks,\n                [destinationQuadrant]: destinationTasks,\n            }));\n        }\n    };\n\n    // Render Archived Tasks\n    // Function to render archived tasks\n    const renderArchivedTasks = (quadrant: QuadrantType) => (\n        <ul className=\"mt-4\">\n            {archivedTasks[quadrant].length > 0 ? (\n                archivedTasks[quadrant].map((task) => (\n                    <li key={task.id} className=\"flex items-center justify-between mb-2\">\n                        <span className=\"line-through\">{task.text}</span>\n                        <Button\n                            size=\"sm\"\n                            variant=\"light\"\n                            onClick={() => unarchiveTask(quadrant, task.id)} // Implement a function to unarchive the task\n                        >\n                            Unarchive\n                        </Button>\n                    </li>\n                ))\n            ) : (\n                <p>No archived tasks</p>\n            )}\n        </ul>\n    );\n\n\n    // Unarchive Task\n    const unarchiveTask = async (quadrant: QuadrantType, taskId: number) => {\n        if (user) {\n            try {\n                const { error } = await supabase\n                    .from('tasks')\n                    .update({ archived: false })  // Mark task as unarchived\n                    .eq('id', taskId);\n\n                if (error) {\n                    console.error('Error unarchiving task in Supabase:', error);\n                } else {\n                    // Update local state\n                    setArchivedTasks((prevArchived) => {\n                        const updatedArchived = { ...prevArchived };\n                        const taskToUnarchive = updatedArchived[quadrant].find((task) => task.id === taskId);\n                        if (taskToUnarchive) {\n                            setTasks((prevTasks) => ({\n                                ...prevTasks,\n                                [quadrant]: [...prevTasks[quadrant], taskToUnarchive],\n                            }));\n                            updatedArchived[quadrant] = updatedArchived[quadrant].filter((task) => task.id !== taskId);\n                        }\n                        return updatedArchived;\n                    });\n                }\n            } catch (err) {\n                console.error('Error during Supabase unarchive:', err);\n            }\n        }\n    };\n\n\n    // Toggle Archive Mode\n    const showArchivedTasks = () => {\n        setIsArchiveMode(!isArchiveMode);\n    };\n\n    // Render Subtasks\n    const renderSubtasks = (quadrant: QuadrantType, task: Task) => (\n        <Droppable droppableId={`subtasks-${task.id}`} type=\"subtask\">\n            {(provided) => (\n                <ul className=\"pl-2 mt-2 w-full\" ref={provided.innerRef} {...provided.droppableProps}>\n                    {task.subtasks?.map((subtask, index) => (\n                        <SubtaskItem\n                            key={subtask.id}\n                            subtask={subtask}\n                            taskId={task.id}\n                            index={index}\n                            quadrant={quadrant}\n                            toggleSubtaskCompletion={() => toggleSubtaskCompletion(quadrant, task.id, subtask.id)}\n                            deleteSubtask={() => deleteSubtask(quadrant, task.id, subtask.id)}\n                            setSubtaskToEdit={() => {\n                                setSubtaskToEdit({ subtask, taskId: task.id, quadrant });\n                                onSubtaskModalOpen();\n                            }}\n                            onSubtaskModalOpen={onSubtaskModalOpen}\n                        />\n                    ))}\n                    {provided.placeholder}\n                    <div className=\"mt-2 flex items-center\">\n                        <Input\n                            value={newSubtask}\n                            onChange={(e) => setNewSubtask(e.target.value.slice(0, 100))}\n                            placeholder=\"New subtask\"\n                            onKeyDown={(e) => e.key === 'Enter' && addSubtask(quadrant, task.id)}\n                            maxLength={100}\n                        />\n                        <Button onClick={() => addSubtask(quadrant, task.id)} className=\"ml-2\" style={{ minWidth: 'auto' }}>\n                            <Plus size={16} />\n                        </Button>\n                    </div>\n                </ul>\n            )}\n        </Droppable>\n    );\n\n    // Render Individual Task\n    const renderTask = (quadrant: QuadrantType, task: Task, index: number) => {\n        const isBlurred = !isPremium && user; // Blur the task if user is not premium\n\n        const isArchived = task.archived;\n\n        // Apply strikethrough and italic class if the task is archived\n        const taskClassName = isArchived ? 'line-through italic text-default-400' : '';\n\n        return (\n            <TaskItem\n                className={taskClassName}\n                user={user}\n                key={task.id}\n                task={task}\n                quadrant={quadrant}\n                index={index}\n                handleBreakdownTaskWithAI={handleBreakdownTaskWithAI}\n                expandedTaskIds={expandedTaskIds}\n                toggleTaskCompletion={() => toggleTaskCompletion(quadrant, task.id)}\n                toggleTaskExpansion={() => toggleTaskExpansion(task.id)}\n                setTaskToEdit={setTaskToEdit}\n                deleteTask={() => deleteTask(quadrant, task.id)}\n                archiveTask={() => archiveTask(quadrant, task.id)}\n                moveTaskToQuadrant={moveTaskToQuadrant}\n                renderSubtasks={(task: Task) => renderSubtasks(quadrant, task)}\n                onTaskModalOpen={onTaskModalOpen}\n                onTaskModalClose={onTaskModalClose}\n                isArchived={isArchived}\n                unarchiveTask={isArchived ? () => unarchiveTask(quadrant, task.id) : undefined} \n                />\n        );\n    };\n\n    const [lastStreakUpdate, setLastStreakUpdate] = useState<Date | null>(null);\n\n    useEffect(() => {\n        const calculateStreak = () => {\n            const today = new Date();\n            const isToday = (date: Date) => {\n                return (\n                    date.getFullYear() === today.getFullYear() &&\n                    date.getMonth() === today.getMonth() &&\n                    date.getDate() === today.getDate()\n                );\n            };\n\n            // Get all tasks completed today in the \"Do\" quadrant\n            const completedTodayTasks = tasks.do.filter(task => task.completed && isToday(new Date(task.updated_at)));\n\n            // Check if there are tasks completed today and whether the streak has already been updated today\n            if (completedTodayTasks.length > 0 && (!lastStreakUpdate || !isToday(lastStreakUpdate))) {\n                setStreak(streak + 1);\n                setLastStreakUpdate(today);  // Update the last streak update to today\n            } else if (completedTodayTasks.length === 0) {\n                setStreak(0); // Reset streak if no task was completed today\n                setLastStreakUpdate(null);  // Reset the last streak update\n            }\n        };\n\n        calculateStreak();\n    }, [tasks, lastStreakUpdate, streak]);\n\n\n    // Function to handle task breakdown with AI and update the task with subtasks\n    const handleBreakdownTaskWithAI = async (quadrant: QuadrantType, taskId: number, taskText: string) => {\n        setLoadingAI(true); // Show spinner\n        const apiUrl = \"https://api-inference.huggingface.co/models/mistralai/Mistral-Small-Instruct-2409\";\n\n        const prompt = \"Only respond with a numbered list of tasks and nothing else. Break down the following task into minimum of 4 to maximum of 8 subtasks, it must not be a repeat of the main task, each subtask must be a single line and less than 12 words. The subtasks should be manageable for an 18-year-old with focus issues and  ADHD and can be completed within 24 hours:\"\n\n        try {\n            const response = await fetch(apiUrl, {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer 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`, // Add your Hugging Face API key here\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    inputs: `${prompt}: ${taskText}`,\n                }),\n            });\n\n            if (!response.ok) {\n                console.error(\"Error fetching from Hugging Face:\", response.statusText);\n                setLoadingAI(false);\n                return;\n            }\n\n            const data = await response.json(); // Parse the JSON response\n            const generatedText = data[0]?.generated_text || \"\";\n\n            // Split the generated text into lines, remove numbering, asterisks, and filter out empty lines\n            const subtasks = generatedText\n                .split(\"\\n\")\n                .map((line: string) => line.replace(/^\\d+\\.\\s*/, '').replace(/\\*\\*/g, '').trim()) // Remove numbering and asterisks\n                .filter((subtask: string) => subtask.length > 0 && !subtask.includes(prompt)) // Remove empty lines and the prompt\n                .slice(1); // Remove the empty line at the beginning\n\n            if (subtasks.length > 0) {\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((task) =>\n                        task.id === taskId\n                            ? {\n                                ...task,\n                                subtasks: subtasks.map((subtaskText: string, index: number) => ({\n                                    id: Date.now() + index,\n                                    text: subtaskText,\n                                    completed: false,\n                                })),\n                            }\n                            : task\n                    ),\n                }));\n\n                // Automatically expand the task to show generated subtasks\n                setExpandedTaskIds((prev) => [...prev, taskId]);\n            }\n\n            setLoadingAI(false); // Hide spinner\n        } catch (error) {\n            console.error(\"Error calling Hugging Face API:\", error);\n            setLoadingAI(false); // Hide spinner\n        }\n    };\n\n    // Render Quadrant\n    const renderQuadrant = (quadrant: QuadrantType) => (\n        <Droppable droppableId={quadrant} key={quadrant}>\n            {(provided, snapshot) => (\n                <Card\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`p-4 mb-4 ${theme === \"dark\" ? (snapshot.isDraggingOver ? 'bg-zinc-700' : 'bg-zinc-900') : (snapshot.isDraggingOver ? 'bg-white' : 'bg-background')}`}\n                >\n                    <CardHeader className=\"flex justify-between items-center\">\n                        <Popover shadow=\"lg\" containerPadding={8} triggerType=\"tree\" size='sm' backdrop='opaque' placement=\"top\">\n                            <PopoverTrigger className=\"cursor-pointer text-default-500 text-sm\">\n                                {quadrants[quadrant]}\n                            </PopoverTrigger>\n                            <PopoverContent>\n                                <p className=\"p-2 text-xs max-w-[32rem]\">\n                                    {quadrantExplanations[quadrant]}\n                                </p>\n                            </PopoverContent>\n                        </Popover>\n                        <Button\n                            size=\"sm\"\n                            isIconOnly\n                            variant=\"light\"\n                            onClick={() => {\n                                setSelectedQuadrantForAdd(quadrant);\n                                onAddTaskModalOpen();\n                            }}\n                        >\n                            <Plus size={16} />\n                        </Button>\n                    </CardHeader>\n\n                    {/* Check if there are any tasks or archived tasks to show */}\n                    {tasks[quadrant].length === 0 && archivedTasks[quadrant].length === 0 ? (\n                        <div className=\"flex flex-col items-center justify-center py-10 text-center text-default-500\">\n                            <img src=\"/emptystate.png\" className=\"w-10 h-10 mt-2 mx-auto\" alt=\"No tasks\" />\n                            <p className='mt-2 text-default-400 text-sm'>No tasks added yet</p>\n                        </div>\n                    ) : (\n                        <>\n                            <ul className='text-default-90 text-lg'>\n                                {/* Render non-archived tasks */}\n                                {tasks[quadrant].map((task, index) => renderTask(quadrant, task, index))}\n\n                                {/* Render archived tasks if in archive mode */}\n                                {isArchiveMode && archivedTasks[quadrant].map((task, index) => renderTask(quadrant, task, index))}\n                            </ul>\n                        </>\n                    )}\n                    {provided.placeholder}\n                </Card>\n            )}\n        </Droppable>\n    );\n\n    // Add Task to Quadrant\n    const addTaskToQuadrant = async () => {\n        if (newTask.trim() && selectedQuadrantForAdd) {\n            // Define the new task object\n            const newTaskObject: InsertTask = {\n                text: newTask.trim(),\n                completed: false,\n                archived: false,\n                quadrant: selectedQuadrantForAdd,\n                user_id: user?.sub || 'anonymous', // Ensure user_id is handled correctly\n            };\n\n            if (user) {\n                try {\n                    // Insert the new task into Supabase, wrapped in an array\n                    const { data, error }: { data: SupabaseTask[] | null; error: PostgrestError | null } = await supabase\n                        .from('tasks')\n                        .insert([newTaskObject])      // Wrap `newTaskObject` in an array\n                        .select();                    // Ensure the inserted row is returned\n\n                    if (error) {\n                        console.error('Error adding task to Supabase:', error);\n                    } else if (data && data.length > 0) {\n                        console.log(`Task added successfully to Supabase by ${user.name}:`, data);\n\n                        // Update the state only after the task is successfully added to the DB\n                        setTasks((prev) => ({\n                            ...prev,\n                            [selectedQuadrantForAdd]: [\n                                ...prev[selectedQuadrantForAdd],\n                                { ...newTaskObject, id: data[0].id, subtasks: [] }, // Correctly assign 'id' from Supabase and initialize subtasks\n                            ],\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error inserting task into Supabase:', err);\n                }\n            } else {\n                // User is not logged in\n                const localId = Date.now(); // Use a unique local ID as a number\n                const localTask: Task = {\n                    ...newTaskObject, id: localId, subtasks: [],\n                    created_at: new Date(),\n                    updated_at: new Date(),\n                    completed_at: null\n                }; // Initialize subtasks if necessary\n\n                setTasks((prev) => ({\n                    ...prev,\n                    [selectedQuadrantForAdd]: [...prev[selectedQuadrantForAdd], localTask],\n                }));\n            }\n            // Clear the input and close the modal\n            setNewTask('');\n            onAddTaskModalClose();\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"text-center p-4\">\n            {\n                    user ? (\n                        isPremium !== null ? (\n                            isPremium ? (\n                                // For premium users\n                                <>\n                                    <h1 className=\"tracking-tight inline font-semibold text-base mb-16\">\n                                        {(() => {\n                                            const hour = new Date().getHours();\n                                            if (hour >= 5 && hour < 12) {\n                                                return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                            } else if (hour >= 12 && hour < 17) {\n                                                return `Good afternoon, ${user.name}. Ready to power through?`;\n                                            } else if (hour >= 17 && hour < 22) {\n                                                return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                            } else {\n                                                return `Let's get some late-night magic going, ${user.name}!`;\n                                            }\n                                        })()}\n                                    </h1>\n                                </>\n                            ) : (\n                                // For non-premium users\n                                <>\n                                    <h1 className=\"tracking-tight inline font-semibold text-base mb-16\">\n                                        {(() => {\n                                            const hour = new Date().getHours();\n                                            if (hour >= 5 && hour < 12) {\n                                                return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                            } else if (hour >= 12 && hour < 17) {\n                                                return `Good afternoon, ${user.name}. Ready to power through?`;\n                                            } else if (hour >= 17 && hour < 22) {\n                                                return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                            } else {\n                                                return `Let's get some late-night magic going, ${user.name}!`;\n                                            }\n                                        })()}\n                                    </h1>\n                                    <p className='text-default-500 text-sm'>\n                                        Sync across all devices with this account and unlock more features with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>\n                                    </p>\n                                </>\n                            )\n                        ) : (\n                            <Spinner /> // Loading state while premium status is being fetched\n                        )\n                    ) : (\n                        // For non-logged-in users\n                        <>\n                            <h1 className=\"tracking-tight inline font-semibold text-base\">\n                                Prioritize your tasks with the Eisenhower Matrix, and break them down\n                            </h1>\n                            <p className='text-default-500 text-sm mt-4 mb-8'>\n                                No account needed, free forever (more features included with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>)\n                            </p>\n                        </>\n                    )\n                }\n                <div className=\"flex justify-end items-center space-x-4\">\n                    {/* Existing floating button */}\n                    <FloatingButton\n                        tasks={tasks}\n                        showArchivedTasks={showArchivedTasks}\n                        isArchiveMode={isArchiveMode}\n                        user={user}\n                        streak={streak}\n                    />\n                </div>\n            </div>\n\n            {loadingAI && (\n                <div className=\"z-10 fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <Spinner size=\"lg\" />\n                </div>\n            )}\n\n            {/* Render the PiPWindow and pass props */}\n            {firstUrgentTask && (\n                <PiPWindow\n                    taskText={firstUrgentTask}\n                    isVisible={pipVisible}\n                    onClose={() => setPipVisible(false)}  // Handle PiP close event\n                />\n            )}\n\n\n            <Modal isOpen={isAddTaskModalOpen} onClose={onAddTaskModalClose} >\n                <ModalContent>\n                    <ModalHeader>Add Task</ModalHeader>\n                    <ModalBody>\n                        <Input\n                            value={newTask}\n                            onChange={(e) => setNewTask(e.target.value)}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    addTaskToQuadrant();  // Updated function call\n                                } else if (e.key === 'Escape') {\n                                    onAddTaskModalClose();\n                                }\n                            }}\n                            fullWidth\n                            placeholder=\"Enter task name\"\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={addTaskToQuadrant}>Add</Button>  {/* Updated function call */}\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n\n            <Modal isOpen={isTaskModalOpen} onClose={onTaskModalClose}>\n                <ModalContent>\n                    <ModalHeader>Edit Task</ModalHeader>\n                    <ModalBody>\n                        <Input\n                            value={taskToEdit?.task.text || ''}\n                            onChange={handleTaskInputChange}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    saveEditedTask();\n                                } else if (e.key === 'Escape') {\n                                    onTaskModalClose();\n                                }\n                            }}\n                            fullWidth\n                            placeholder=\"Enter new task name\"\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={saveEditedTask}>Save</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            <Modal isOpen={isSubtaskModalOpen} onClose={onSubtaskModalClose}>\n                <ModalContent>\n                    <ModalHeader>Edit Subtask</ModalHeader>\n                    <ModalBody>\n                        <Input\n                            value={subtaskToEdit?.subtask.text || ''}\n                            onChange={handleSubtaskInputChange}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    saveEditedSubtask();\n                                } else if (e.key === 'Escape') {\n                                    onSubtaskModalClose();\n                                }\n                            }}\n                            fullWidth\n                            placeholder=\"Enter new subtask name\"\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={saveEditedSubtask}>Save</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            <div className=\"flex-grow overflow-auto sm:p-0 lg:p-4\">\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {(['do', 'decide', 'delegate', 'delete', 'unsorted'] as QuadrantType[]).map(renderQuadrant)}\n                    </div>\n                </DragDropContext>\n            </div>\n        </div>\n    )\n};\n\nexport default EisenhowerMatrix;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEvB;;;;;;;;;;;;;;;;;AAqBA,6BAA6B;AAC7B,MAAM;AACN,MAAM;AACN,MAAM,WAA2B,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAE3D,mBAAmB;AACnB,MAAM,YAA0C;IAC5C,IAAI;IACJ,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,UAAU;AACd;AAEA,8CAA8C;AAC9C,MAAM,uBAAqD;IACvD,IAAI;IACJ,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,UAAU;AACd;AACA,MAAM,mBAA6B;;IAC/B,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,wKAAA,CAAA,UAAO,AAAD;IACvB,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,gIAAA,CAAA,aAAU,AAAD,KAAK,wCAAwC;IAC5E,MAAM,EAAE,QAAQ,eAAe,EAAE,QAAQ,eAAe,EAAE,SAAS,gBAAgB,EAAE,GAAG,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD;IACpG,MAAM,EAAE,QAAQ,kBAAkB,EAAE,QAAQ,kBAAkB,EAAE,SAAS,mBAAmB,EAAE,GAAG,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD;IAC7G,MAAM,EAAE,QAAQ,kBAAkB,EAAE,QAAQ,kBAAkB,EAAE,SAAS,mBAAmB,EAAE,GAAG,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD;IAE7G,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAErC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgC;QAC7D,IAAI,EAAE;QACN,QAAQ,EAAE;QACV,UAAU,EAAE;QACZ,QAAQ,EAAE;QACV,UAAU,EAAE;IAChB;IACA,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgC;QAC7E,IAAI,EAAE;QACN,QAAQ,EAAE;QACV,UAAU,EAAE;QACZ,QAAQ,EAAE;QACV,UAAU,EAAE;IAChB;IAEA,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IACtE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAG7C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,mBAAmB,MAAM,EAAE,CAAC,MAAM,CAAC,CAAA,OAAQ,CAAC,KAAK,QAAQ,GAAG,mCAAmC;QACrG,IAAI,iBAAiB,MAAM,GAAG,GAAG;YAC7B,mBAAmB,gBAAgB,CAAC,EAAE,CAAC,IAAI,GAAG,kCAAkC;YAChF,cAAc,OAAO,4BAA4B;QACrD,OAAO;YACH,mBAAmB;YACnB,cAAc,QAAQ,+BAA+B;QACzD;IACJ,GAAG;QAAC;KAAM;IAGV,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,wBAAwB,0BAA0B,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAuB;IAC1F,MAAM,CAAC,YAAY,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAuB;IACvE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA0B;IAC3E,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IACpE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACnE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,yBAAyB;IAC5E,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAoB;IAE1C,uCAAuC;IACvC,MAAM,gBAAgB,CAAC,MAAY;QAC/B,mBAAmB;YAAE;YAAM;QAAS;IACxC;IAEA,2CAA2C;IAC3C,MAAM,gBAAgB,CAAC,GAAwB,MAAY;QACvD,OAAQ,EAAE,GAAG;YACT,KAAK;gBACD,cAAc,MAAM;gBACpB;gBACA;YACJ,KAAK;YACL,KAAK;gBACD,WAAW,UAAU,KAAK,EAAE;gBAC5B;YACJ;gBACI;QACR;QACA,kBAAkB,OAAQ,2CAA2C;IACzE;IAEA,8BAA8B;IAC9B,MAAM,2BAA2B,CAAC;QAC9B,IAAI,eAAe;YACf,iBAAiB;gBACb,GAAG,aAAa;gBAChB,SAAS;oBAAE,GAAG,cAAc,OAAO;oBAAE,MAAM,EAAE,MAAM,CAAC,KAAK;gBAAC;YAC9D;QACJ;IACJ;IAEA,2BAA2B;IAC3B,MAAM,wBAAwB,CAAC;QAC3B,IAAI,YAAY;YACZ,mBAAmB,CAAA,OAAQ,CAAC;oBACxB,GAAG,IAAI;oBACP,MAAM;wBAAE,GAAG,KAAM,IAAI;wBAAE,MAAM,EAAE,MAAM,CAAC,KAAK;oBAAC;gBAChD,CAAC;QACL;IACJ;IAEA,uCAAuC;IACvC,MAAM,cAAc,CAAC;QACjB,MAAM,aAAa,IAAI,KAAK;QAC5B,yBAAyB;QACzB,OAAO,CAAC,MAAM,WAAW,OAAO;IACpC;IAEA,8CAA8C;IAC9C,MAAM,oBAAoB,CAAC,QAAgB,WAAmB;QAC1D,QAAQ,IAAI,CAAC,CAAC,+BAA+B,EAAE,OAAO,QAAQ,EAAE,UAAU,CAAC,CAAC,EAAE;IAClF;IAGA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,qBAAqB;YACvB,IAAI,MAAM;gBACN,IAAI;oBACA,yEAAyE;oBACzE,IAAI,QAAQ,SACP,IAAI,CAAC,SACL,MAAM,CAAC,KACP,EAAE,CAAC,WAAW,KAAK,GAAG,EACtB,EAAE,CAAC,WAAW,QAAS,kDAAkD;oBAE9E,IAAI,CAAC,eAAe;wBAChB,QAAQ,MAAM,EAAE,CAAC,YAAY,QAAQ,uDAAuD;oBAChG;oBAEA,MAAM,EAAE,MAAM,aAAa,EAAE,KAAK,EAAE,GAAG,MAAM;oBAE7C,IAAI,OAAO;wBACP,QAAQ,KAAK,CAAC,uCAAuC;wBACrD;oBACJ;oBAEA,MAAM,cAA4C;wBAC9C,IAAI,EAAE;wBACN,QAAQ,EAAE;wBACV,UAAU,EAAE;wBACZ,QAAQ,EAAE;wBACV,UAAU,EAAE;oBAChB;oBAEA,MAAM,yBAAuD;wBACzD,IAAI,EAAE;wBACN,QAAQ,EAAE;wBACV,UAAU,EAAE;wBACZ,QAAQ,EAAE;wBACV,UAAU,EAAE;oBAChB;oBAEA,cAAc,OAAO,CAAC,CAAC;wBACnB,MAAM,iBAAiB,YAAY,QAAQ,UAAU,IAAI,IAAI,KAAK,QAAQ,UAAU,IAAI,IAAI;wBAC5F,MAAM,iBAAiB,YAAY,QAAQ,UAAU,IAAI,IAAI,KAAK,QAAQ,UAAU,IAAI,IAAI;wBAE5F,MAAM,OAAa;4BACf,IAAI,QAAQ,EAAE;4BACd,MAAM,QAAQ,IAAI;4BAClB,WAAW,QAAQ,SAAS;4BAC5B,UAAU,QAAQ,QAAQ,IAAI,EAAE;4BAChC,UAAU,QAAQ,QAAQ;4BAC1B,SAAS,QAAQ,OAAO;4BACxB,UAAU,QAAQ,QAAQ;4BAC1B,YAAY;4BACZ,YAAY;4BACZ,SAAS,QAAQ,OAAO;4BACxB,cAAc;wBAClB;wBAEA,IAAI,QAAQ,QAAQ,EAAE;4BAClB,sBAAsB,CAAC,QAAQ,QAAQ,CAAiB,CAAC,IAAI,CAAC;wBAClE,OAAO;4BACH,WAAW,CAAC,QAAQ,QAAQ,CAAiB,CAAC,IAAI,CAAC;wBACvD;oBACJ;oBAEA,SAAS;oBACT,iBAAiB;gBACrB,EAAE,OAAO,KAAK;oBACV,QAAQ,KAAK,CAAC,qCAAqC;gBACvD;YACJ,OAAO;gBACH,MAAM,cAAc,OAAO,YAAY,CAAC,OAAO,CAAC;gBAChD,IAAI,aAAa;oBACb,MAAM,cAAc,KAAK,KAAK,CAAC;oBAC/B,2BAA2B;oBAC3B,MAAM,kBAAmB,OAAO,WAAW,CACvC,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,UAAU,MAAM,GAAK;4BACnD;4BACC,MAAiB,MAAM,CAAC,CAAC,OAAe,CAAC,KAAK,OAAO;yBACzD;oBAGL,SAAS,kBAAmB,uCAAuC;gBACvE;YACJ;QACJ;QAEA;IAEJ,GAAG;QAAC;QAAM;KAAc;IAExB,sEAAsE;IACtE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,CAAC,MAAM;YACP,OAAO,YAAY,CAAC,OAAO,CAAC,yBAAyB,KAAK,SAAS,CAAC;QACxE;IACJ,GAAG;QAAC;QAAO;KAAK;IAEhB,+CAA+C;IAC/C,MAAM,mBAAmB,CAAC,QAAgB;QACtC,kBAAkB,OAAO,SAAS;IACtC;IAEA,cAAc;IACd,MAAM,aAAa,OAAO,UAAwB;QAC9C,IAAI,WAAW,IAAI,IAAI;YACnB,MAAM,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;YACxD,IAAI,MAAM;gBACN,MAAM,gBAAgB;oBAAE,IAAI,KAAK,GAAG;oBAAI,MAAM,WAAW,IAAI;oBAAI,WAAW;gBAAM;gBAClF,MAAM,cAAc;uBAAI,KAAK,QAAQ;oBAAE;iBAAc;gBAErD,IAAI,MAAM;oBACN,IAAI;wBACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;4BAAE,UAAU;wBAAY,GAC/B,EAAE,CAAC,MAAM;wBAEd,IAAI,OAAO;4BACP,QAAQ,KAAK,CAAC,wCAAwC;wBAC1D,OAAO;4BACH,qDAAqD;4BACrD,SAAS,CAAC,OAAS,CAAC;oCAChB,GAAG,IAAI;oCACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;4CAAE,GAAG,CAAC;4CAAE,UAAU;wCAAY,IAAI;gCAE5D,CAAC;wBACL;oBACJ,EAAE,OAAO,KAAK;wBACV,QAAQ,KAAK,CAAC,iCAAiC;oBACnD;gBACJ,OAAO;oBACH,qBAAqB;oBACrB,SAAS,CAAC,OAAS,CAAC;4BAChB,GAAG,IAAI;4BACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SACH;oCAAE,GAAG,CAAC;oCAAE,UAAU;gCAAY,IAC9B;wBAEd,CAAC;gBACL;YACJ;YACA,cAAc;QAClB;IACJ;IAEA,4BAA4B;IAC5B,MAAM,0BAA0B,OAAO,UAAwB,QAAgB;QAC3E,MAAM,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QACxD,IAAI,MAAM;YACN,MAAM,cAAc,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC,UACnC,QAAQ,EAAE,KAAK,YAAY;oBAAE,GAAG,OAAO;oBAAE,WAAW,CAAC,QAAQ,SAAS;gBAAC,IAAI;YAE/E,IAAI,MAAM;gBACN,IAAI;oBACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;wBAAE,UAAU;oBAAY,GAC/B,EAAE,CAAC,MAAM;oBAEd,IAAI,OAAO;wBACP,QAAQ,KAAK,CAAC,wCAAwC;oBAC1D,OAAO;wBACH,qBAAqB;wBACrB,SAAS,CAAC,OAAS,CAAC;gCAChB,GAAG,IAAI;gCACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;wCAAE,GAAG,CAAC;wCAAE,UAAU;oCAAY,IAAI;4BAE5D,CAAC;oBACL;gBACJ,EAAE,OAAO,KAAK;oBACV,QAAQ,KAAK,CAAC,iCAAiC;gBACnD;YACJ,OAAO;gBACH,qBAAqB;gBACrB,SAAS,CAAC,OAAS,CAAC;wBAChB,GAAG,IAAI;wBACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;gCAAE,GAAG,CAAC;gCAAE,UAAU;4BAAY,IAAI;oBAE5D,CAAC;YACL;QACJ;IACJ;IAEA,yBAAyB;IACzB,MAAM,uBAAuB,OAAO,UAAwB;QACxD,qCAAqC;QACrC,MAAM,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QAExD,IAAI,CAAC,MAAM;QAEX,0DAA0D;QAC1D,MAAM,cAAc,CAAC,KAAK,SAAS;QACnC,MAAM,cAAc,cAAc,IAAI,OAAO,WAAW,KAAK,MAAM,2CAA2C;QAE9G,iCAAiC;QACjC,SAAS,CAAC,OAAS,CAAC;gBAChB,GAAG,IAAI;gBACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;wBAAE,GAAG,CAAC;wBAAE,WAAW;wBAAa,cAAc;oBAAY,IAAI;YAExF,CAAC;QAED,4DAA4D;QAC5D,IAAI,MAAM;YACN,IAAI;gBACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;oBAAE,WAAW;oBAAa,cAAc;gBAAY,GAAG,qBAAqB;iBACnF,EAAE,CAAC,MAAM;gBAEd,IAAI,OAAO;oBACP,QAAQ,KAAK,CAAC,+CAA+C;gBACjE;YACJ,EAAE,OAAO,KAAK;gBACV,QAAQ,KAAK,CAAC,iCAAiC;YACnD;QACJ;IACJ;IAGA,cAAc;IACd,MAAM,aAAa,OAAO,UAAwB;QAC9C,yEAAyE;QACzE,IAAI,MAAM;YACN,IAAI;gBACA,wDAAwD;gBACxD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;oBAAE,SAAS;gBAAK,GAAG,mCAAmC;iBAC7D,EAAE,CAAC,MAAM;gBAEd,IAAI,OAAO;oBACP,QAAQ,KAAK,CAAC,oCAAoC;oBAClD,QAAQ,2BAA2B;gBACvC;gBAEA,oEAAoE;gBACpE,SAAS,CAAC,OAAS,CAAC;wBAChB,GAAG,IAAI;wBACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;oBAC5D,CAAC;gBAED,QAAQ,GAAG,CAAC;YAChB,EAAE,OAAO,KAAK;gBACV,QAAQ,KAAK,CAAC,yCAAyC;YAC3D;QACJ,OAAO;YACH,4DAA4D;YAC5D,SAAS,CAAC,OAAS,CAAC;oBAChB,GAAG,IAAI;oBACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;gBAC5D,CAAC;YAED,QAAQ,GAAG,CAAC;QAChB;IACJ;IAGA,eAAe;IACf,MAAM,cAAc,OAAO,UAAwB;QAC/C,IAAI,MAAM;YACN,IAAI;gBACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;oBAAE,UAAU;gBAAK,GACxB,EAAE,CAAC,MAAM;gBAEd,IAAI,OAAO;oBACP,QAAQ,KAAK,CAAC,qCAAqC;gBACvD,OAAO;oBACH,uDAAuD;oBACvD,MAAM,gBAAgB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;oBAE/D,kCAAkC;oBAClC,IAAI,eAAe;wBACf,oEAAoE;wBACpE,SAAS,CAAC,YAAc,CAAC;gCACrB,GAAG,SAAS;gCACZ,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;4BACjE,CAAC;wBAED,iBAAiB,CAAC,eAAiB,CAAC;gCAChC,GAAG,YAAY;gCACf,CAAC,SAAS,EAAE;uCAAI,YAAY,CAAC,SAAS;oCAAE;wCAAE,GAAG,aAAa;wCAAE,UAAU;oCAAK;iCAAE;4BACjF,CAAC;oBACL;gBACJ;YACJ,EAAE,OAAO,KAAK;gBACV,QAAQ,KAAK,CAAC,kCAAkC;YACpD;QACJ;IACJ;IAIA,iBAAiB;IACjB,MAAM,gBAAgB,OAAO,UAAwB,QAAgB;QACjE,MAAM,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QACxD,IAAI,MAAM;YACN,MAAM,cAAc,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAY,QAAQ,EAAE,KAAK;YACrE,IAAI,MAAM;gBACN,IAAI;oBACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;wBAAE,UAAU;oBAAY,GAC/B,EAAE,CAAC,MAAM;oBAEd,IAAI,OAAO;wBACP,QAAQ,KAAK,CAAC,wCAAwC;oBAC1D,OAAO;wBACH,qBAAqB;wBACrB,SAAS,CAAC,OAAS,CAAC;gCAChB,GAAG,IAAI;gCACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;wCAAE,GAAG,CAAC;wCAAE,UAAU;oCAAY,IAAI;4BAE5D,CAAC;oBACL;gBACJ,EAAE,OAAO,KAAK;oBACV,QAAQ,KAAK,CAAC,iCAAiC;gBACnD;YACJ,OAAO;gBACH,qBAAqB;gBACrB,SAAS,CAAC,OAAS,CAAC;wBAChB,GAAG,IAAI;wBACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;gCAAE,GAAG,CAAC;gCAAE,UAAU;4BAAY,IAAI;oBAE5D,CAAC;YACL;QACJ;IACJ;IAEA,mBAAmB;IACnB,MAAM,iBAAiB;QACnB,IAAI,cAAc,MAAM;YACpB,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;YAE3B,IAAI;gBACA,8BAA8B;gBAC9B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SACzB,IAAI,CAAC,SACL,MAAM,CAAC;oBAAE,MAAM,KAAK,IAAI;gBAAC,GACzB,EAAE,CAAC,MAAM,KAAK,EAAE,EAChB,MAAM;gBAEX,IAAI,OAAO;oBACP,QAAQ,KAAK,CAAC,oCAAoC;oBAClD;gBACJ;gBAEA,IAAI,QAAQ,KAAK,MAAM,GAAG,GAAG;oBACzB,qDAAqD;oBACrD,SAAS,CAAC,OAAS,CAAC;4BAChB,GAAG,IAAI;4BACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,KAAK,EAAE,GAAG;oCAAE,GAAG,CAAC;oCAAE,MAAM,KAAK,IAAI;gCAAC,IAAI;wBAEvD,CAAC;oBACD,QAAQ,GAAG,CAAC,0CAA0C,IAAI,CAAC,EAAE;gBACjE;YACJ,EAAE,OAAO,KAAK;gBACV,QAAQ,KAAK,CAAC,wBAAwB;YAC1C;YAEA,8CAA8C;YAC9C,mBAAmB;YACnB;QACJ,OAAO,IAAI,CAAC,MAAM;YACd,oDAAoD;YACpD,IAAI,YAAY;gBACZ,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;gBAC3B,SAAS,CAAC,OAAS,CAAC;wBAChB,GAAG,IAAI;wBACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,KAAK,EAAE,GAAG;gCAAE,GAAG,CAAC;gCAAE,MAAM,KAAK,IAAI;4BAAC,IAAI;oBAEvD,CAAC;YACL;YACA,mBAAmB;YACnB;QACJ;IACJ;IAEA,sBAAsB;IACtB,MAAM,oBAAoB;QACtB,IAAI,eAAe;YACf,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG;YACtC,MAAM,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;YACxD,IAAI,MAAM;gBACN,MAAM,cAAc,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC,KACnC,GAAG,EAAE,KAAK,QAAQ,EAAE,GAAG;wBAAE,GAAG,EAAE;wBAAE,MAAM,QAAQ,IAAI;oBAAC,IAAI;gBAE3D,IAAI,MAAM;oBACN,IAAI;wBACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;4BAAE,UAAU;wBAAY,GAC/B,EAAE,CAAC,MAAM;wBAEd,IAAI,OAAO;4BACP,QAAQ,KAAK,CAAC,wCAAwC;wBAC1D,OAAO;4BACH,qBAAqB;4BACrB,SAAS,CAAC,OAAS,CAAC;oCAChB,GAAG,IAAI;oCACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;4CAAE,GAAG,CAAC;4CAAE,UAAU;wCAAY,IAAI;gCAE5D,CAAC;wBACL;oBACJ,EAAE,OAAO,KAAK;wBACV,QAAQ,KAAK,CAAC,iCAAiC;oBACnD;gBACJ,OAAO;oBACH,qBAAqB;oBACrB,SAAS,CAAC,OAAS,CAAC;4BAChB,GAAG,IAAI;4BACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAC5B,EAAE,EAAE,KAAK,SAAS;oCAAE,GAAG,CAAC;oCAAE,UAAU;gCAAY,IAAI;wBAE5D,CAAC;gBACL;gBACA,iBAAiB;gBACjB,uBAAwB,+BAA+B;YAC3D;QACJ;IACJ;IAEA,wBAAwB;IACxB,MAAM,sBAAsB,CAAC;QACzB,mBAAmB,CAAC;YAChB,IAAI,WAAW,QAAQ,CAAC,SAAS;gBAC7B,OAAO,WAAW,MAAM,CAAC,CAAA,KAAM,OAAO;YAC1C,OAAO;gBACH,OAAO;uBAAI;oBAAY;iBAAO;YAClC;QACJ;IACJ;IAEA,MAAM,qBAAqB,CAAC,gBAA8B,QAAgB;QACtE,MAAM,cAAc;eAAI,KAAK,CAAC,eAAe;SAAC;QAC9C,MAAM,YAAY,YAAY,SAAS,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QAE9D,IAAI,cAAc,CAAC,GAAG;QAEtB,MAAM,CAAC,KAAK,GAAG,YAAY,MAAM,CAAC,WAAW;QAC7C,MAAM,qBAAqB;eAAI,KAAK,CAAC,eAAe;YAAE;SAAK;QAE3D,SAAS,CAAC,YAAc,CAAC;gBACrB,GAAG,SAAS;gBACZ,CAAC,eAAe,EAAE;gBAClB,CAAC,eAAe,EAAE;YACtB,CAAC;IACL;IAEA,wBAAwB;IACxB,MAAM,YAAY,CAAC;QACf,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG;QAEhC,sFAAsF;QACtF,IAAI,CAAC,aAAa;QAElB,MAAM,iBAAiB,OAAO,WAAW;QACzC,MAAM,sBAAsB,YAAY,WAAW;QAEnD,kBAAkB;QAClB,MAAM,aAAa,kBAAkB,SAAS,OAAO,KAAK,IAAI,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC,OAAO,KAAK,CAAC,GAAG;QAE5H,uCAAuC;QACvC,IAAI,mBAAmB,qBAAqB;YACxC,MAAM,iBAAiB,kBAAkB,QAAQ,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,EAAE;YACvF,MAAM,CAAC,UAAU,GAAG,OAAO,KAAK,IAAI,iBAAiB,eAAe,MAAM,CAAC,OAAO,KAAK,EAAE,KAAK,EAAE;YAChG,eAAe,MAAM,CAAC,YAAY,KAAK,EAAE,GAAG;YAE5C,SAAS,CAAC,OAAS,CAAC;oBAChB,GAAG,IAAI;oBACP,CAAC,eAAe,EAAE;gBACtB,CAAC;QACL,OAAO;YACH,iCAAiC;YACjC,MAAM,cAAc,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe;YACpD,MAAM,CAAC,UAAU,GAAG,YAAY,MAAM,CAAC,OAAO,KAAK,EAAE;YACrD,MAAM,mBAAmB,MAAM,IAAI,CAAC,KAAK,CAAC,oBAAoB;YAC9D,iBAAiB,MAAM,CAAC,YAAY,KAAK,EAAE,GAAG;YAE9C,SAAS,CAAC,OAAS,CAAC;oBAChB,GAAG,IAAI;oBACP,CAAC,eAAe,EAAE;oBAClB,CAAC,oBAAoB,EAAE;gBAC3B,CAAC;QACL;IACJ;IAEA,wBAAwB;IACxB,oCAAoC;IACpC,MAAM,sBAAsB,CAAC,yBACzB,6LAAC;YAAG,WAAU;sBACT,aAAa,CAAC,SAAS,CAAC,MAAM,GAAG,IAC9B,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,qBACzB,6LAAC;oBAAiB,WAAU;;sCACxB,6LAAC;4BAAK,WAAU;sCAAgB,KAAK,IAAI;;;;;;sCACzC,6LAAC,sNAAA,CAAA,SAAM;4BACH,MAAK;4BACL,SAAQ;4BACR,SAAS,IAAM,cAAc,UAAU,KAAK,EAAE;sCACjD;;;;;;;mBANI,KAAK,EAAE;;;;0CAYpB,6LAAC;0BAAE;;;;;;;;;;;IAMf,iBAAiB;IACjB,MAAM,gBAAgB,OAAO,UAAwB;QACjD,IAAI,MAAM;YACN,IAAI;gBACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnB,IAAI,CAAC,SACL,MAAM,CAAC;oBAAE,UAAU;gBAAM,GAAI,0BAA0B;iBACvD,EAAE,CAAC,MAAM;gBAEd,IAAI,OAAO;oBACP,QAAQ,KAAK,CAAC,uCAAuC;gBACzD,OAAO;oBACH,qBAAqB;oBACrB,iBAAiB,CAAC;wBACd,MAAM,kBAAkB;4BAAE,GAAG,YAAY;wBAAC;wBAC1C,MAAM,kBAAkB,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;wBAC7E,IAAI,iBAAiB;4BACjB,SAAS,CAAC,YAAc,CAAC;oCACrB,GAAG,SAAS;oCACZ,CAAC,SAAS,EAAE;2CAAI,SAAS,CAAC,SAAS;wCAAE;qCAAgB;gCACzD,CAAC;4BACD,eAAe,CAAC,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;wBACvF;wBACA,OAAO;oBACX;gBACJ;YACJ,EAAE,OAAO,KAAK;gBACV,QAAQ,KAAK,CAAC,oCAAoC;YACtD;QACJ;IACJ;IAGA,sBAAsB;IACtB,MAAM,oBAAoB;QACtB,iBAAiB,CAAC;IACtB;IAEA,kBAAkB;IAClB,MAAM,iBAAiB,CAAC,UAAwB,qBAC5C,6LAAC,iKAAA,CAAA,YAAS;YAAC,aAAa,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YAAE,MAAK;sBAC/C,CAAC,yBACE,6LAAC;oBAAG,WAAU;oBAAmB,KAAK,SAAS,QAAQ;oBAAG,GAAG,SAAS,cAAc;;wBAC/E,KAAK,QAAQ,EAAE,IAAI,CAAC,SAAS,sBAC1B,6LAAC,6HAAA,CAAA,UAAW;gCAER,SAAS;gCACT,QAAQ,KAAK,EAAE;gCACf,OAAO;gCACP,UAAU;gCACV,yBAAyB,IAAM,wBAAwB,UAAU,KAAK,EAAE,EAAE,QAAQ,EAAE;gCACpF,eAAe,IAAM,cAAc,UAAU,KAAK,EAAE,EAAE,QAAQ,EAAE;gCAChE,kBAAkB;oCACd,iBAAiB;wCAAE;wCAAS,QAAQ,KAAK,EAAE;wCAAE;oCAAS;oCACtD;gCACJ;gCACA,oBAAoB;+BAXf,QAAQ,EAAE;;;;;wBActB,SAAS,WAAW;sCACrB,6LAAC;4BAAI,WAAU;;8CACX,6LAAC,mNAAA,CAAA,QAAK;oCACF,OAAO;oCACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG;oCACvD,aAAY;oCACZ,WAAW,CAAC,IAAM,EAAE,GAAG,KAAK,WAAW,WAAW,UAAU,KAAK,EAAE;oCACnE,WAAW;;;;;;8CAEf,6LAAC,sNAAA,CAAA,SAAM;oCAAC,SAAS,IAAM,WAAW,UAAU,KAAK,EAAE;oCAAG,WAAU;oCAAO,OAAO;wCAAE,UAAU;oCAAO;8CAC7F,cAAA,6LAAC,qMAAA,CAAA,OAAI;wCAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQpC,yBAAyB;IACzB,MAAM,aAAa,CAAC,UAAwB,MAAY;QACpD,MAAM,YAAY,CAAC,aAAa,MAAM,uCAAuC;QAE7E,MAAM,aAAa,KAAK,QAAQ;QAEhC,+DAA+D;QAC/D,MAAM,gBAAgB,aAAa,yCAAyC;QAE5E,qBACI,6LAAC,0HAAA,CAAA,UAAQ;YACL,WAAW;YACX,MAAM;YAEN,MAAM;YACN,UAAU;YACV,OAAO;YACP,2BAA2B;YAC3B,iBAAiB;YACjB,sBAAsB,IAAM,qBAAqB,UAAU,KAAK,EAAE;YAClE,qBAAqB,IAAM,oBAAoB,KAAK,EAAE;YACtD,eAAe;YACf,YAAY,IAAM,WAAW,UAAU,KAAK,EAAE;YAC9C,aAAa,IAAM,YAAY,UAAU,KAAK,EAAE;YAChD,oBAAoB;YACpB,gBAAgB,CAAC,OAAe,eAAe,UAAU;YACzD,iBAAiB;YACjB,kBAAkB;YAClB,YAAY;YACZ,eAAe,aAAa,IAAM,cAAc,UAAU,KAAK,EAAE,IAAI;WAhBhE,KAAK,EAAE;;;;;IAmBxB;IAEA,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAEtE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,kBAAkB;YACpB,MAAM,QAAQ,IAAI;YAClB,MAAM,UAAU,CAAC;gBACb,OACI,KAAK,WAAW,OAAO,MAAM,WAAW,MACxC,KAAK,QAAQ,OAAO,MAAM,QAAQ,MAClC,KAAK,OAAO,OAAO,MAAM,OAAO;YAExC;YAEA,qDAAqD;YACrD,MAAM,sBAAsB,MAAM,EAAE,CAAC,MAAM,CAAC,CAAA,OAAQ,KAAK,SAAS,IAAI,QAAQ,IAAI,KAAK,KAAK,UAAU;YAEtG,iGAAiG;YACjG,IAAI,oBAAoB,MAAM,GAAG,KAAK,CAAC,CAAC,oBAAoB,CAAC,QAAQ,iBAAiB,GAAG;gBACrF,UAAU,SAAS;gBACnB,oBAAoB,QAAS,yCAAyC;YAC1E,OAAO,IAAI,oBAAoB,MAAM,KAAK,GAAG;gBACzC,UAAU,IAAI,8CAA8C;gBAC5D,oBAAoB,OAAQ,+BAA+B;YAC/D;QACJ;QAEA;IACJ,GAAG;QAAC;QAAO;QAAkB;KAAO;IAGpC,8EAA8E;IAC9E,MAAM,4BAA4B,OAAO,UAAwB,QAAgB;QAC7E,aAAa,OAAO,eAAe;QACnC,MAAM,SAAS;QAEf,MAAM,SAAS;QAEf,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,QAAQ;gBACjC,QAAQ;gBACR,SAAS;oBACL,eAAe,CAAC,4CAA4C,CAAC;oBAC7D,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACjB,QAAQ,CAAC,EAAE,OAAO,EAAE,EAAE,SAAS,CAAC;gBACpC;YACJ;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,QAAQ,KAAK,CAAC,qCAAqC,SAAS,UAAU;gBACtE,aAAa;gBACb;YACJ;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI,IAAI,0BAA0B;YAC9D,MAAM,gBAAgB,IAAI,CAAC,EAAE,EAAE,kBAAkB;YAEjD,+FAA+F;YAC/F,MAAM,WAAW,cACZ,KAAK,CAAC,MACN,GAAG,CAAC,CAAC,OAAiB,KAAK,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,SAAS,IAAI,IAAI,IAAI,iCAAiC;aAClH,MAAM,CAAC,CAAC,UAAoB,QAAQ,MAAM,GAAG,KAAK,CAAC,QAAQ,QAAQ,CAAC,SAAS,oCAAoC;aACjH,KAAK,CAAC,IAAI,yCAAyC;YAExD,IAAI,SAAS,MAAM,GAAG,GAAG;gBACrB,SAAS,CAAC,OAAS,CAAC;wBAChB,GAAG,IAAI;wBACP,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAC5B,KAAK,EAAE,KAAK,SACN;gCACE,GAAG,IAAI;gCACP,UAAU,SAAS,GAAG,CAAC,CAAC,aAAqB,QAAkB,CAAC;wCAC5D,IAAI,KAAK,GAAG,KAAK;wCACjB,MAAM;wCACN,WAAW;oCACf,CAAC;4BACL,IACE;oBAEd,CAAC;gBAED,2DAA2D;gBAC3D,mBAAmB,CAAC,OAAS;2BAAI;wBAAM;qBAAO;YAClD;YAEA,aAAa,QAAQ,eAAe;QACxC,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,mCAAmC;YACjD,aAAa,QAAQ,eAAe;QACxC;IACJ;IAEA,kBAAkB;IAClB,MAAM,iBAAiB,CAAC,yBACpB,6LAAC,iKAAA,CAAA,YAAS;YAAC,aAAa;sBACnB,CAAC,UAAU,yBACR,6LAAC,gNAAA,CAAA,OAAI;oBACD,KAAK,SAAS,QAAQ;oBACrB,GAAG,SAAS,cAAc;oBAC3B,WAAW,CAAC,SAAS,EAAE,UAAU,SAAU,SAAS,cAAc,GAAG,gBAAgB,gBAAkB,SAAS,cAAc,GAAG,aAAa,gBAAiB,CAAC;;sCAEhK,6LAAC,6NAAA,CAAA,aAAU;4BAAC,WAAU;;8CAClB,6LAAC,yNAAA,CAAA,UAAO;oCAAC,QAAO;oCAAK,kBAAkB;oCAAG,aAAY;oCAAO,MAAK;oCAAK,UAAS;oCAAS,WAAU;;sDAC/F,6LAAC,wOAAA,CAAA,iBAAc;4CAAC,WAAU;sDACrB,SAAS,CAAC,SAAS;;;;;;sDAExB,6LAAC,wOAAA,CAAA,iBAAc;sDACX,cAAA,6LAAC;gDAAE,WAAU;0DACR,oBAAoB,CAAC,SAAS;;;;;;;;;;;;;;;;;8CAI3C,6LAAC,sNAAA,CAAA,SAAM;oCACH,MAAK;oCACL,UAAU;oCACV,SAAQ;oCACR,SAAS;wCACL,0BAA0B;wCAC1B;oCACJ;8CAEA,cAAA,6LAAC,qMAAA,CAAA,OAAI;wCAAC,MAAM;;;;;;;;;;;;;;;;;wBAKnB,KAAK,CAAC,SAAS,CAAC,MAAM,KAAK,KAAK,aAAa,CAAC,SAAS,CAAC,MAAM,KAAK,kBAChE,6LAAC;4BAAI,WAAU;;8CACX,6LAAC;oCAAI,KAAI;oCAAkB,WAAU;oCAAyB,KAAI;;;;;;8CAClE,6LAAC;oCAAE,WAAU;8CAAgC;;;;;;;;;;;iDAGjD;sCACI,cAAA,6LAAC;gCAAG,WAAU;;oCAET,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,QAAU,WAAW,UAAU,MAAM;oCAGhE,iBAAiB,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,QAAU,WAAW,UAAU,MAAM;;;;;;;;wBAIrG,SAAS,WAAW;;;;;;;WAhDM;;;;;IAsD3C,uBAAuB;IACvB,MAAM,oBAAoB;QACtB,IAAI,QAAQ,IAAI,MAAM,wBAAwB;YAC1C,6BAA6B;YAC7B,MAAM,gBAA4B;gBAC9B,MAAM,QAAQ,IAAI;gBAClB,WAAW;gBACX,UAAU;gBACV,UAAU;gBACV,SAAS,MAAM,OAAO;YAC1B;YAEA,IAAI,MAAM;gBACN,IAAI;oBACA,yDAAyD;oBACzD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAkE,MAAM,SACxF,IAAI,CAAC,SACL,MAAM,CAAC;wBAAC;qBAAc,EAAO,mCAAmC;qBAChE,MAAM,IAAuB,sCAAsC;oBAExE,IAAI,OAAO;wBACP,QAAQ,KAAK,CAAC,kCAAkC;oBACpD,OAAO,IAAI,QAAQ,KAAK,MAAM,GAAG,GAAG;wBAChC,QAAQ,GAAG,CAAC,CAAC,uCAAuC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;wBAEpE,uEAAuE;wBACvE,SAAS,CAAC,OAAS,CAAC;gCAChB,GAAG,IAAI;gCACP,CAAC,uBAAuB,EAAE;uCACnB,IAAI,CAAC,uBAAuB;oCAC/B;wCAAE,GAAG,aAAa;wCAAE,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE;wCAAE,UAAU,EAAE;oCAAC;iCACpD;4BACL,CAAC;oBACL;gBACJ,EAAE,OAAO,KAAK;oBACV,QAAQ,KAAK,CAAC,uCAAuC;gBACzD;YACJ,OAAO;gBACH,wBAAwB;gBACxB,MAAM,UAAU,KAAK,GAAG,IAAI,oCAAoC;gBAChE,MAAM,YAAkB;oBACpB,GAAG,aAAa;oBAAE,IAAI;oBAAS,UAAU,EAAE;oBAC3C,YAAY,IAAI;oBAChB,YAAY,IAAI;oBAChB,cAAc;gBAClB,GAAG,mCAAmC;gBAEtC,SAAS,CAAC,OAAS,CAAC;wBAChB,GAAG,IAAI;wBACP,CAAC,uBAAuB,EAAE;+BAAI,IAAI,CAAC,uBAAuB;4BAAE;yBAAU;oBAC1E,CAAC;YACL;YACA,sCAAsC;YACtC,WAAW;YACX;QACJ;IACJ;IAEA,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAI,WAAU;;oBAEP,OACI,cAAc,OACV,YACI,oBAAoB;kCACpB;kCACI,cAAA,6LAAC;4BAAG,WAAU;sCACT,CAAC;gCACE,MAAM,OAAO,IAAI,OAAO,QAAQ;gCAChC,IAAI,QAAQ,KAAK,OAAO,IAAI;oCACxB,OAAO,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC,sCAAsC,CAAC;gCAC7E,OAAO,IAAI,QAAQ,MAAM,OAAO,IAAI;oCAChC,OAAO,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,yBAAyB,CAAC;gCAClE,OAAO,IAAI,QAAQ,MAAM,OAAO,IAAI;oCAChC,OAAO,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC,4CAA4C,CAAC;gCACnF,OAAO;oCACH,OAAO,CAAC,uCAAuC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;gCACjE;4BACJ,CAAC;;;;;;wCAIT,wBAAwB;kCACxB;;0CACI,6LAAC;gCAAG,WAAU;0CACT,CAAC;oCACE,MAAM,OAAO,IAAI,OAAO,QAAQ;oCAChC,IAAI,QAAQ,KAAK,OAAO,IAAI;wCACxB,OAAO,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC,sCAAsC,CAAC;oCAC7E,OAAO,IAAI,QAAQ,MAAM,OAAO,IAAI;wCAChC,OAAO,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,yBAAyB,CAAC;oCAClE,OAAO,IAAI,QAAQ,MAAM,OAAO,IAAI;wCAChC,OAAO,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC,4CAA4C,CAAC;oCACnF,OAAO;wCACH,OAAO,CAAC,uCAAuC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;oCACjE;gCACJ,CAAC;;;;;;0CAEL,6LAAC;gCAAE,WAAU;;oCAA2B;kDACoC,6LAAC,gNAAA,CAAA,OAAI;wCAAC,MAAK;wCAAW,WAAU;kDAA0B;;;;;;;;;;;;;qDAK9I,6LAAC,yNAAA,CAAA,UAAO;;;;6BAAI,sDAAsD;uBAGtE,0BAA0B;kCAC1B;;0CACI,6LAAC;gCAAG,WAAU;0CAAgD;;;;;;0CAG9D,6LAAC;gCAAE,WAAU;;oCAAqC;kDACe,6LAAC,gNAAA,CAAA,OAAI;wCAAC,MAAK;wCAAW,WAAU;kDAA0B;;;;;;oCAAoB;;;;;;;;;kCAK3J,6LAAC;wBAAI,WAAU;kCAEX,cAAA,6LAAC,gIAAA,CAAA,UAAc;4BACX,OAAO;4BACP,mBAAmB;4BACnB,eAAe;4BACf,MAAM;4BACN,QAAQ;;;;;;;;;;;;;;;;;YAKnB,2BACG,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC,yNAAA,CAAA,UAAO;oBAAC,MAAK;;;;;;;;;;;YAKrB,iCACG,6LAAC,gIAAA,CAAA,UAAS;gBACN,UAAU;gBACV,WAAW;gBACX,SAAS,IAAM,cAAc;;;;;;0BAKrC,6LAAC,mNAAA,CAAA,QAAK;gBAAC,QAAQ;gBAAoB,SAAS;0BACxC,cAAA,6LAAC,kOAAA,CAAA,eAAY;;sCACT,6LAAC,gOAAA,CAAA,cAAW;sCAAC;;;;;;sCACb,6LAAC,4NAAA,CAAA,YAAS;sCACN,cAAA,6LAAC,mNAAA,CAAA,QAAK;gCACF,OAAO;gCACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;gCAC1C,WAAW,CAAC;oCACR,IAAI,EAAE,GAAG,KAAK,SAAS;wCACnB,qBAAsB,wBAAwB;oCAClD,OAAO,IAAI,EAAE,GAAG,KAAK,UAAU;wCAC3B;oCACJ;gCACJ;gCACA,SAAS;gCACT,aAAY;;;;;;;;;;;sCAGpB,6LAAC,gOAAA,CAAA,cAAW;;8CACR,6LAAC,sNAAA,CAAA,SAAM;oCAAC,SAAS;8CAAmB;;;;;;gCAAY;;;;;;;;;;;;;;;;;;0BAM5D,6LAAC,mNAAA,CAAA,QAAK;gBAAC,QAAQ;gBAAiB,SAAS;0BACrC,cAAA,6LAAC,kOAAA,CAAA,eAAY;;sCACT,6LAAC,gOAAA,CAAA,cAAW;sCAAC;;;;;;sCACb,6LAAC,4NAAA,CAAA,YAAS;sCACN,cAAA,6LAAC,mNAAA,CAAA,QAAK;gCACF,OAAO,YAAY,KAAK,QAAQ;gCAChC,UAAU;gCACV,WAAW,CAAC;oCACR,IAAI,EAAE,GAAG,KAAK,SAAS;wCACnB;oCACJ,OAAO,IAAI,EAAE,GAAG,KAAK,UAAU;wCAC3B;oCACJ;gCACJ;gCACA,SAAS;gCACT,aAAY;;;;;;;;;;;sCAGpB,6LAAC,gOAAA,CAAA,cAAW;sCACR,cAAA,6LAAC,sNAAA,CAAA,SAAM;gCAAC,SAAS;0CAAgB;;;;;;;;;;;;;;;;;;;;;;0BAK7C,6LAAC,mNAAA,CAAA,QAAK;gBAAC,QAAQ;gBAAoB,SAAS;0BACxC,cAAA,6LAAC,kOAAA,CAAA,eAAY;;sCACT,6LAAC,gOAAA,CAAA,cAAW;sCAAC;;;;;;sCACb,6LAAC,4NAAA,CAAA,YAAS;sCACN,cAAA,6LAAC,mNAAA,CAAA,QAAK;gCACF,OAAO,eAAe,QAAQ,QAAQ;gCACtC,UAAU;gCACV,WAAW,CAAC;oCACR,IAAI,EAAE,GAAG,KAAK,SAAS;wCACnB;oCACJ,OAAO,IAAI,EAAE,GAAG,KAAK,UAAU;wCAC3B;oCACJ;gCACJ;gCACA,SAAS;gCACT,aAAY;;;;;;;;;;;sCAGpB,6LAAC,gOAAA,CAAA,cAAW;sCACR,cAAA,6LAAC,sNAAA,CAAA,SAAM;gCAAC,SAAS;0CAAmB;;;;;;;;;;;;;;;;;;;;;;0BAKhD,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC,iKAAA,CAAA,kBAAe;oBAAC,WAAW;8BACxB,cAAA,6LAAC;wBAAI,WAAU;kCACV,AAAC;4BAAC;4BAAM;4BAAU;4BAAY;4BAAU;yBAAW,CAAoB,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;AAMpG;GA9lCM;;QACe,wKAAA,CAAA,UAAO;QACF,gIAAA,CAAA,aAAU;QACwD,yKAAA,CAAA,gBAAa;QACJ,yKAAA,CAAA,gBAAa;QACb,yKAAA,CAAA,gBAAa;QAE5F,4JAAA,CAAA,WAAQ;;;KAPxB;uCAgmCS"}},
    {"offset": {"line": 2877, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}