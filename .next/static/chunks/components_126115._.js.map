{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/subtaskitem.tsx"],"sourcesContent":["// SubtaskItem.tsx\n\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { GripVertical, MoreVertical } from 'lucide-react';\nimport { Button, Dropdown, DropdownItem, DropdownMenu, DropdownTrigger } from '@nextui-org/react';\nimport { SubTask, QuadrantType } from '../customtypes'; // Assuming shared types for SubTask and QuadrantType\n\ninterface SubtaskItemProps {\n  subtask: SubTask;\n  taskId: number;\n  index: number;\n  quadrant: QuadrantType;\n  toggleSubtaskCompletion: (quadrant: QuadrantType, taskId: number, subtaskId: number) => void;\n  deleteSubtask: (quadrant: QuadrantType, taskId: number, subtaskId: number) => void;\n  setSubtaskToEdit: (subtask: SubTask, taskId: number, quadrant: QuadrantType) => void;\n}\n\nconst SubtaskItem: React.FC<SubtaskItemProps> = ({\n  subtask,\n  taskId,\n  index,\n  quadrant,\n  toggleSubtaskCompletion,\n  deleteSubtask,\n  setSubtaskToEdit,\n}) => {\n  return (\n    <Draggable key={subtask.id} draggableId={`subtask-${subtask.id}`} index={index}>\n      {(provided, snapshot) => (\n        <li\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          className={`flex items-center justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-200' : ''}`}\n        >\n          <div className=\"flex items-center\">\n            <span className=\"mr-2 cursor-move\" {...provided.dragHandleProps}>\n              <GripVertical size={16} />\n            </span>\n            <input\n              type=\"checkbox\"\n              checked={subtask.completed}\n              onChange={() => toggleSubtaskCompletion(quadrant, taskId, subtask.id)}\n              className=\"mr-2\"\n            />\n            <span className={`text-lg ${subtask.completed ? 'line-through' : ''}`}>{subtask.text}</span>\n          </div>\n          <Dropdown>\n            <DropdownTrigger>\n              <Button size=\"sm\" variant=\"light\">\n                <MoreVertical size={16} />\n              </Button>\n            </DropdownTrigger>\n            <DropdownMenu>\n              <DropdownItem onClick={() => setSubtaskToEdit(subtask, taskId, quadrant)}>Edit Subtask</DropdownItem>\n              <DropdownItem onClick={() => deleteSubtask(quadrant, taskId, subtask.id)}>Delete Subtask</DropdownItem>\n            </DropdownMenu>\n          </Dropdown>\n        </li>\n      )}\n    </Draggable>\n  );\n};\n\nexport default SubtaskItem;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;;;;;;;;;;;;;AAkBlB,MAAM,cAA0C,CAAC,EAC/C,OAAO,EACP,MAAM,EACN,KAAK,EACL,QAAQ,EACR,uBAAuB,EACvB,aAAa,EACb,gBAAgB,EACjB;IACC,qBACE,6LAAC,wLAAA,CAAA,YAAS;QAAkB,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;QAAE,OAAO;kBACtE,CAAC,UAAU,yBACV,6LAAC;gBACC,KAAK,SAAS,QAAQ;gBACrB,GAAG,SAAS,cAAc;gBAC3B,WAAW,CAAC,mDAAmD,EAAE,SAAS,UAAU,GAAG,gBAAgB,GAAG,CAAC;;kCAE3G,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAK,WAAU;gCAAoB,GAAG,SAAS,eAAe;0CAC7D,cAAA,6LAAC,yNAAA,CAAA,eAAY;oCAAC,MAAM;;;;;;;;;;;0CAEtB,6LAAC;gCACC,MAAK;gCACL,SAAS,QAAQ,SAAS;gCAC1B,UAAU,IAAM,wBAAwB,UAAU,QAAQ,QAAQ,EAAE;gCACpE,WAAU;;;;;;0CAEZ,6LAAC;gCAAK,WAAW,CAAC,QAAQ,EAAE,QAAQ,SAAS,GAAG,iBAAiB,GAAG,CAAC;0CAAG,QAAQ,IAAI;;;;;;;;;;;;kCAEtF,6LAAC,4NAAA,CAAA,WAAQ;;0CACP,6LAAC,2OAAA,CAAA,kBAAe;0CACd,cAAA,6LAAC,sNAAA,CAAA,SAAM;oCAAC,MAAK;oCAAK,SAAQ;8CACxB,cAAA,6LAAC,6NAAA,CAAA,eAAY;wCAAC,MAAM;;;;;;;;;;;;;;;;0CAGxB,6LAAC,qOAAA,CAAA,eAAY;;kDACX,6LAAC,kOAAA,CAAA,eAAY;wCAAC,SAAS,IAAM,iBAAiB,SAAS,QAAQ;kDAAW;;;;;;kDAC1E,6LAAC,kOAAA,CAAA,eAAY;wCAAC,SAAS,IAAM,cAAc,UAAU,QAAQ,QAAQ,EAAE;kDAAG;;;;;;;;;;;;;;;;;;;;;;;;OA3BpE,QAAQ,EAAE;;;;;AAkC9B;KA5CM;uCA8CS"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/taskitem.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { ChevronDown, ChevronUp, GripVertical, MoreVertical } from 'lucide-react';\nimport { Button, ButtonGroup, Dropdown, DropdownItem, DropdownMenu, DropdownSection, DropdownTrigger, Spinner } from '@nextui-org/react';\nimport { Task, QuadrantType } from '../customtypes';\n\ninterface TaskItemProps {\n    task: Task;\n    quadrant: QuadrantType;\n    index: number;\n    expandedTaskIds: number[];\n    toggleTaskCompletion: (quadrant: QuadrantType, taskId: number) => void;\n    toggleTaskExpansion: (taskId: number) => void;\n    setTaskToEdit: (task: Task, quadrant: QuadrantType) => void;\n    deleteTask: (quadrant: QuadrantType, taskId: number) => void;\n    renderSubtasks: (task: Task) => JSX.Element;\n    archiveTask: () => void;\n    moveTaskToQuadrant: (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => void;\n    onTaskModalOpen: () => void; // Add this new prop\n    onTaskModalClose: () => void;\n}\n\nconst TaskItem: React.FC<TaskItemProps> = ({\n    task,\n    quadrant,\n    index,\n    expandedTaskIds: propsExpandedTaskIds,\n    toggleTaskCompletion,\n    toggleTaskExpansion,\n    setTaskToEdit,\n    deleteTask,\n    archiveTask,\n    moveTaskToQuadrant,\n    renderSubtasks,\n    onTaskModalOpen, // Add this new prop\n    onTaskModalClose\n}) => {\n    const [expandedTaskIds, setExpandedTaskIds] = useState<number[]>([]);\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n\n    const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n\n\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);\n    };\n\n    const completedSubtasks = task.subtasks.filter(subtask => subtask.completed).length;\n    const totalSubtasks = task.subtasks.length;\n\n    const [loadingAI, setLoadingAI] = useState(false); // Track AI loading state\n\n\n    const quadrants: Record<QuadrantType, string> = {\n        do: 'Do (Urgent & Important)',\n        decide: 'Decide (Not Urgent & Important)',\n        delegate: 'Delegate (Urgent & Not Important)',\n        delete: 'Delete (Not Urgent & Not Important)',\n        unsorted: 'Unsorted Tasks',\n    };\n\n    // Function to handle task breakdown with AI and update the task with subtasks\n\n    const handleBreakdownTaskWithAI = async (quadrant: string, taskId: number, taskText: string) => {\n        setLoadingAI(true);\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/mistralai/Mistral-Small-Instruct-2409\", {\n                method: \"POST\",\n                headers: {\n                    Authorization: \"Bearer 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\",\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    inputs: `Break down this task into smaller tasks: ${taskText}`\n                }),\n            });\n    \n            const data = await response.json();\n            if (data && data[0] && data[0].generated_text) {\n                const newSubtasks = data[0].generated_text.split(\"\\n\").filter((line: string) => line.trim() !== \"\").map((text: string, index: number) => ({\n                    id: Date.now() + index, // This is a simple way to generate unique IDs for the example\n                    text: text.trim(),\n                    completed: false\n                }));\n    \n                setTasks((prevTasks) => ({\n                    ...prevTasks,\n                    [quadrant as QuadrantType]: prevTasks[quadrant as QuadrantType].map((task: { id: any; subtasks: string | any[]; }) => task.id === taskId ? {...task, subtasks: task.subtasks.concat(newSubtasks)} : task)\n                }));\n                setExpandedTaskIds((prev) => [...prev, taskId]); // Ensure the task is expanded to show new subtasks\n            }\n        } catch (error) {\n            console.error(\"AI breakdown error:\", error);\n        } finally {\n            setLoadingAI(false);\n        }\n    };\n\n\n\n    return (\n        <Draggable key={task.id} draggableId={task.id.toString()} index={index}>\n            {(provided, snapshot) => (\n                <li\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    data-task-id={task.id}\n                    data-quadrant={quadrant}\n                    className={`flex flex-col items-start justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-700' : 'hover:bg-default-100'}`}\n                >\n                    <div className=\"flex items-start justify-between w-full\">\n                        <div className=\"flex items-start flex-grow\">\n                            <div className=\"flex items-center m-auto flex-grow\">\n                                <span {...provided.dragHandleProps} className=\"mr-2 cursor-move\">\n                                    <GripVertical size={16} />\n                                </span>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={task.completed}\n                                    onChange={() => toggleTaskCompletion(quadrant, task.id)}\n                                    className=\"mr-2\"\n                                    title=\"Toggle task completion\"\n                                />\n                            </div>\n                            <span\n                                id={`task-text-${task.id}`}\n                                style={{ overflowWrap: 'anywhere' }}\n                                className={`w-full text-lg ${task.completed ? 'line-through' : ''} ${task.archived ? 'opacity-50 italic' : 'opacity-100'}`}\n                            >\n                                {task.text}\n                            </span>\n                        </div>\n\n                        <div className=\"flex items-center\">\n                            {totalSubtasks > 0 && (\n                                <span className=\"text-xs text-default-500 ml-2\">\n                                    {completedSubtasks}/{totalSubtasks}\n                                </span>\n                            )}\n                            <ButtonGroup>\n                                <Button\n                                    style={{ minWidth: 'auto' }}\n                                    size=\"sm\"\n                                    variant=\"light\"\n                                    onClick={() => toggleTaskExpansion(task.id)}\n                                >\n                                    {expandedTaskIds.includes(task.id) ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\n                                </Button>\n                                <Dropdown shouldBlockScroll={false} isOpen={openDropdownId === task.id} onOpenChange={(open) => handleOpenChange(task.id, open)}>\n                                    <DropdownTrigger>\n                                        <Button style={{ minWidth: 'auto' }} size=\"sm\" variant=\"light\">\n                                            <MoreVertical size={16} className=\"h-4 w-4\" />\n                                        </Button>\n                                    </DropdownTrigger>\n                                    <DropdownMenu closeOnSelect={true} disabledKeys={[\"archivepremium\"]}>\n                                        <DropdownItem onClick={() => {\n                                            setTaskToEdit(task, quadrant);\n                                            onTaskModalOpen(); // Call this function to open the modal\n                                        }}>\n                                            Edit Task\n                                        </DropdownItem>\n                                        <DropdownSection title=\"AI Tools\">\n                                            <DropdownItem\n                                                onClick={() => {\n                                                    if (loadingAI) return;\n                                                    setLoadingAI(true);\n                                                    setTimeout(() => setLoadingAI(false), 10000);\n                                                    handleBreakdownTaskWithAI(quadrant, task.id, task.text);\n                                                }}\n                                            >\n                                                {loadingAI ? (\n                                                    <Spinner size=\"sm\" z-index={40} style={{position: \"absolute\"}} />\n                                                ) : (\n                                                    <>Breakdown with AI</>\n                                                )}\n                                            </DropdownItem>\n                                        </DropdownSection>\n                                        <DropdownSection title=\"Move\">\n                                            {Object.keys(quadrants)\n                                                .filter((q) => q !== quadrant)\n                                                .map((targetQuadrant) => (\n                                                    <DropdownItem\n                                                        key={targetQuadrant}\n                                                        onClick={() => moveTaskToQuadrant(quadrant, task.id, targetQuadrant as QuadrantType)}\n                                                    >\n                                                        Move to {quadrants[targetQuadrant as QuadrantType]}\n                                                    </DropdownItem>\n                                                ))}\n                                        </DropdownSection>\n                                        <DropdownSection title=\"Archive\">\n                                            <DropdownItem onClick={() => archiveTask()}>Archive Task</DropdownItem>\n                                        </DropdownSection>\n                                        <DropdownSection title=\"Danger zone\">\n                                            <DropdownItem onClick={() => deleteTask(quadrant, task.id)} className=\"text-red-500\">\n                                                Delete Task\n                                            </DropdownItem>\n                                        </DropdownSection>\n                                    </DropdownMenu>\n                                </Dropdown>\n                            </ButtonGroup>\n                        </div>\n                    </div>\n                    {expandedTaskIds.includes(task.id) && renderSubtasks(task)}\n                </li>\n            )}\n        </Draggable>\n    );\n};\n\nexport default TaskItem;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 528, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/EisenhowerMatrix.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup } from '@nextui-org/button';\nimport { Input } from '@nextui-org/input';\nimport { Card, CardHeader } from '@nextui-org/card';\nimport { Trash2, GripVertical, Plus, MoreVertical, ChevronDown, ChevronUp } from 'lucide-react';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport { Popover, PopoverTrigger, PopoverContent, Dropdown, DropdownTrigger, DropdownSection, DropdownMenu, DropdownItem, Link } from \"@nextui-org/react\";\nimport { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, useDisclosure } from \"@nextui-org/react\";\nimport { useTheme } from \"next-themes\";\nimport { Spinner } from '@nextui-org/react';\nimport FloatingButton from './floatingbutton';\n\nimport { UserProvider, useUser } from '@auth0/nextjs-auth0/client'\n\nimport { createClient } from '@supabase/supabase-js'\nimport SubtaskItem from './subtaskitem';\nimport TaskItem from './taskitem';\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\nconst supabase = createClient(supabaseUrl, supabaseKey)\n\n// Define the structure of a task as stored in Supabase\n// Define the structure of a task as stored in Supabase\ninterface SupabaseTask {\n    id: number; // Change to 'string' if using UUIDs\n    text: string;\n    completed: boolean;\n    archived: boolean;\n    quadrant: QuadrantType;\n    user_id: string;\n}\n\n// Represents the structure of data when inserting a new task\ntype InsertTask = Omit<SupabaseTask, 'id'>; ``\n\ntype Task = {\n    id: number;\n    text: string;\n    completed: boolean;\n    archived: boolean;\n    subtasks: SubTask[];\n    quadrant: QuadrantType;\n};\n\ninterface TaskItemProps {\n    task: Task;\n    quadrant: QuadrantType;\n    index: number;\n    expandedTaskIds: number[];\n    toggleTaskCompletion: (quadrant: QuadrantType, taskId: number) => void;\n    toggleTaskExpansion: (taskId: number) => void;\n    setTaskToEdit?: (task: Task, quadrant: QuadrantType) => void;\n    deleteTask: (quadrant: QuadrantType, taskId: number) => void;\n    renderSubtasks: (task: Task) => JSX.Element;\n    archiveTask: () => void;\n    moveTaskToQuadrant: (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => void;\n}\n\ninterface Props {\n    quadrant: QuadrantType;\n}\n\ntype SubTask = {\n    id: number;\n    text: string;\n    completed: boolean;\n};\n\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\ntype TaskEditInfo = {\n    task: Task;\n    quadrant: QuadrantType;\n};\n\ntype SubtaskEditInfo = {\n    subtask: SubTask;\n    taskId: number;\n    quadrant: QuadrantType;\n};\n\nconst quadrants: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\nconst EisenhowerMatrix: React.FC = () => {\n    const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [archivedTasks, setArchivedTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [isArchiveMode, setIsArchiveMode] = useState(false);\n    const [newTask, setNewTask] = useState('');\n    const [selectedQuadrant, setSelectedQuadrant] = useState<QuadrantType>('unsorted');\n    const [newSubtask, setNewSubtask] = useState('');\n    const [expandedTaskIds, setExpandedTaskIds] = useState<number[]>([]);\n    const [loadingAI, setLoadingAI] = useState(false); // Track AI loading state\n\n    const [taskToEdit, setTaskToEditState] = useState<TaskEditInfo | null>(null);\n\n    // Create a wrapper function that matches the expected signature\n    const setTaskToEdit = (task: Task, quadrant: QuadrantType) => {\n        setTaskToEditState({ task, quadrant });\n    };\n\n    // Now you can pass this `setTaskToEdit` to your TaskItem\n    const [subtaskToEdit, setSubtaskToEdit] = useState<SubtaskEditInfo | null>(null);\n    const { isOpen: isTaskModalOpen, onOpen: onTaskModalOpen, onClose: onTaskModalClose } = useDisclosure();\n    const { isOpen: isSubtaskModalOpen, onOpen: onSubtaskModalOpen, onClose: onSubtaskModalClose } = useDisclosure();\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n    const { theme, setTheme } = useTheme();\n    const { user } = useUser();\n    const [isAddTaskModalOpen, setIsAddTaskModalOpen] = useState(false);\n    const [selectedQuadrantForAdd, setSelectedQuadrantForAdd] = useState<QuadrantType | null>(null);\n\n    // Function to toggle dropdown based on task ID\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);  // Set or reset dropdown based on open state\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent, task: Task, quadrant: QuadrantType) => {\n        switch (e.key) {\n            case 'e':\n                setTaskToEdit(task, quadrant);\n                onTaskModalOpen();\n                break;\n            case 'Delete':\n            case 'Backspace':\n                deleteTask(quadrant, task.id);\n                break;\n        }\n        setOpenDropdownId(null);  // Close dropdown manually after any action\n    };\n\n    const handleSubtaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (subtaskToEdit) {\n            setSubtaskToEdit({\n                ...subtaskToEdit,\n                subtask: { ...subtaskToEdit.subtask, text: e.target.value }\n            });\n        }\n    };\n\n    // This useEffect runs after the component mounts and ensures that localStorage is accessible\n    useEffect(() => {\n        const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n        if (storedTasks) {\n            setTasks(JSON.parse(storedTasks));\n        }\n    }, []); // Empty dependency array ensures this only runs once after mounting\n\n    // Update localStorage whenever tasks are changed\n    useEffect(() => {\n        window.localStorage.setItem('eisenhowerMatrixTasks', JSON.stringify(tasks));\n    }, [tasks]);\n\n    const addSubtask = (quadrant: QuadrantType, taskId: number) => {\n        if (newSubtask.trim()) {\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((task) =>\n                    task.id === taskId\n                        ? {\n                            ...task,\n                            subtasks: [\n                                ...task.subtasks,\n                                { id: Date.now(), text: newSubtask.trim(), completed: false },\n                            ],\n                        }\n                        : task\n                ),\n            }));\n            setNewSubtask('');\n        }\n    };\n\n    const toggleSubtaskCompletion = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId\n                    ? {\n                        ...task,\n                        subtasks: task.subtasks.map((subtask) =>\n                            subtask.id === subtaskId\n                                ? { ...subtask, completed: !subtask.completed }\n                                : subtask\n                        ),\n                    }\n                    : task\n            ),\n        }));\n    };\n\n    const toggleTaskCompletion = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId ? { ...task, completed: !task.completed } : task\n            ),\n        }));\n    };\n\n    const deleteTask = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n        }));\n    };\n\n    const archiveTask = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prevTasks) => ({\n            ...prevTasks,\n            [quadrant]: prevTasks[quadrant].map((task) =>\n                task.id === taskId ? { ...task, archived: true } : task\n            ),\n        }));\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'e' && (event.metaKey || event.ctrlKey)) {\n                event.preventDefault();\n                // Trigger Edit Task if \"E\" is pressed\n                if (taskToEdit) {\n                    // We don't need to call setTaskToEdit here, just open the modal\n                    onTaskModalOpen();\n                }\n            } else if (event.key === 'Backspace') {\n                // Trigger Delete Task if \"Backspace\" key is pressed\n                if (taskToEdit) {\n                    deleteTask(taskToEdit.quadrant, taskToEdit.task.id);\n                }\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [taskToEdit, onTaskModalOpen, deleteTask]);\n\n    const handleTaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (taskToEdit) {\n            setTaskToEditState(prev => ({\n                ...prev!,\n                task: { ...prev!.task, text: e.target.value },\n            }));\n        }\n    };\n\n    const deleteSubtask = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId\n                    ? {\n                        ...task,\n                        subtasks: task.subtasks.filter((subtask) => subtask.id !== subtaskId),\n                    }\n                    : task\n            ),\n        }));\n    };\n\n    // For saving tasks\n    const saveEditedTask = () => {\n        if (taskToEdit) {\n            const { quadrant, task } = taskToEdit;\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((t) =>\n                    t.id === task.id ? { ...t, text: task.text } : t\n                ),\n            }));\n            setTaskToEditState(null);\n            onTaskModalClose();\n        }\n    };\n\n    // For saving subtasks\n    const saveEditedSubtask: () => void = () => {\n        if (subtaskToEdit) {\n            const { quadrant, taskId, subtask } = subtaskToEdit;\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((task) =>\n                    task.id === taskId\n                        ? {\n                            ...task,\n                            subtasks: task.subtasks.map((st) =>\n                                st.id === subtask.id ? { ...st, text: subtask.text } : st\n                            ),\n                        }\n                        : task\n                ),\n            }));\n            setSubtaskToEdit(null);\n            onSubtaskModalClose();  // Close the modal after saving\n        }\n    };\n\n    const toggleTaskExpansion = (taskId: number) => {\n        setExpandedTaskIds((currentIds) => {\n            if (currentIds.includes(taskId)) {\n                return currentIds.filter(id => id !== taskId);\n            } else {\n                return [...currentIds, taskId];\n            }\n        });\n    };\n\n    useEffect(() => {\n        setExpandedTaskIds(expandedTaskIds);\n    }, [expandedTaskIds]);\n\n    const moveTaskToQuadrant = (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => {\n        const sourceTasks = Array.from(tasks[sourceQuadrant]);\n        const taskIndex = sourceTasks.findIndex((task) => task.id === taskId);\n        if (taskIndex === -1) return;\n\n        const [task] = sourceTasks.splice(taskIndex, 1);\n        const updatedTargetTasks = [...tasks[targetQuadrant], task];\n\n        setTasks((prev) => ({\n            ...prev,\n            [sourceQuadrant]: sourceTasks,\n            [targetQuadrant]: updatedTargetTasks,\n        }));\n    };\n\n    // Handles drag-and-drop reordering of tasks, moving between quadrants, and subtasks\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // If there's no destination (i.e., task was dropped outside a valid area), do nothing\n        if (!destination) return;\n\n        const sourceQuadrant = source.droppableId as QuadrantType;\n        const destinationQuadrant = destination.droppableId as QuadrantType;\n\n        // Get source task and check if it's being dropped into a subtask or out of one\n        const sourceTask = sourceQuadrant in tasks ? tasks[sourceQuadrant][source.index] : undefined;\n\n        // Check if dropping into a subtask\n        if (destinationQuadrant === sourceQuadrant && sourceTask) {\n            const destinationTask = tasks[destinationQuadrant][destination.index];\n\n            // If the destination is another task, move sourceTask to be a subtask of destinationTask\n            if (sourceQuadrant === destinationQuadrant && destinationTask && sourceTask.id !== destinationTask.id) {\n                // Move the task as a subtask\n                setTasks((prev) => ({\n                    ...prev,\n                    [destinationQuadrant]: prev[destinationQuadrant].map((task) =>\n                        task.id === destinationTask.id\n                            ? {\n                                ...task,\n                                subtasks: [...task.subtasks, sourceTask], // Add the dragged task as a subtask\n                            }\n                            : task\n                    ),\n                    [sourceQuadrant]: prev[sourceQuadrant].filter((task) => task.id !== sourceTask.id), // Remove from tasks\n                }));\n                return;\n            }\n        }\n\n        // Move task between quadrants or reorder within same quadrant\n        if (sourceQuadrant === destinationQuadrant) {\n            const sourceTasks = tasks[sourceQuadrant] ?? [];\n            const reorderedTasks = Array.from(sourceTasks);\n            const [movedTask] = reorderedTasks.splice(source.index, 1);  // Remove task from source\n            reorderedTasks.splice(destination.index, 0, movedTask);      // Insert at new position\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: reorderedTasks,  // Update state with reordered tasks\n            }));\n        } else {\n            const sourceTasks = Array.from(tasks[sourceQuadrant]);\n            const [movedTask] = sourceTasks.splice(source.index, 1);  // Remove from source\n            const destinationTasks = Array.from(tasks[destinationQuadrant]);\n\n            destinationTasks.splice(destination.index, 0, movedTask);  // Insert in destination\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: sourceTasks,         // Update source quadrant\n                [destinationQuadrant]: destinationTasks,  // Update destination quadrant\n            }));\n        }\n    };\n\n    // Update the renderArchivedTasks function\n    const renderArchivedTasks = (quadrant: QuadrantType) => (\n        <ul className=\"mt-4\">\n            {archivedTasks[quadrant].length > 0 ? (\n                archivedTasks[quadrant].map((task) => (\n                    <li key={task.id} className=\"flex items-center justify-between mb-2\">\n                        <span className=\"line-through\">{task.text}</span>\n                        <Button\n                            size=\"sm\"\n                            variant=\"light\"\n                            onClick={() => unarchiveTask(quadrant, task.id)}\n                        >\n                            Unarchive\n                        </Button>\n                    </li>\n                ))\n            ) : (\n                <p>No archived tasks</p>\n            )}\n        </ul>\n    );\n\n    // Add a new function to unarchive tasks\n    const unarchiveTask = (quadrant: QuadrantType, taskId: number) => {\n        setArchivedTasks((prevArchived) => {\n            const updatedArchived = { ...prevArchived };\n            const taskToUnarchive = updatedArchived[quadrant].find((task) => task.id === taskId);\n            if (taskToUnarchive) {\n                setTasks((prevTasks) => ({\n                    ...prevTasks,\n                    [quadrant]: [...prevTasks[quadrant], taskToUnarchive],\n                }));\n                updatedArchived[quadrant] = updatedArchived[quadrant].filter((task) => task.id !== taskId);\n            }\n            return updatedArchived;\n        });\n    };\n\n    const [showArchived, setShowArchived] = useState(false); // Manage the archived state.\n\n    const showArchivedTasks = () => {\n        setIsArchiveMode(!isArchiveMode);\n        setShowArchived(!showArchived);\n    };\n\n    const renderSubtasks = (quadrant: QuadrantType, task: Task) => (\n        <Droppable droppableId={`subtasks-${task.id}`} type=\"subtask\">\n            {(provided) => (\n                <ul className=\"pl-6 mt-2 w-full\" ref={provided.innerRef} {...provided.droppableProps}>\n                    {task.subtasks.map((subtask, index) => (\n                        <SubtaskItem\n                            key={subtask.id}\n                            subtask={subtask}\n                            taskId={task.id}\n                            index={index}\n                            quadrant={quadrant}\n                            toggleSubtaskCompletion={() => toggleSubtaskCompletion(quadrant, task.id, subtask.id)}\n                            deleteSubtask={() => deleteSubtask(quadrant, task.id, subtask.id)}\n                            setSubtaskToEdit={() => {\n                                setSubtaskToEdit({ subtask, taskId: task.id, quadrant });\n                                onSubtaskModalOpen();\n                            }}\n                        />\n                    ))}\n                    {provided.placeholder}\n                    <div className=\"mt-2 flex items-center\">\n                        <Input\n                            value={newSubtask}\n                            onChange={(e) => setNewSubtask(e.target.value.slice(0, 100))}\n                            placeholder=\"New subtask\"\n                            onKeyDown={(e) => e.key === 'Enter' && addSubtask(quadrant, task.id)}\n                            maxLength={100}\n                        />\n                        <Button onClick={() => addSubtask(quadrant, task.id)} className=\"ml-2\" style={{ minWidth: 'auto' }}>\n                            <Plus size={16} />\n                        </Button>\n                    </div>\n                </ul>\n            )}\n        </Droppable>\n    );\n\n    const renderTask = (quadrant: QuadrantType, task: Task, index: number) => {\n        if (task.archived && !isArchiveMode) {\n            return null; // Skip rendering archived tasks unless archive mode is active\n        }\n\n        return (\n            <TaskItem\n                key={task.id}\n                task={task}\n                quadrant={quadrant}\n                index={index}\n                expandedTaskIds={expandedTaskIds}\n                toggleTaskCompletion={() => toggleTaskCompletion(quadrant, task.id)}\n                toggleTaskExpansion={() => toggleTaskExpansion(task.id)}\n                setTaskToEdit={setTaskToEdit} // Adding the missing prop here\n                deleteTask={() => deleteTask(quadrant, task.id)}\n                archiveTask={() => archiveTask(quadrant, task.id)}\n                moveTaskToQuadrant={moveTaskToQuadrant}\n                renderSubtasks={(task: Task) => renderSubtasks(quadrant, task)}\n                onTaskModalOpen={onTaskModalOpen} // Pass this function to TaskItem\n                onTaskModalClose={onTaskModalClose}\n            />\n        );\n    };\n\n    const renderQuadrant = (quadrant: QuadrantType) => (\n        <Droppable droppableId={quadrant} key={quadrant}>\n            {(provided, snapshot) => (\n                <Card\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`p-4 mb-4 ${theme === \"dark\" ? (snapshot.isDraggingOver ? 'bg-zinc-700' : 'bg-zinc-900') : (snapshot.isDraggingOver ? 'bg-white' : 'bg-background')}`}\n                >\n                    <CardHeader className=\"flex justify-between items-center\">\n                        <div className=\"text-default-500 text-sm\">{quadrants[quadrant]}</div>\n                        <Button\n                            size=\"sm\"\n                            isIconOnly\n                            variant=\"light\"\n                            onClick={() => {\n                                setSelectedQuadrantForAdd(quadrant);\n                                setIsAddTaskModalOpen(true);\n                            }}\n                        >\n                            <Plus size={16} />\n                        </Button>\n                    </CardHeader>\n                    {(isArchiveMode ? archivedTasks : tasks)[quadrant].length === 0 ? (\n                        <div className=\"flex flex-col items-center justify-center py-10 text-center text-default-500\">\n                            <img src=\"/emptystate.png\" className=\"w-10 h-10 mt-2 mx-auto\" alt=\"No tasks\" />\n                            <p className='mt-2 text-default-400 text-sm'>No tasks added yet</p>\n                        </div>\n                    ) : (\n                        <ul className='text-default-90 text-lg'>\n                            {tasks[quadrant].map((task, index) => renderTask(quadrant, task, index))}\n                        </ul>\n                    )}\n                    {provided.placeholder}\n                </Card>\n            )}\n        </Droppable>\n    );\n\n    // Function to handle task breakdown with AI and update the task with subtasks\n\n\n    const addTaskToQuadrant = async () => {\n        if (newTask.trim() && selectedQuadrantForAdd) {\n            // Define the new task object without the ID field, letting Supabase handle the ID generation\n            const newTaskObject: InsertTask = {\n                text: newTask.trim(),\n                completed: false,\n                archived: false,\n                quadrant: selectedQuadrantForAdd,\n                user_id: user?.sub || 'anonymous', // Ensure user_id is handled correctly\n            };\n\n            if (user && user.premium) {\n                try {\n                    const newTaskObjects: InsertTask[] = [newTaskObject];\n\n                    // Insert the new task into Supabase, letting Supabase generate the ID\n                    const { data, error } = await supabase\n                        .from('tasks') // Pass the table name as a string\n                        .insert(newTaskObjects as never[]) // Cast to never[]\n                        .select();\n\n                    if (error) {\n                        console.error('Error adding task to Supabase:', error);\n                        // Optionally, set an error state here to inform the user\n                    } else if (data && data.length > 0) {\n                        console.log(`Task added successfully to Supabase by ${user.name}:`, data);\n\n                        // Update the state only after the task is successfully added to the DB\n                        setTasks((prev) => ({\n                            ...prev,\n                            [selectedQuadrantForAdd]: [\n                                ...prev[selectedQuadrantForAdd],\n                                { ...newTaskObject, id: data[0].id }, // Correctly assign 'id' from Supabase\n                            ],\n                        }));\n                    }\n                } catch (err) {\n                    console.error('Error inserting task into Supabase:', err);\n                    // Optionally, set an error state here to inform the user\n                }\n            } else {\n                // User is not logged in\n                console.log('User not logged in, saving task locally');\n\n                // Save locally to state\n                const localId = Date.now(); // Use a unique local ID (consider using UUIDs for better uniqueness)\n                const localTask: Task = { ...newTaskObject, id: localId, subtasks: [] }; // Initialize subtasks if necessary\n\n                setTasks((prev) => ({\n                    ...prev,\n                    [selectedQuadrantForAdd]: [\n                        ...prev[selectedQuadrantForAdd],\n                        localTask,\n                    ],\n                }));\n\n                // Optionally, you can save to localStorage if needed\n                window.localStorage.setItem(\n                    'eisenhowerMatrixTasks',\n                    JSON.stringify({\n                        ...tasks,\n                        [selectedQuadrantForAdd]: [\n                            ...tasks[selectedQuadrantForAdd],\n                            localTask,\n                        ],\n                    })\n                );\n            }\n\n            // Clear the input and close the modal\n            setNewTask('');\n            setIsAddTaskModalOpen(false);\n        }\n    };\n\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"text-center p-4\">\n                {\n                    // Check if user is logged in\n                    user ? (\n                        // If user is premium, only show the h1\n                        user.premium ? (\n                            // If user is not premium, show both h1 and p\n                            <>\n                                <h1 className=\"tracking-tight inline font-semibold text-base mb-4 leading-9\">\n                                    {(() => {\n                                        const hour = new Date().getHours();\n                                        if (hour >= 5 && hour < 12) {\n                                            return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                        } else if (hour >= 12 && hour < 17) {\n                                            return `Good afternoon, ${user.name}. Ready to power through?`;\n                                        } else if (hour >= 17 && hour < 22) {\n                                            return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                        } else {\n                                            return `Let's get some late-night magic going, ${user.name}!`;\n                                        }\n                                    })()}\n                                </h1>\n                                {/* Display sync message only for non-premium users */}\n                                <p className='text-default-500 text-sm'>\n                                    Sync across all devices with this account and unlock more features with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>\n                                </p>\n                            </>\n\n                        ) : (\n                            <h1 className=\"tracking-tight inline font-semibold text-base mb-4\t leading-9\">\n                                {(() => {\n                                    const hour = new Date().getHours();\n                                    // Morning: 5am to 12pm\n                                    if (hour >= 5 && hour < 12) {\n                                        return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                    }\n                                    // Afternoon: 12pm to 5pm\n                                    else if (hour >= 12 && hour < 17) {\n                                        return `Good afternoon, ${user.name}. Ready to power through?`;\n                                    }\n                                    // Evening: 5pm to 10pm\n                                    else if (hour >= 17 && hour < 22) {\n                                        return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                    }\n                                    // Late night: 10pm to 5am\n                                    else {\n                                        return `Let's get some late-night magic going, ${user.name}!`;\n                                    }\n                                })()}\n                            </h1>\n                        )\n                    ) : (\n                        <>\n                            {/* If user is not logged in, show this default h1 and p */}\n                            <h1 className=\"tracking-tight inline font-semibold leading-0 md:leading-9\">\n                                Prioritize your tasks with the Eisenhower Matrix, and break them down\n                            </h1>\n                            <div className='mb-8 md:mb-0'>\n                                <p className='text-default-500 text-sm mb-8'>\n                                    No account needed, free forever (more features included with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>)\n                                </p>\n                            </div>\n                        </>\n                    )\n                }\n\n                {/* Add Task Modal */}\n                <Modal isOpen={isAddTaskModalOpen} onClose={() => setIsAddTaskModalOpen(false)}>\n                    <ModalContent>\n                        <ModalHeader>\n                            Add Task to {selectedQuadrantForAdd ? quadrants[selectedQuadrantForAdd] : ''}\n                        </ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={newTask}\n                                onChange={(e) => setNewTask(e.target.value.slice(0, 100))}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        addTaskToQuadrant();\n                                    } else if (e.key === 'Escape') {\n                                        setIsAddTaskModalOpen(false);\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new task name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={() => {\n                                addTaskToQuadrant();\n                            }}>Add Task</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                {/* Edit Task Modal */}\n                <Modal isOpen={isTaskModalOpen} onClose={onTaskModalClose}>\n                    <ModalContent>\n                        <ModalHeader>Edit Task</ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={taskToEdit?.task.text || ''}\n                                onChange={handleTaskInputChange}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        saveEditedTask();\n                                    } else if (e.key === 'Escape') {\n                                        onTaskModalClose();\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new task name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={() => saveEditedTask()}>Save</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                {/* Edit Subtask Modal */}\n                <Modal isOpen={isSubtaskModalOpen} onClose={onSubtaskModalClose}>\n                    <ModalContent>\n                        <ModalHeader>Edit Subtask</ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={subtaskToEdit?.subtask.text || ''}\n                                onChange={handleSubtaskInputChange}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        saveEditedSubtask();\n                                    } else if (e.key === 'Escape') {\n                                        onSubtaskModalClose();\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new subtask name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={saveEditedSubtask}>Save</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                <FloatingButton\n                    tasks={tasks}\n                    showArchivedTasks={showArchivedTasks}\n                    isArchiveMode={isArchiveMode}\n                />\n            </div>\n\n            {loadingAI && (\n                <div className=\"z-10 fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <Spinner size=\"lg\" />\n                </div>\n            )}\n            <div className=\"flex-grow overflow-auto sm:p-0 lg:p-4\">\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {(['do', 'decide', 'delegate', 'delete', 'unsorted'] as QuadrantType[]).map(renderQuadrant)}\n                    </div>\n                </DragDropContext>\n            </div>\n        </div>\n    );\n};\n\nexport default EisenhowerMatrix;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1579, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}