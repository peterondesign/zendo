{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/floatingbutton.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { Button, ButtonGroup, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Tooltip } from \"@nextui-org/react\";\nimport { Clipboard, Archive, FileDown, CircleEllipsis } from 'lucide-react';\nimport jsPDF from 'jspdf';\nimport toast, { Toaster } from 'react-hot-toast';\n\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\ninterface Task {\n    id: number;\n    text: string;\n    completed: boolean;\n    subtasks: SubTask[];\n}\n\ninterface SubTask {\n    id: number;\n    text: string;\n    completed: boolean;\n}\n\nconst quadrantDetails: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\ninterface FloatingButtonProps {\n    tasks: Record<QuadrantType, Task[]>;\n    showArchivedTasks: () => void;\n    isArchiveMode: boolean;\n}\n\nconst FloatingButton: React.FC<FloatingButtonProps> = ({ tasks, showArchivedTasks, isArchiveMode }) => {\n    const formatTasksToMarkdown = () => {\n        let markdown = '';\n        (Object.keys(quadrantDetails) as QuadrantType[]).forEach((quadrantKey) => {\n            const quadrantLabel = quadrantDetails[quadrantKey];\n            markdown += `## ${quadrantLabel}\\n\\n`;\n            if (tasks[quadrantKey].length > 0) {\n                tasks[quadrantKey].forEach((task: Task) => {\n                    markdown += `- [${task.completed ? 'x' : ' '}] ${task.text}\\n`;\n                    task.subtasks.forEach((subtask: SubTask) => {\n                        markdown += `   - [${subtask.completed ? 'x' : ' '}] ${subtask.text}\\n`;\n                    });\n                });\n            } else {\n                markdown += 'No tasks added yet.\\n';\n            }\n            markdown += '\\n';\n        });\n        return markdown;\n    };\n\n    const copyToClipboard = () => {\n        const markdownContent = formatTasksToMarkdown();\n        navigator.clipboard.writeText(markdownContent)\n            .then(() => toast.success('Tasks copied to clipboard'))\n            .catch(err => {\n                console.error('Failed to copy to clipboard: ', err);\n                toast.error('Failed to copy tasks');\n            });\n    };\n\n    const saveAsPDF = () => {\n        const pdf = new jsPDF();\n        const pageWidth = pdf.internal.pageSize.getWidth();\n        const tableWidth = pageWidth - 20; // Leave some padding on both sides\n        const lineHeight = 10;\n        let startX = 10;\n        let startY = 20; // Start slightly lower on the page for spacing\n\n        // Loop through quadrants and render tasks in a table layout\n        (Object.keys(quadrantDetails) as QuadrantType[]).forEach((quadrantKey, idx) => {\n            const quadrantLabel = quadrantDetails[quadrantKey];\n\n            // Add space between quadrants (tables)\n            if (idx !== 0) {\n                startY += 20;\n            }\n\n            // Draw the quadrant title\n            pdf.setFontSize(14);\n            pdf.text(quadrantLabel, startX, startY);\n            startY += lineHeight;\n\n            // Draw table for each quadrant\n            pdf.setFontSize(12);\n\n            // Add table header\n            pdf.text('Tasks', startX, startY);\n            pdf.text('Subtasks', startX + 80, startY); // Adjust the X position for subtasks\n            startY += lineHeight;\n\n            // Draw tasks and subtasks inside the table\n            tasks[quadrantKey].forEach((task) => {\n                // Task text with checkbox\n                const checkbox = task.completed ? '[x]' : '[ ]';\n                pdf.text(`${checkbox} ${task.text}`, startX, startY);\n                startY += lineHeight;\n\n                // Subtasks indented with checkbox\n                task.subtasks.forEach((subtask) => {\n                    const subCheckbox = subtask.completed ? '[x]' : '[ ]';\n                    pdf.text(`${subCheckbox} ${subtask.text}`, startX + 80, startY); // Indent subtasks\n                    startY += lineHeight;\n                });\n            });\n\n            // If there are no tasks in the quadrant\n            if (tasks[quadrantKey].length === 0) {\n                pdf.text('No tasks added yet.', startX, startY);\n                startY += lineHeight;\n            }\n\n            // Check if the current Y position exceeds the page length, and add a new page if necessary\n            if (startY > pdf.internal.pageSize.getHeight() - 30) {\n                pdf.addPage();\n                startY = 20; // Reset the Y position for the new page\n            }\n        });\n\n        // Save the generated PDF\n        pdf.save('tasks.pdf');\n        toast.success('PDF exported');\n    };\n\n\n\n    const handleArchiveTasks = () => {\n        showArchivedTasks();\n        toast.success(isArchiveMode ? 'Hiding archived tasks' : 'Showing archived tasks');\n    };\n\n    return (\n        <>\n            <div><Toaster /></div>\n            <ButtonGroup className='z-10 fixed bottom-10 right-10' variant=\"flat\">\n                <Tooltip content=\"Choose an action\">\n                    <Dropdown placement=\"top-end\">\n                        <DropdownTrigger>\n                            <Button isIconOnly>\n                                <CircleEllipsis />\n                            </Button>\n                        </DropdownTrigger>\n                        <DropdownMenu aria-label=\"Task options\" disabledKeys={[\"copy\", \"archive\", \"save\"]}>                           \n                             <DropdownItem\n                            key=\"copy\"\n                            description=\"Premium feature\"\n                            startContent={<Clipboard size={16} />}\n                            onClick={copyToClipboard}\n                        >\n                            Copy Tasks to Clipboard\n                        </DropdownItem>\n                            <DropdownItem\n                                key=\"archive\"\n                                description={\"Premium feature\"}                                startContent={<Archive size={16} />}\n                                onClick={handleArchiveTasks}\n                            >\n                                {isArchiveMode ? \"Hide Archived\" : \"Show Archived\"}\n                            </DropdownItem>\n                            <DropdownItem\n                                key=\"save\"\n                                description=\"Premium feature\"\n                                startContent={<FileDown size={16} />}\n                                onClick={saveAsPDF}\n                            >\n                                Save as PDF\n                            </DropdownItem>\n                        </DropdownMenu>\n                    </Dropdown>\n                </Tooltip>            </ButtonGroup>\n        </>\n    );\n};\n\nexport default FloatingButton;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/tasksyncoperations.tsx"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\ninterface Task {\n    id: number;\n    text: string;\n    completed: boolean;\n    subtasks: SubTask[];\n    archived: boolean;\n}\n\ninterface SubTask {\n    id: number;\n    text: string;\n    completed: boolean;\n}\n\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\nconst supabase = createClient(supabaseUrl, supabaseKey)\n\n// Create or update a task\nexport const upsertTask = async (userId: string, task: Task, quadrant: QuadrantType) => {\n    const { data, error } = await supabase\n        .from('tasks')\n        .upsert({\n            id: task.id,\n            user_id: userId,\n            quadrant,\n            text: task.text,\n            completed: task.completed,\n            archived: task.archived,\n            updated_at: new Date().toISOString()\n        })\n        .select();\n\n    if (error) {\n        console.error('Error upserting task:', error);\n        throw error;\n    }\n\n    console.log('Upserted task data:', data);  // Log the data returned from Supabase\n    return data;\n};\n\n\n// Read tasks for a user\nexport const fetchTasks = async (userId: string) => {\n    const { data, error } = await supabase\n        .from('tasks')\n        .select('*')\n        .eq('user_id', userId)\n\n    if (error) {\n        console.error('Error fetching tasks:', error);\n        throw error;\n    }\n\n    console.log('Fetched tasks:', data);\n    return data;\n}\n\n// Delete a task\nexport const deleteTask = async (userId: string, taskId: number) => {\n    const { error } = await supabase\n        .from('tasks')\n        .delete()\n        .match({ id: taskId, user_id: userId })\n\n    if (error) {\n        console.error('Error deleting task:', error);\n        throw error;\n    }\n\n    console.log('Deleted task with ID:', taskId);\n}\n\n// Sync all tasks for a user\nexport const syncTasks = async (userId: string, tasks: Record<QuadrantType, Task[]>) => {\n    const allTasks = Object.entries(tasks).flatMap(([quadrant, quadrantTasks]) =>\n        quadrantTasks.map(task => ({\n            id: task.id,\n            user_id: userId,\n            quadrant,\n            text: task.text,\n            completed: task.completed,\n            archived: task.archived,\n            updated_at: new Date().toISOString()\n        }))\n    )\n\n    const { data, error } = await supabase\n        .from('tasks')\n        .upsert(allTasks)\n        .select()\n\n    if (error) {\n        console.error('Error syncing tasks:', error);\n        throw error;\n    }\n\n    console.log('Synced tasks data:', data);\n    return data;\n}\n\n// Handle subtasks\nexport const upsertSubtask = async (userId: string, taskId: number, subtask: Task['subtasks'][0]) => {\n    const { data, error } = await supabase\n        .from('subtasks')\n        .upsert({\n            id: subtask.id,\n            task_id: taskId,\n            user_id: userId,\n            text: subtask.text,\n            completed: subtask.completed,\n            updated_at: new Date().toISOString()\n        })\n        .select()\n\n    if (error) {\n        console.error('Error upserting subtask:', error);\n        throw error;\n    }\n\n    console.log('Upserted subtask data:', data);\n    return data;\n}\n\nexport const deleteSubtask = async (userId: string, subtaskId: number) => {\n    const { error } = await supabase\n        .from('subtasks')\n        .delete()\n        .match({ id: subtaskId, user_id: userId })\n\n    if (error) {\n        console.error('Error deleting subtask:', error);\n        throw error;\n    }\n\n    console.log('Deleted subtask with ID:', subtaskId);\n}\n\n// Fetch all subtasks for a user's tasks\nexport const fetchSubtasks = async (userId: string) => {\n    const { data, error } = await supabase\n        .from('subtasks')\n        .select('*')\n        .eq('user_id', userId)\n\n    if (error) {\n        console.error('Error fetching subtasks:', error);\n        throw error;\n    }\n\n    console.log('Fetched subtasks:', data);\n    return data;\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/EisenhowerMatrix.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup } from '@nextui-org/button';\nimport { Input } from '@nextui-org/input';\nimport { Card, CardHeader } from '@nextui-org/card';\nimport { Trash2, GripVertical, Plus, MoreVertical, ChevronDown, ChevronUp } from 'lucide-react';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport { Popover, PopoverTrigger, PopoverContent, Dropdown, DropdownTrigger, DropdownSection, DropdownMenu, DropdownItem, Link } from \"@nextui-org/react\";\nimport GanttChart from '@/components/ganttchart';\nimport { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, useDisclosure } from \"@nextui-org/react\";\nimport { useTheme } from \"next-themes\";\nimport { Kbd } from \"@nextui-org/kbd\";\nimport { Spinner } from '@nextui-org/react';\nimport FloatingButton from './floatingbutton';\n\nimport { UserProvider, useUser } from '@auth0/nextjs-auth0/client'\n\nimport { upsertTask, deleteTask, syncTasks, upsertSubtask, deleteSubtask, fetchTasks, fetchSubtasks } from './tasksyncoperations'\n\nimport { createClient } from '@supabase/supabase-js'\n// Initialize Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\nconst supabase = createClient(supabaseUrl, supabaseKey)\n\ntype Task = {\n    id: number;\n    text: string;\n    completed: boolean;\n    archived: boolean;\n    subtasks: SubTask[];\n    quadrant: QuadrantType; // Add this property\n};\n\ninterface Props {\n    quadrant: QuadrantType;\n}\n\n\ntype SubTask = {\n    id: number;\n    text: string;\n    completed: boolean;\n};\n\ntype QuadrantType = 'do' | 'decide' | 'delegate' | 'delete' | 'unsorted';\n\ntype TaskEditInfo = {\n    task: Task;\n    quadrant: QuadrantType;\n};\n\ntype SubtaskEditInfo = {\n    subtask: SubTask;\n    taskId: number;\n    quadrant: QuadrantType;\n};\n\n\nconst quadrants: Record<QuadrantType, string> = {\n    do: 'Do (Urgent & Important)',\n    decide: 'Decide (Not Urgent & Important)',\n    delegate: 'Delegate (Urgent & Not Important)',\n    delete: 'Delete (Not Urgent & Not Important)',\n    unsorted: 'Unsorted Tasks',\n};\n\nconst initialTasks = () => {\n    const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n    return storedTasks\n        ? JSON.parse(storedTasks)\n        : {\n            do: [],\n            decide: [],\n            delegate: [],\n            delete: [],\n            unsorted: [],\n        };\n};\n\nconst EisenhowerMatrix: React.FC = () => {\n    const [tasks, setTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [archivedTasks, setArchivedTasks] = useState<Record<QuadrantType, Task[]>>({\n        do: [],\n        decide: [],\n        delegate: [],\n        delete: [],\n        unsorted: [],\n    });\n    const [isArchiveMode, setIsArchiveMode] = useState(false);\n\n    const [newTask, setNewTask] = useState('');\n    const [selectedQuadrant, setSelectedQuadrant] = useState<QuadrantType>('unsorted');\n    const [newSubtask, setNewSubtask] = useState('');\n    const [expandedTaskIds, setExpandedTaskIds] = useState<number[]>([]);\n    const [loadingAI, setLoadingAI] = useState(false); // Track AI loading state\n\n\n\n\n    const [taskToEdit, setTaskToEdit] = useState<TaskEditInfo | null>(null);\n    const [subtaskToEdit, setSubtaskToEdit] = useState<SubtaskEditInfo | null>(null);\n    const { isOpen: isTaskModalOpen, onOpen: onTaskModalOpen, onClose: onTaskModalClose } = useDisclosure();\n    const { isOpen: isSubtaskModalOpen, onOpen: onSubtaskModalOpen, onClose: onSubtaskModalClose } = useDisclosure();\n    const [editingType, setEditingType] = useState<'task' | 'subtask' | null>(null);\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n\n\n    const { theme, setTheme } = useTheme();\n\n    const { user } = useUser();\n\n    const [isAddTaskModalOpen, setIsAddTaskModalOpen] = useState(false);\n    const [selectedQuadrantForAdd, setSelectedQuadrantForAdd] = useState<QuadrantType | null>(null);\n\n\n\n    // Function to toggle dropdown based on task ID\n    const handleOpenChange = (taskId: number, open: boolean) => {\n        setOpenDropdownId(open ? taskId : null);  // Set or reset dropdown based on open state\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent, task: Task, quadrant: QuadrantType) => {\n        switch (e.key) {\n            case 'e':\n                setTaskToEdit({ task, quadrant });\n                onTaskModalOpen();\n                break;\n            case 'Delete':\n            case 'Backspace':\n                deleteTask(quadrant, task.id);\n                break;\n        }\n        setOpenDropdownId(null);  // Close dropdown manually after any action\n    };\n\n\n\n    const handleTaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (taskToEdit) {\n            setTaskToEdit({\n                ...taskToEdit,\n                task: { ...taskToEdit.task, text: e.target.value }\n            });\n        }\n    };\n\n    const handleSubtaskInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (subtaskToEdit) {\n            setSubtaskToEdit({\n                ...subtaskToEdit,\n                subtask: { ...subtaskToEdit.subtask, text: e.target.value }\n            });\n        }\n    };\n\n    // This useEffect runs after the component mounts and ensures that localStorage is accessible\n    useEffect(() => {\n        const storedTasks = window.localStorage.getItem('eisenhowerMatrixTasks');\n        if (storedTasks) {\n            setTasks(JSON.parse(storedTasks));\n        }\n    }, []); // Empty dependency array ensures this only runs once after mounting\n\n    // Update localStorage whenever tasks are changed\n    useEffect(() => {\n        window.localStorage.setItem('eisenhowerMatrixTasks', JSON.stringify(tasks));\n    }, [tasks]);\n\n    const toggleTaskExpansion = (taskId: number) => {\n        setExpandedTaskIds((prev) =>\n            prev.includes(taskId) ? prev.filter((id) => id !== taskId) : [...prev, taskId]\n        );\n    };\n\n\n\n\n    useEffect(() => {\n        const loadTasks = async () => {\n            if (user?.premium) {\n                const tasks = await fetchTasksFromDB(user.id as string);\n                const tasksByQuadrant = transformTasksByQuadrant(tasks);\n\n                // Log tasks grouped by quadrant\n                console.log(\"Tasks grouped by quadrant:\", tasksByQuadrant);\n\n                setTasks(tasksByQuadrant);\n            }\n        };\n\n\n        loadTasks();\n    }, [user]);\n\n\n    const addSubtask = (quadrant: QuadrantType, taskId: number) => {\n        if (newSubtask.trim()) {\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((task) =>\n                    task.id === taskId\n                        ? {\n                            ...task,\n                            subtasks: [\n                                ...task.subtasks,\n                                { id: Date.now(), text: newSubtask.trim(), completed: false },\n                            ],\n                        }\n                        : task\n                ),\n            }));\n            setNewSubtask('');\n        }\n    };\n\n    const toggleSubtaskCompletion = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId\n                    ? {\n                        ...task,\n                        subtasks: task.subtasks.map((subtask) =>\n                            subtask.id === subtaskId\n                                ? { ...subtask, completed: !subtask.completed }\n                                : subtask\n                        ),\n                    }\n                    : task\n            ),\n        }));\n    };\n\n    const toggleTaskCompletion = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId ? { ...task, completed: !task.completed } : task\n            ),\n        }));\n    };\n\n    const deleteTask = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].filter((task) => task.id !== taskId),\n        }));\n    };\n\n    const archiveTask = (quadrant: QuadrantType, taskId: number) => {\n        setTasks((prevTasks) => ({\n            ...prevTasks,\n            [quadrant]: prevTasks[quadrant].map((task) =>\n                task.id === taskId ? { ...task, archived: true } : task\n            ),\n        }));\n    };\n\n\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'e' && (event.metaKey || event.ctrlKey)) {\n                event.preventDefault();\n                // Trigger Edit Task if \"E\" is pressed\n                if (taskToEdit) {\n                    setTaskToEdit(taskToEdit);\n                    onTaskModalOpen();  // Open the modal to edit the selected task\n                }\n            } else if (event.key === 'Backspace') {\n                // Trigger Delete Task if \"Del\" key is pressed\n                if (taskToEdit) {\n                    deleteTask(taskToEdit.quadrant, taskToEdit.task.id);\n                }\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [taskToEdit, onTaskModalOpen, deleteTask]);\n\n    const deleteSubtask = (quadrant: QuadrantType, taskId: number, subtaskId: number) => {\n        setTasks((prev) => ({\n            ...prev,\n            [quadrant]: prev[quadrant].map((task) =>\n                task.id === taskId\n                    ? {\n                        ...task,\n                        subtasks: task.subtasks.filter((subtask) => subtask.id !== subtaskId),\n                    }\n                    : task\n            ),\n        }));\n    };\n\n    // For saving tasks\n    const saveEditedTask = () => {\n        if (taskToEdit) {\n            const { quadrant, task } = taskToEdit;\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((t) =>\n                    t.id === task.id ? { ...t, text: task.text } : t\n                ),\n            }));\n            setTaskToEdit(null);\n            onTaskModalClose();  // Close the modal after saving\n        }\n    };\n\n    // For saving subtasks\n    const saveEditedSubtask: () => void = () => {\n        if (subtaskToEdit) {\n            const { quadrant, taskId, subtask } = subtaskToEdit;\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: prev[quadrant].map((task) =>\n                    task.id === taskId\n                        ? {\n                            ...task,\n                            subtasks: task.subtasks.map((st) =>\n                                st.id === subtask.id ? { ...st, text: subtask.text } : st\n                            ),\n                        }\n                        : task\n                ),\n            }));\n            setSubtaskToEdit(null);\n            onSubtaskModalClose();  // Close the modal after saving\n        }\n    };\n\n\n    const moveTaskToQuadrant = (sourceQuadrant: QuadrantType, taskId: number, targetQuadrant: QuadrantType) => {\n        const sourceTasks = Array.from(tasks[sourceQuadrant]);\n        const taskIndex = sourceTasks.findIndex((task) => task.id === taskId);\n        if (taskIndex === -1) return;\n\n        const [task] = sourceTasks.splice(taskIndex, 1);\n        const updatedTargetTasks = [...tasks[targetQuadrant], task];\n\n        setTasks((prev) => ({\n            ...prev,\n            [sourceQuadrant]: sourceTasks,\n            [targetQuadrant]: updatedTargetTasks,\n        }));\n    };\n\n    // Handles drag-and-drop reordering of tasks and moving between quadrants\n    // Handles drag-and-drop reordering of tasks, moving between quadrants, and subtasks\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // If there's no destination (i.e., task was dropped outside a valid area), do nothing\n        if (!destination) return;\n\n        const sourceQuadrant = source.droppableId as QuadrantType;\n        const destinationQuadrant = destination.droppableId as QuadrantType;\n\n        // Get source task and check if it's being dropped into a subtask or out of one\n        const sourceTask = sourceQuadrant in tasks ? tasks[sourceQuadrant][source.index] : undefined;\n\n        // Check if dropping into a subtask\n        if (destinationQuadrant === sourceQuadrant && sourceTask) {\n            const destinationTask = tasks[destinationQuadrant][destination.index];\n\n            // If the destination is another task, move sourceTask to be a subtask of destinationTask\n            if (sourceQuadrant === destinationQuadrant && destinationTask && sourceTask.id !== destinationTask.id) {\n                // Move the task as a subtask\n                setTasks((prev) => ({\n                    ...prev,\n                    [destinationQuadrant]: prev[destinationQuadrant].map((task) =>\n                        task.id === destinationTask.id\n                            ? {\n                                ...task,\n                                subtasks: [...task.subtasks, sourceTask], // Add the dragged task as a subtask\n                            }\n                            : task\n                    ),\n                    [sourceQuadrant]: prev[sourceQuadrant].filter((task) => task.id !== sourceTask.id), // Remove from tasks\n                }));\n                return;\n            }\n        }\n\n        // Move task between quadrants or reorder within same quadrant\n        if (sourceQuadrant === destinationQuadrant) {\n            const sourceTasks = tasks[sourceQuadrant] ?? [];\n            const reorderedTasks = Array.from(sourceTasks);\n            const [movedTask] = reorderedTasks.splice(source.index, 1);  // Remove task from source\n            reorderedTasks.splice(destination.index, 0, movedTask);      // Insert at new position\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: reorderedTasks,  // Update state with reordered tasks\n            }));\n        } else {\n            const sourceTasks = Array.from(tasks[sourceQuadrant]);\n            const [movedTask] = sourceTasks.splice(source.index, 1);  // Remove from source\n            const destinationTasks = Array.from(tasks[destinationQuadrant]);\n\n            destinationTasks.splice(destination.index, 0, movedTask);  // Insert in destination\n\n            setTasks((prev) => ({\n                ...prev,\n                [sourceQuadrant]: sourceTasks,         // Update source quadrant\n                [destinationQuadrant]: destinationTasks,  // Update destination quadrant\n            }));\n        }\n    };\n\n    // Update the renderArchivedTasks function\n    const renderArchivedTasks = (quadrant: QuadrantType) => (\n        <ul className=\"mt-4\">\n            {archivedTasks[quadrant].length > 0 ? (\n                archivedTasks[quadrant].map((task) => (\n                    <li key={task.id} className=\"flex items-center justify-between mb-2\">\n                        <span className=\"line-through\">{task.text}</span>\n                        <Button\n                            size=\"sm\"\n                            variant=\"light\"\n                            onClick={() => unarchiveTask(quadrant, task.id)}\n                        >\n                            Unarchive\n                        </Button>\n                    </li>\n                ))\n            ) : (\n                <p>No archived tasks</p>\n            )}\n        </ul>\n    );\n\n    // Add a new function to unarchive tasks\n    const unarchiveTask = (quadrant: QuadrantType, taskId: number) => {\n        setArchivedTasks((prevArchived) => {\n            const updatedArchived = { ...prevArchived };\n            const taskToUnarchive = updatedArchived[quadrant].find((task) => task.id === taskId);\n            if (taskToUnarchive) {\n                setTasks((prevTasks) => ({\n                    ...prevTasks,\n                    [quadrant]: [...prevTasks[quadrant], taskToUnarchive],\n                }));\n                updatedArchived[quadrant] = updatedArchived[quadrant].filter((task) => task.id !== taskId);\n            }\n            return updatedArchived;\n        });\n    };\n\n    const handleAddTask = async () => {\n        if (!user) {\n            console.error('User is undefined');\n            return;\n        }\n\n        const newTaskText = 'Some default task text';\n\n        const newTaskObject = {\n            user_id: user.id as string, // Cast user.id to string\n            quadrant: selectedQuadrant,\n            text: newTaskText,\n            completed: false,\n            archived: false,\n        };\n\n        const saveTaskToDB = async (newTaskObject: { user_id: string; quadrant: QuadrantType; text: string }) => {\n            const { data, error } = await supabase\n                .from('tasks')\n                .insert([newTaskObject]);  // Insert the new task\n\n            if (error) {\n                console.error('Error saving task to DB:', error);\n                return { data: null, error };\n            }\n\n            console.log('Task successfully saved to DB:', data);\n            return { data, error: null };\n        };\n\n\n        // Log the task before saving to DB\n        console.log(\"Task before saving to DB:\", newTaskObject);\n\n        const { data: savedTask, error } = await saveTaskToDB(newTaskObject);\n        if (error) {\n            console.error('Error saving task:', error);\n        } else {\n            console.log('Task saved:', savedTask);\n        }\n    };\n\n\n\n    const transformTasksByQuadrant = (tasks: Task[]): Record<QuadrantType, Task[]> => {\n        return tasks.reduce((acc, task) => {\n            const quadrant = task.quadrant as QuadrantType;\n            if (!acc[quadrant]) acc[quadrant] = [];\n            acc[quadrant].push(task);\n            return acc;\n        }, {} as Record<QuadrantType, Task[]>);\n    };\n\n    const fetchTasksFromDB = async (userId: string): Promise<Task[]> => {\n        const { data, error } = await supabase.from('tasks').select('*').eq('user_id', userId);\n        if (error) {\n            console.error('Error fetching tasks:', error);\n            return [];\n        }\n        return data;\n    };\n\n    useEffect(() => {\n        const loadTasks = async () => {\n            if (user?.premium) {\n                const tasks = await fetchTasksFromDB(user.id as string);\n                const tasksByQuadrant = transformTasksByQuadrant(tasks);\n                setTasks(tasksByQuadrant);\n            }\n        };\n        loadTasks();\n    }, [user, setTasks]);\n\n    useEffect(() => {\n        console.log(\"Current tasks state:\", tasks);\n    }, [tasks]);\n\n\n\n    const [showArchived, setShowArchived] = useState(false); // Add this line to manage the archived state.\n\n    const showArchivedTasks = () => {\n        setIsArchiveMode(!isArchiveMode);\n        setShowArchived(!showArchived);\n    };\n\n\n    const renderSubtasks = (quadrant: QuadrantType, task: Task) => (\n        <Droppable droppableId={`subtasks-${task.id}`} type=\"subtask\">\n            {(provided) => (\n                <ul className=\"pl-6 mt-2 w-full\" ref={provided.innerRef} {...provided.droppableProps}>\n                    {task.subtasks.map((subtask, index) => (\n                        <Draggable key={subtask.id} draggableId={`subtask-${subtask.id}`} index={index}>\n                            {(provided, snapshot) => (\n                                <li\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    className={`text-lg flex items-center justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-200' : ''\n                                        }`}\n                                >\n                                    <div className=\"flex items-center\">\n                                        <div className=\"flex items-center\">\n                                            <GripVertical className=\"w-max mr-2\" />\n                                            <input\n                                                type=\"checkbox\"\n                                                checked={subtask.completed}\n                                                onChange={() => toggleSubtaskCompletion(quadrant, task.id, subtask.id)}\n                                                className=\"max-w-max mr-2\"\n                                                title=\"Toggle subtask completion\"\n                                            />\n                                            <span\n                                                className={`w-full ${subtask.completed ? 'line-through' : ''\n                                                    } ${task.archived ? 'opacity-50 italic' : 'opacity-100'}`} // Apply archived styles from parent task\n                                                style={{ overflowWrap: 'anywhere' }}\n                                            >\n                                                {subtask.text}\n                                            </span>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"flex justify-end\">\n                                        <div className=\"flex justify-end\">\n                                            <Dropdown>\n                                                <DropdownTrigger>\n                                                    <Button style={{ minWidth: 'auto' }} size=\"sm\" variant=\"light\">\n                                                        <MoreVertical size={16} className=\"h-4 w-4\" />\n                                                    </Button>\n                                                </DropdownTrigger>\n                                                <DropdownMenu>\n                                                    <DropdownItem\n                                                        onClick={() => {\n                                                            setSubtaskToEdit({ subtask, taskId: task.id, quadrant });\n                                                            onSubtaskModalOpen();\n                                                        }}\n                                                    >\n                                                        Edit Subtask\n                                                    </DropdownItem>\n                                                    <DropdownItem\n                                                        onClick={() => deleteSubtask(quadrant, task.id, subtask.id)}\n                                                        className=\"text-red-500\"\n                                                    >\n                                                        Delete Subtask\n                                                    </DropdownItem>\n                                                </DropdownMenu>\n                                            </Dropdown>\n                                        </div>\n                                    </div>\n                                </li>\n                            )}\n                        </Draggable>\n                    ))}\n                    {provided.placeholder}\n                    <div className=\"mt-2 flex items-center\">\n                        <Input\n                            value={newSubtask}\n                            onChange={(e) => setNewSubtask(e.target.value.slice(0, 100))}\n                            placeholder=\"New subtask\"\n                            onKeyDown={(e) => e.key === 'Enter' && addSubtask(quadrant, task.id)}\n                            maxLength={100}\n                        />\n                        <Button onClick={() => addSubtask(quadrant, task.id)} className=\"ml-2\" style={{ minWidth: 'auto' }}>\n                            <Plus size={16} />\n                        </Button>\n                    </div>\n                </ul>\n            )}\n        </Droppable>\n    );\n\n\n    const addTask = async (quadrant: QuadrantType = selectedQuadrant, taskText: string = newTask) => {\n        if (taskText.trim()) {\n            // Ensure that the 'archived' property is included when creating the new task\n            const newTask: Task = {\n                id: Date.now(),\n                text: taskText.trim(),\n                completed: false,\n                subtasks: [],\n                archived: false,\n                quadrant: selectedQuadrant // Add this line\n            };\n\n            setTasks((prev) => ({\n                ...prev,\n                [quadrant]: [...prev[quadrant], newTask],\n            }));\n            setNewTask('');\n\n            if (user?.premium) {  // Only sync tasks if the user is premium\n                try {\n                    await upsertTask(user.id as string, newTask, quadrant);\n                } catch (error) {\n                    console.error('Failed to sync task:', error);\n                    // Revert local state change if sync fails\n                    setTasks((prev) => ({\n                        ...prev,\n                        [quadrant]: prev[quadrant].filter(task => task.id !== newTask.id),\n                    }));\n                }\n            }\n        }\n    };\n\n    const renderTask = (quadrant: QuadrantType, task: Task, index: number) => {\n        if (task.archived && !isArchiveMode) {\n            return null; // Skip rendering archived tasks unless archive mode is active\n        } const completedSubtasks = task.subtasks.filter(subtask => subtask.completed).length;\n        const totalSubtasks = task.subtasks.length;\n\n        return (\n            <Draggable key={task.id} draggableId={task.id.toString()} index={index}>\n                {(provided, snapshot) => (\n                    <li\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        data-task-id={task.id}\n                        data-quadrant={quadrant}\n                        className={`flex flex-col items-start justify-between mb-2 p-2 rounded ${snapshot.isDragging ? 'bg-gray-700' : 'hover:bg-default-100'\n                            }`}\n                    >\n                        <div className=\"flex items-start justify-between w-full\">\n                            <div className=\"flex items-start flex-grow\">\n                                <div className=\"flex items-center m-auto flex-grow\">\n\n                                    <span {...provided.dragHandleProps} className=\"mr-2 cursor-move\">\n                                        <GripVertical size={16} />\n                                    </span>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={task.completed}\n                                        onChange={() => toggleTaskCompletion(quadrant, task.id)}\n                                        className=\"mr-2\"\n                                        title=\"Toggle task completion\"\n                                    />\n                                </div>\n                                <span\n                                    id={`task-text-${task.id}`}\n                                    style={{ overflowWrap: 'anywhere' }}\n                                    className={`w-full text-lg ${task.completed ? 'line-through' : ''} ${task.archived ? 'opacity-50 italic' : 'opacity-100'\n                                        }`} // Fade out and italicize archived tasks\n                                >\n                                    {task.text}  {/* Make sure the task text is being rendered */}\n                                </span>\n\n                            </div>\n\n                            <div className=\"flex items-center\">\n                                {/* Display subtasks completed/total if subtasks exist */}\n                                {totalSubtasks > 0 && (\n                                    <span className=\"text-xs text-default-500 ml-2\">\n                                        {completedSubtasks}/{totalSubtasks}\n                                    </span>\n                                )}\n                                <ButtonGroup>\n                                    <Button\n                                        style={{ minWidth: 'auto' }}\n                                        size=\"sm\"\n                                        variant=\"light\"\n                                        onClick={() => toggleTaskExpansion(task.id)}\n                                    >\n                                        {expandedTaskIds.includes(task.id) ? (\n                                            <ChevronUp size={16} />\n                                        ) : (\n                                            <ChevronDown size={16} />\n                                        )}\n                                    </Button>\n                                    <Dropdown shouldBlockScroll={false} isOpen={openDropdownId === task.id} onOpenChange={(open) => handleOpenChange(task.id, open)}>\n                                        <DropdownTrigger>\n                                            <Button style={{ minWidth: 'auto' }} size=\"sm\" variant=\"light\">\n                                                <MoreVertical size={16} className=\"h-4 w-4\" />\n                                            </Button>\n                                        </DropdownTrigger>\n                                        <DropdownMenu closeOnSelect={false} disabledKeys={[\"archivepremium\"]}>\n                                            <DropdownItem\n                                                onClick={() => {\n                                                    setTaskToEdit({ task, quadrant });\n                                                    onTaskModalOpen();\n                                                    setOpenDropdownId(null);  // Close the dropdown manually\n                                                }}\n                                                onKeyDown={(e) => handleKeyDown(e, task, quadrant)}  // Pass task and quadrant here\n                                                shortcut=\"e\"\n                                            >\n                                                Edit Task\n                                            </DropdownItem>\n                                            <DropdownSection title=\"AI Tools\">\n                                                <DropdownItem\n                                                    onClick={() => {\n                                                        if (loadingAI) return;\n                                                        setLoadingAI(true);\n                                                        setTimeout(() => setLoadingAI(false), 10000);\n                                                        handleBreakdownTaskWithAI(quadrant, task.id, task.text);\n                                                    }}\n                                                >\n                                                    {loadingAI ? (\n                                                        <Spinner size=\"sm\" />\n                                                    ) : (\n                                                        <>Breakdown with AI</>\n                                                    )}\n                                                </DropdownItem>\n                                            </DropdownSection>\n                                            <DropdownSection title=\"Move\">\n                                                {Object.keys(quadrants)\n                                                    .filter((q) => q !== quadrant)\n                                                    .map((targetQuadrant) => (\n                                                        <DropdownItem\n                                                            key={targetQuadrant}\n                                                            onClick={() => moveTaskToQuadrant(quadrant, task.id, targetQuadrant as QuadrantType)}\n                                                        >\n                                                            Move to {quadrants[targetQuadrant as QuadrantType]}\n                                                        </DropdownItem>\n                                                    ))}\n                                            </DropdownSection>\n                                            <DropdownSection title=\"Archive\">\n                                                {user?.premium ? (\n                                                    <DropdownItem onClick={() => archiveTask(quadrant, task.id)}>\n                                                        Archive Task\n                                                    </DropdownItem>\n\n\n                                                ) : (\n\n                                                    <DropdownItem key=\"archivepremium\">\n                                                        Archive Task (Premium feature)\n                                                    </DropdownItem>\n                                                )}\n                                            </DropdownSection>\n\n                                            <DropdownSection title=\"Danger zone\">\n                                                <DropdownItem\n                                                    onClick={() => deleteTask(quadrant, task.id)}\n                                                    className=\"text-red-500\"\n                                                >\n                                                    Delete Task\n                                                </DropdownItem>\n                                            </DropdownSection>\n                                        </DropdownMenu>\n                                    </Dropdown>\n                                </ButtonGroup>\n                            </div>\n                        </div>\n                        {expandedTaskIds.includes(task.id) && renderSubtasks(quadrant, task)}\n                    </li>\n                )}\n            </Draggable>\n        );\n    };\n\n\n    const renderQuadrant = (quadrant: QuadrantType) => (\n        <Droppable droppableId={quadrant} key={quadrant}>\n            {(provided, snapshot) => (\n                <Card\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`p-4 mb-4 ${theme === \"dark\" ? (snapshot.isDraggingOver ? 'bg-zinc-700' : 'bg-zinc-900') : (snapshot.isDraggingOver ? 'bg-white' : 'bg-background')}`}\n                >          <CardHeader className=\"flex justify-between items-center\">\n                        <div className=\"text-default-500 text-sm\">{quadrants[quadrant]}</div>\n                        <Button\n                            size=\"sm\"\n                            isIconOnly\n                            variant=\"light\"\n                            onClick={() => {\n                                setSelectedQuadrantForAdd(quadrant);\n                                setIsAddTaskModalOpen(true);\n                            }}\n                        >\n                            <Plus size={16} />\n                        </Button>\n                    </CardHeader>\n                    {tasks[quadrant].length === 0 ? (\n                        <div className=\"flex flex-col items-center justify-center py-10 text-center text-default-500\">\n                            <img src=\"/emptystate.png\" className=\"w-10 h-10 mt-2 mx-auto\" alt=\"No tasks\" />\n                            <p className='mt-2 text-default-400 text-sm'>No tasks added yet</p>\n                        </div>\n                    ) : (\n                        <ul className='text-default-90 text-lg'>\n                            {tasks[quadrant].map((task, index) => renderTask(quadrant, task, index))}\n                        </ul>\n                    )}\n                    {provided.placeholder}\n                </Card>\n            )}\n        </Droppable>\n    );\n\n\n    // Function to handle task breakdown with AI and update the task with subtasks\n\n\n    const handleBreakdownTaskWithAI = async (quadrant: QuadrantType, taskId: number, taskText: string) => {\n        setLoadingAI(true); // Show spinner\n        const apiUrl = \"https://api-inference.huggingface.co/models/mistralai/Mistral-Small-Instruct-2409\";\n\n        const prompt = \"Only respond with a numbered list of tasks and nothing else. Break down the following task into minimum of 4 to maximum of 8 subtasks, it must not be a repeat of the main task, each subtask must be a single line and less than 12 words. The subtasks should be manageable for an 18-year-old with focus issues and  ADHD and can be completed within 24 hours:\"\n\n        try {\n            const response = await fetch(apiUrl, {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer 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`, // Add your Hugging Face API key here\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    inputs: `${prompt}: ${taskText}`,\n                }),\n            });\n\n            if (!response.ok) {\n                console.error(\"Error fetching from Hugging Face:\", response.statusText);\n                setLoadingAI(false);\n                return;\n            }\n\n            const data = await response.json(); // Parse the JSON response\n            const generatedText = data[0]?.generated_text || \"\";\n\n            // Split the generated text into lines, remove numbering, asterisks, and filter out empty lines\n            const subtasks = generatedText\n                .split(\"\\n\")\n                .map((line: string) => line.replace(/^\\d+\\.\\s*/, '').replace(/\\*\\*/g, '').trim()) // Remove numbering and asterisks\n                .filter((subtask: string) => subtask.length > 0 && !subtask.includes(prompt)) // Remove empty lines and the prompt\n                .slice(1); // Remove the empty line at the beginning\n\n            if (subtasks.length > 0) {\n                setTasks((prev) => ({\n                    ...prev,\n                    [quadrant]: prev[quadrant].map((task) =>\n                        task.id === taskId\n                            ? {\n                                ...task,\n                                subtasks: [...task.subtasks, ...subtasks.map((subtaskText: string, index: number) => ({\n                                    id: Date.now() + index,\n                                    text: subtaskText,\n                                    completed: false,\n                                }))]\n                            }\n                            : task\n                    ),\n                }));\n\n                // Automatically expand the task to show generated subtasks\n                setExpandedTaskIds((prev) => [...prev, taskId]);\n            }\n\n            setLoadingAI(false); // Hide spinner\n        } catch (error) {\n            console.error(\"Error calling Hugging Face API:\", error);\n            setLoadingAI(false); // Hide spinner\n        }\n    };\n\n    const syncAllTasks = async () => {\n        if (user?.premium) {\n            try {\n                await syncTasks(user.id as string, tasks);\n            } catch (error) {\n                console.error('Failed to sync tasks:', error);\n            }\n        }\n    };\n\n    const addTaskToQuadrant = () => {\n        if (newTask.trim() && selectedQuadrantForAdd) {\n            const newTaskObject: Task = {\n                id: Date.now(),\n                text: newTask.trim(),\n                completed: false,\n                subtasks: [],\n                archived: false,\n                quadrant: selectedQuadrantForAdd,\n            };\n\n            setTasks((prev) => ({\n                ...prev,\n                [selectedQuadrantForAdd]: [...prev[selectedQuadrantForAdd], newTaskObject],\n            }));\n\n            setNewTask('');\n            setIsAddTaskModalOpen(false);\n\n            // Optionally, sync with backend if needed\n            // if (user?.premium) {\n            //   upsertTask(user.id as string, newTaskObject, selectedQuadrantForAdd);\n            // }\n        }\n    };\n\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"text-center p-4\">\n                {\n                    // Check if user is logged in\n                    user ? (\n                        // If user is premium, only show the h1\n                        user.premium ? (\n                            // If user is not premium, show both h1 and p\n                            <>\n                                <h1 className=\"tracking-tight inline font-semibold text-base mb-4 leading-9\">\n                                    {(() => {\n                                        const hour = new Date().getHours();\n                                        if (hour >= 5 && hour < 12) {\n                                            return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                        } else if (hour >= 12 && hour < 17) {\n                                            return `Good afternoon, ${user.name}. Ready to power through?`;\n                                        } else if (hour >= 17 && hour < 22) {\n                                            return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                        } else {\n                                            return `Let's get some late-night magic going, ${user.name}!`;\n                                        }\n                                    })()}\n                                </h1>\n                                {/* Display sync message only for non-premium users */}\n                                <p className='text-default-500 text-sm'>\n                                    Sync across all devices with this account and unlock more features with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>\n                                </p>\n                            </>\n\n                        ) : (\n                            <h1 className=\"tracking-tight inline font-semibold text-base mb-4\t leading-9\">\n                                {(() => {\n                                    const hour = new Date().getHours();\n                                    // Morning: 5am to 12pm\n                                    if (hour >= 5 && hour < 12) {\n                                        return `Good morning, ${user.name}. Grab your coffee, and let's do this!`;\n                                    }\n                                    // Afternoon: 12pm to 5pm\n                                    else if (hour >= 12 && hour < 17) {\n                                        return `Good afternoon, ${user.name}. Ready to power through?`;\n                                    }\n                                    // Evening: 5pm to 10pm\n                                    else if (hour >= 17 && hour < 22) {\n                                        return `Good evening, ${user.name}! Ready to close out the day on a high note?`;\n                                    }\n                                    // Late night: 10pm to 5am\n                                    else {\n                                        return `Let's get some late-night magic going, ${user.name}!`;\n                                    }\n                                })()}\n                            </h1>\n                        )\n                    ) : (\n                        <>\n                            {/* If user is not logged in, show this default h1 and p */}\n                            <h1 className=\"tracking-tight inline font-semibold text-base leading-9 mb-4\">\n                                Prioritize your tasks with the Eisenhower Matrix, and break them down\n                            </h1>\n                            <p className='text-default-500 text-sm'>\n                                No account needed, free forever (more features included with <Link href=\"/pricing\" className=\"text-cyan-600 underline\">lifetime deal</Link>)\n                            </p>\n                        </>\n                    )\n                }\n\n                {/* Add Task Modal */}\n                <Modal isOpen={isAddTaskModalOpen} onClose={() => setIsAddTaskModalOpen(false)}>\n                    <ModalContent>\n                        <ModalHeader>\n                            Add Task to {selectedQuadrantForAdd ? quadrants[selectedQuadrantForAdd] : ''}\n                        </ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={newTask}\n                                onChange={(e) => setNewTask(e.target.value.slice(0, 100))}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        addTaskToQuadrant();\n                                    } else if (e.key === 'Escape') {\n                                        setIsAddTaskModalOpen(false);\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new task name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={addTaskToQuadrant}>Add Task</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n\n                <Modal isOpen={isTaskModalOpen} onClose={onTaskModalClose}>\n                    <ModalContent>\n                        <ModalHeader>Edit Task</ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={taskToEdit?.task.text || ''}\n                                onChange={handleTaskInputChange}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        saveEditedTask();\n                                    } else if (e.key === 'Escape') {\n                                        onTaskModalClose();\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new task name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={saveEditedTask}>Save</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                <Modal isOpen={isSubtaskModalOpen} onClose={onSubtaskModalClose}>\n                    <ModalContent>\n                        <ModalHeader>Edit Subtask</ModalHeader>\n                        <ModalBody>\n                            <Input\n                                value={subtaskToEdit?.subtask.text || ''}\n                                onChange={handleSubtaskInputChange}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        saveEditedSubtask();\n                                    } else if (e.key === 'Escape') {\n                                        onSubtaskModalClose();\n                                    }\n                                }}\n                                fullWidth\n                                placeholder=\"Enter new subtask name\"\n                            />\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button onClick={saveEditedSubtask}>Save</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n\n                <FloatingButton\n                    tasks={tasks}\n                    showArchivedTasks={showArchivedTasks}\n                    isArchiveMode={isArchiveMode}\n                />\n            </div>\n            {/* <div className='px-4 pb-8'>\n        <GanttChart/>\n      </div> */}\n            {loadingAI && (\n                <div className=\"z-10 fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <Spinner size=\"lg\" />\n                </div>\n            )}\n            <div className=\"flex-grow overflow-auto sm:p-0 lg:p-4\">\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {(['do', 'decide', 'delegate', 'delete', 'unsorted'] as QuadrantType[]).map(renderQuadrant)}\n                    </div>\n                </DragDropContext>\n            </div>\n        </div>\n    );\n};\n\nexport default EisenhowerMatrix;\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1945, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}